# All policy.conf rules
# Called test_02.conf in expected_pass/conf
# Added redundantallow rules that are covered by attribute

class cl01
class cl02

sid kernel
sid security
sid unlabeled

common cm01 { p11a p11b }
common cm02 { p22a p22b }

class cl01 inherits cm01 { p01a p01b }
class cl02 inherits cm02

sensitivity s01;
sensitivity s02;

dominance { s01 s02 }

category c01;
category c02;

level s01:c01;
level s02:c01,c02;

mlsconstrain cl01 { p01a } ((h1 dom h2) and (l1 domby h1));
mlsvalidatetrans cl02 ((l1 eq l2) or (l1 incomp l2));

attribute atr;
attribute atra;
attribute atrb;
attribute atrc;
attribute atr8;

bool b02a true;
bool b02b true;
bool b03a true;
bool b03b true;
bool b04a true;
bool b04b true;
bool b05 true;
bool b06 true;
bool b07 true;

type tp01;
type tp02;

type tpra;
type tprb;
type tprc;
type tpr1a;
type tpr1b;
type tpr1c;
type tpr1d;
type tpr2a;
type tpr2b;
type tpr3a;
type tpr3b;
type tpr4a;
type tpr4b;
type tpr5;
type tpr6;
type tpr7;
type tpr8a;
type tpr8b;

typeattribute tpra atr, atra;
typeattribute tprb atr, atrb;
typeattribute tprc atr, atrc;
typeattribute tpr8a atr8;
typeattribute tpr8b atr8;

# Redundant 1a -- attr-type
#allow tpra tpr1a:cl01 { p01a p11a p01b p11b };
allow tpra tpr1a:cl01 { p11b };
#allow tprb tpr1a:cl01 { p01a p11a p01b };
#allow tprc tpr1a:cl01 { p01a p11a };
allow atr  tpr1a:cl01 { p01a p11a p01b };

# Redundant 1b -- attr-attr
#allow atra tpr1b:cl01 { p01a p11a p01b p11b };
allow atra tpr1b:cl01 { p11b };
#allow atrb tpr1b:cl01 { p01a p11a p01b };
#allow atrc tpr1b:cl01 { p01a p11a };
allow atr  tpr1b:cl01 { p01a p11a p01b };

# Redundant 1c -- attr-type
#dontaudit tpra tpr1c:cl01 { p01a p11a p01b p11b };
dontaudit tpra tpr1c:cl01 { p11b };
#dontaudit tprb tpr1c:cl01 { p01a p11a p01b };
#dontaudit tprc tpr1c:cl01 { p01a p11a };
dontaudit atr  tpr1c:cl01 { p01a p11a p01b };

# Redundant 1d -- attr-attr
#dontaudit atra tpr1d:cl01 { p01a p11a p01b p11b };
dontaudit atra tpr1d:cl01 { p11b };
#dontaudit atrb tpr1d:cl01 { p01a p11a p01b };
#dontaudit atrc tpr1d:cl01 { p01a p11a };
dontaudit atr  tpr1d:cl01 { p01a p11a p01b };

# Redundant 2a
allow atr  tpr2a:cl01 { p01a p11a p01b };
if (b02a) {
   #allow tpra tpr2a:cl01 { p01a p11a p01b p11b };
   allow tpra tpr2a:cl01 { p11b };
   #allow tprb tpr2a:cl01 { p01a p11a p01b };
   #allow tprc tpr2a:cl01 { p01a p11a };
}

# Redundant 2b
dontaudit atr  tpr2b:cl01 { p01a p11a p01b };
if (b02b) {
   #dontaudit tpra tpr2b:cl01 { p01a p11a p01b p11b };
   dontaudit tpra tpr2b:cl01 { p11b };
   #dontaudit tprb tpr2b:cl01 { p01a p11a p01b };
   #dontaudit tprc tpr2b:cl01 { p01a p11a };
}

# Redundant 3a
allow atra tpr3a:cl01 { p01a p11a p01b };
allow atrb tpr3a:cl01 { p01a p11a };
allow atrc tpr3a:cl01 { p01a };
#allow tpra tpr3a:cl01 { p01a p11a };
#allow tprb tpr3a:cl01 { p01a p11a };
#allow tprc tpr3a:cl01 { p01a p11a };
allow tprc tpr3a:cl01 { p11a };
if (b03a) {
  #allow tpra tpr3a:cl01 { p01a p11a };
  #allow tprb tpr3a:cl01 { p01a p11a };
  #allow tprc tpr3a:cl01 { p01a p11a };
}

# Redundant 3b
#allow tpra tpr3b:cl01 { p01a p11a };
#allow tprb tpr3b:cl01 { p01a p11a };
#allow tprc tpr3b:cl01 { p01a p11a };
allow tprc tpr3b:cl01 { p11a };
allow atra tpr3b:cl01 { p01a p11a p01b };
allow atrb tpr3b:cl01 { p01a p11a };
allow atrc tpr3b:cl01 { p01a };
if (b03b) {
  #allow tpra tpr3b:cl01 { p01a p11a };
  #allow tprb tpr3b:cl01 { p01a p11a };
  #allow tprc tpr3b:cl01 { p01a p11a };
}

# Redundant 4a
allow atr  tpr4a:cl01 { p01a p11a p01b };
#allow tpra tpr4a:cl01 { p01a p11a };
#allow tprb tpr4a:cl01 { p01a p11a };
#allow tprc tpr4a:cl01 { p01a p11a };
if (b04a) {
  #allow tpra tpr4a:cl01 { p01a p11a };
  #allow tprb tpr4a:cl01 { p01a p11a };
  #allow tprc tpr4a:cl01 { p01a p11a };
}

# Redundant 4b
#allow tpra tpr4b:cl01 { p01a p11a };
#allow tprb tpr4b:cl01 { p01a p11a };
#allow tprc tpr4b:cl01 { p01a p11a };
allow atr  tpr4b:cl01 { p01a p11a p01b };
if (b04b) {
  #allow tpra tpr4b:cl01 { p01a p11a };
  #allow tprb tpr4b:cl01 { p01a p11a };
  #allow tprc tpr4b:cl01 { p01a p11a };
}

# Redundant 5
allow tpra tpr5:cl01 { p01a p11a p01b };
allow tprb tpr5:cl01 { p01a p11a };
allow tprc tpr5:cl01 { p01a };
if (b05) {
  #allow tpra tpr5:cl01 { p01a p11a };
  #allow tprb tpr5:cl01 { p01a p11a };
  #allow tprc tpr5:cl01 { p01a p11a };
}

# Redundant 6 -- no optimizations
allow tpra tpr6:cl01 { p01a p11a p01b };
allow tprb tpr6:cl01 { p01a p11a };
allow tprc tpr6:cl01 { p01a };
if (b06) {
  dontaudit tpra tpr6:cl01 { p01a p11a };
  dontaudit tprb tpr6:cl01 { p01a p11a };
  dontaudit tprc tpr6:cl01 { p01a p11a };
}

# Redundant 7 -- No optimization here
if (b07) {
   allow atr  tpr7:cl01 { p01a p11a p01b };
} else {
   allow tpra tpr7:cl01 { p01a p11a p01b p11b };
   allow tprb tpr7:cl01 { p01a p11a p01b };
   allow tprc tpr7:cl01 { p01a p11a };
}

# Redundant 8
allow atr8 self:cl01 { p01a p11a p01b };
#allow tpr8a self:cl01 { p01a }; #Redundant
#allow tpr8a tpr8a:cl01 { p11a };#Redundant
allow tpr8a tpr8b:cl01 { p01b };


role rl01;
role rl01 types { tp01 tp02 };

user us01 roles rl01 level s01 range s01 - s02:c01,c02;

constrain cl01 { p01b } not ((t1 == tp01) and (u1 != u2));

sid kernel us01:rl01:tp01:s01
sid security us01:rl01:tp01:s01
sid unlabeled us01:rl01:tp01:s01

fs_use_xattr fs01 us01:rl01:tp01:s01;
fs_use_task fs02 us01:rl01:tp01:s01;
fs_use_trans fs03 us01:rl01:tp01:s01;
genfscon fs04 / us01:rl01:tp01:s01
portcon udp 1000 us01:rl01:tp01:s01
portcon udp 1001-1009 us01:rl01:tp01:s01
portcon tcp 2000 us01:rl01:tp01:s01
portcon tcp 2001-2009 us01:rl01:tp01:s01
portcon dccp 3000 us01:rl01:tp01:s01
portcon dccp 3001-3009 us01:rl01:tp01:s01
netifcon if01 us01:rl01:tp01:s01 us01:rl01:tp02:s01
nodecon 10.0.0.1 255.255.255.255 us01:rl01:tp01:s01
nodecon fc00::0 ffff:: us01:rl01:tp01:s01
