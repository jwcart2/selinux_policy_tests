# Another Android policy
# Called test_07.conf in expected_pass/conf

#line 1 "system/sepolicy/reqd_mask/security_classes"
# FLASK

#
# Define the security object classes
#

# Classes marked as userspace are classes
# for userspace object managers

class security
class process
class system
class capability

# file-related classes
class filesystem
class file
class dir
class fd
class lnk_file
class chr_file
class blk_file
class sock_file
class fifo_file

# network-related classes
class socket
class tcp_socket
class udp_socket
class rawip_socket
class node
class netif
class netlink_socket
class packet_socket
class key_socket
class unix_stream_socket
class unix_dgram_socket

# sysv-ipc-related classes
class sem
class msg
class msgq
class shm
class ipc

# extended netlink sockets
class netlink_route_socket
class netlink_tcpdiag_socket
class netlink_nflog_socket
class netlink_xfrm_socket
class netlink_selinux_socket
class netlink_audit_socket
class netlink_dnrt_socket

# IPSec association
class association

# Updated Netlink class for KOBJECT_UEVENT family.
class netlink_kobject_uevent_socket

class appletalk_socket

class packet

# Kernel access key retention
class key

class dccp_socket

class memprotect

# network peer labels
class peer

# Capabilities >= 32
class capability2

# kernel services that need to override task security, e.g. cachefiles
class kernel_service

class tun_socket

class binder

# Updated netlink classes for more recent netlink protocols.
class netlink_iscsi_socket
class netlink_fib_lookup_socket
class netlink_connector_socket
class netlink_netfilter_socket
class netlink_generic_socket
class netlink_scsitransport_socket
class netlink_rdma_socket
class netlink_crypto_socket

# Capability checks when on a non-init user namespace
class cap_userns
class cap2_userns

# New socket classes introduced by extended_socket_class policy capability.
# These two were previously mapped to rawip_socket.
class sctp_socket
class icmp_socket
# These were previously mapped to socket.
class ax25_socket
class ipx_socket
class netrom_socket
class atmpvc_socket
class x25_socket
class rose_socket
class decnet_socket
class atmsvc_socket
class rds_socket
class irda_socket
class pppox_socket
class llc_socket
class can_socket
class tipc_socket
class bluetooth_socket
class iucv_socket
class rxrpc_socket
class isdn_socket
class phonet_socket
class ieee802154_socket
class caif_socket
class alg_socket
class nfc_socket
class vsock_socket
class kcm_socket
class qipcrtr_socket

# Property service
class property_service          # userspace

# Service manager
class service_manager           # userspace

# Keystore Key
class keystore_key              # userspace

class drmservice                # userspace
# FLASK
#line 1 "system/sepolicy/reqd_mask/initial_sids"
sid reqd_mask

# FLASK
#line 1 "system/sepolicy/reqd_mask/access_vectors"
#
# Define common prefixes for access vectors
#
# common common_name { permission_name ... }


#
# Define a common prefix for file access vectors.
#

common file
{
	ioctl
	read
	write
	create
	getattr
	setattr
	lock
	relabelfrom
	relabelto
	append
	unlink
	link
	rename
	execute
	quotaon
	mounton
}


#
# Define a common prefix for socket access vectors.
#

common socket
{
# inherited from file
	ioctl
	read
	write
	create
	getattr
	setattr
	lock
	relabelfrom
	relabelto
	append
# socket-specific
	bind
	connect
	listen
	accept
	getopt
	setopt
	shutdown
	recvfrom
	sendto
	name_bind
}

#
# Define a common prefix for ipc access vectors.
#

common ipc
{
	create
	destroy
	getattr
	setattr
	read
	write
	associate
	unix_read
	unix_write
}

#
# Define a common for capability access vectors.
#
common cap
{
	# The capabilities are defined in include/linux/capability.h
	# Capabilities >= 32 are defined in the cap2 common.
	# Care should be taken to ensure that these are consistent with
	# those definitions. (Order matters)

	chown
	dac_override
	dac_read_search
	fowner
	fsetid
	kill
	setgid
	setuid
	setpcap
	linux_immutable
	net_bind_service
	net_broadcast
	net_admin
	net_raw
	ipc_lock
	ipc_owner
	sys_module
	sys_rawio
	sys_chroot
	sys_ptrace
	sys_pacct
	sys_admin
	sys_boot
	sys_nice
	sys_resource
	sys_time
	sys_tty_config
	mknod
	lease
	audit_write
	audit_control
	setfcap
}

common cap2
{
	mac_override	# unused by SELinux
	mac_admin	# unused by SELinux
	syslog
	wake_alarm
	block_suspend
	audit_read
}

#
# Define the access vectors.
#
# class class_name [ inherits common_name ] { permission_name ... }


#
# Define the access vector interpretation for file-related objects.
#

class filesystem
{
	mount
	remount
	unmount
	getattr
	relabelfrom
	relabelto
	associate
	quotamod
	quotaget
}

class dir
inherits file
{
	add_name
	remove_name
	reparent
	search
	rmdir
	open
	audit_access
	execmod
}

class file
inherits file
{
	execute_no_trans
	entrypoint
	execmod
	open
	audit_access
}

class lnk_file
inherits file
{
	open
	audit_access
	execmod
}

class chr_file
inherits file
{
	execute_no_trans
	entrypoint
	execmod
	open
	audit_access
}

class blk_file
inherits file
{
	open
	audit_access
	execmod
}

class sock_file
inherits file
{
	open
	audit_access
	execmod
}

class fifo_file
inherits file
{
	open
	audit_access
	execmod
}

class fd
{
	use
}


#
# Define the access vector interpretation for network-related objects.
#

class socket
inherits socket

class tcp_socket
inherits socket
{
	node_bind
	name_connect
}

class udp_socket
inherits socket
{
	node_bind
}

class rawip_socket
inherits socket
{
	node_bind
}

class node
{
	recvfrom
	sendto
}

class netif
{
	ingress
	egress
}

class netlink_socket
inherits socket

class packet_socket
inherits socket

class key_socket
inherits socket

class unix_stream_socket
inherits socket
{
	connectto
}

class unix_dgram_socket
inherits socket

#
# Define the access vector interpretation for process-related objects
#

class process
{
	fork
	transition
	sigchld # commonly granted from child to parent
	sigkill # cannot be caught or ignored
	sigstop # cannot be caught or ignored
	signull # for kill(pid, 0)
	signal  # all other signals
	ptrace
	getsched
	setsched
	getsession
	getpgid
	setpgid
	getcap
	setcap
	share
	getattr
	setexec
	setfscreate
	noatsecure
	siginh
	setrlimit
	rlimitinh
	dyntransition
	setcurrent
	execmem
	execstack
	execheap
	setkeycreate
	setsockcreate
}


#
# Define the access vector interpretation for ipc-related objects
#

class ipc
inherits ipc

class sem
inherits ipc

class msgq
inherits ipc
{
	enqueue
}

class msg
{
	send
	receive
}

class shm
inherits ipc
{
	lock
}


#
# Define the access vector interpretation for the security server.
#

class security
{
	compute_av
	compute_create
	compute_member
	check_context
	load_policy
	compute_relabel
	compute_user
	setenforce     # was avc_toggle in system class
	setbool
	setsecparam
	setcheckreqprot
	read_policy
}


#
# Define the access vector interpretation for system operations.
#

class system
{
	ipc_info
	syslog_read
	syslog_mod
	syslog_console
	module_request
	module_load
}

#
# Define the access vector interpretation for controlling capabilities
#

class capability
inherits cap

class capability2
inherits cap2

#
# Extended Netlink classes
#
class netlink_route_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_tcpdiag_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_nflog_socket
inherits socket

class netlink_xfrm_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_selinux_socket
inherits socket

class netlink_audit_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
	nlmsg_relay
	nlmsg_readpriv
	nlmsg_tty_audit
}

class netlink_dnrt_socket
inherits socket

# Define the access vector interpretation for controlling
# access to IPSec network data by association
#
class association
{
	sendto
	recvfrom
	setcontext
	polmatch
}

# Updated Netlink class for KOBJECT_UEVENT family.
class netlink_kobject_uevent_socket
inherits socket

class appletalk_socket
inherits socket

class packet
{
	send
	recv
	relabelto
	flow_in		# deprecated
	flow_out	# deprecated
	forward_in
	forward_out
}

class key
{
	view
	read
	write
	search
	link
	setattr
	create
}

class dccp_socket
inherits socket
{
	node_bind
	name_connect
}

class memprotect
{
	mmap_zero
}

# network peer labels
class peer
{
	recv
}

class kernel_service
{
	use_as_override
	create_files_as
}

class tun_socket
inherits socket
{
	attach_queue
}

class binder
{
	impersonate
	call
	set_context_mgr
	transfer
}

class netlink_iscsi_socket
inherits socket

class netlink_fib_lookup_socket
inherits socket

class netlink_connector_socket
inherits socket

class netlink_netfilter_socket
inherits socket

class netlink_generic_socket
inherits socket

class netlink_scsitransport_socket
inherits socket

class netlink_rdma_socket
inherits socket

class netlink_crypto_socket
inherits socket

#
# Define the access vector interpretation for controlling capabilities
# in user namespaces
#

class cap_userns
inherits cap

class cap2_userns
inherits cap2


#
# Define the access vector interpretation for the new socket classes
# enabled by the extended_socket_class policy capability.
#

#
# The next two classes were previously mapped to rawip_socket and therefore
# have the same definition as rawip_socket (until further permissions
# are defined).
#
class sctp_socket
inherits socket
{
	node_bind
}

class icmp_socket
inherits socket
{
	node_bind
}

#
# The remaining network socket classes were previously
# mapped to the socket class and therefore have the
# same definition as socket.
#

class ax25_socket
inherits socket

class ipx_socket
inherits socket

class netrom_socket
inherits socket

class atmpvc_socket
inherits socket

class x25_socket
inherits socket

class rose_socket
inherits socket

class decnet_socket
inherits socket

class atmsvc_socket
inherits socket

class rds_socket
inherits socket

class irda_socket
inherits socket

class pppox_socket
inherits socket

class llc_socket
inherits socket

class can_socket
inherits socket

class tipc_socket
inherits socket

class bluetooth_socket
inherits socket

class iucv_socket
inherits socket

class rxrpc_socket
inherits socket

class isdn_socket
inherits socket

class phonet_socket
inherits socket

class ieee802154_socket
inherits socket

class caif_socket
inherits socket

class alg_socket
inherits socket

class nfc_socket
inherits socket

class vsock_socket
inherits socket

class kcm_socket
inherits socket

class qipcrtr_socket
inherits socket

class property_service
{
	set
}

class service_manager
{
	add
	find
	list
}

class keystore_key
{
	get_state
	get
	insert
	delete
	exist
	list
	reset
	password
	lock
	unlock
	is_empty
	sign
	verify
	grant
	duplicate
	clear_uid
	add_auth
	user_changed
}

class drmservice {
	consumeRights
	setPlaybackStatus
	openDecryptSession
	closeDecryptSession
	initializeDecryptUnit
	decrypt
	finalizeDecryptUnit
	pread
}
#line 1 "system/sepolicy/public/global_macros"
#####################################
# Common groupings of object classes.
#














#####################################
# Common groupings of permissions.
#




















#####################################
# Common socket permission sets.






#line 1 "system/sepolicy/public/neverallow_macros"
#
# Common neverallow permissions




#line 1 "system/sepolicy/reqd_mask/mls_macros"
########################################
#
# gen_cats(N)
#
# declares categores c0 to c(N-1)
#
#line 10




########################################
#
# gen_sens(N)
#
# declares sensitivites s0 to s(N-1) with dominance
# in increasing numeric order with s0 lowest, s(N-1) highest
#
#line 24




#line 34


########################################
#
# gen_levels(N,M)
#
# levels from s0 to (N-1) with categories c0 to (M-1)
#
#line 45




########################################
#
# Basic level names for system low and high
#


#line 1 "system/sepolicy/reqd_mask/mls_decl"
#########################################
# MLS declarations
#

# Generate the desired number of sensitivities and categories.

#line 6
# Each sensitivity has a name and zero or more aliases.
#line 6
sensitivity s0;
#line 6

#line 6

#line 6
# Define the ordering of the sensitivity levels (least to greatest)
#line 6
dominance { s0  }
#line 6

category c0;
#line 7
category c1;
#line 7
category c2;
#line 7
category c3;
#line 7
category c4;
#line 7
category c5;
#line 7
category c6;
#line 7
category c7;
#line 7
category c8;
#line 7
category c9;
#line 7
category c10;
#line 7
category c11;
#line 7
category c12;
#line 7
category c13;
#line 7
category c14;
#line 7
category c15;
#line 7
category c16;
#line 7
category c17;
#line 7
category c18;
#line 7
category c19;
#line 7
category c20;
#line 7
category c21;
#line 7
category c22;
#line 7
category c23;
#line 7
category c24;
#line 7
category c25;
#line 7
category c26;
#line 7
category c27;
#line 7
category c28;
#line 7
category c29;
#line 7
category c30;
#line 7
category c31;
#line 7
category c32;
#line 7
category c33;
#line 7
category c34;
#line 7
category c35;
#line 7
category c36;
#line 7
category c37;
#line 7
category c38;
#line 7
category c39;
#line 7
category c40;
#line 7
category c41;
#line 7
category c42;
#line 7
category c43;
#line 7
category c44;
#line 7
category c45;
#line 7
category c46;
#line 7
category c47;
#line 7
category c48;
#line 7
category c49;
#line 7
category c50;
#line 7
category c51;
#line 7
category c52;
#line 7
category c53;
#line 7
category c54;
#line 7
category c55;
#line 7
category c56;
#line 7
category c57;
#line 7
category c58;
#line 7
category c59;
#line 7
category c60;
#line 7
category c61;
#line 7
category c62;
#line 7
category c63;
#line 7
category c64;
#line 7
category c65;
#line 7
category c66;
#line 7
category c67;
#line 7
category c68;
#line 7
category c69;
#line 7
category c70;
#line 7
category c71;
#line 7
category c72;
#line 7
category c73;
#line 7
category c74;
#line 7
category c75;
#line 7
category c76;
#line 7
category c77;
#line 7
category c78;
#line 7
category c79;
#line 7
category c80;
#line 7
category c81;
#line 7
category c82;
#line 7
category c83;
#line 7
category c84;
#line 7
category c85;
#line 7
category c86;
#line 7
category c87;
#line 7
category c88;
#line 7
category c89;
#line 7
category c90;
#line 7
category c91;
#line 7
category c92;
#line 7
category c93;
#line 7
category c94;
#line 7
category c95;
#line 7
category c96;
#line 7
category c97;
#line 7
category c98;
#line 7
category c99;
#line 7
category c100;
#line 7
category c101;
#line 7
category c102;
#line 7
category c103;
#line 7
category c104;
#line 7
category c105;
#line 7
category c106;
#line 7
category c107;
#line 7
category c108;
#line 7
category c109;
#line 7
category c110;
#line 7
category c111;
#line 7
category c112;
#line 7
category c113;
#line 7
category c114;
#line 7
category c115;
#line 7
category c116;
#line 7
category c117;
#line 7
category c118;
#line 7
category c119;
#line 7
category c120;
#line 7
category c121;
#line 7
category c122;
#line 7
category c123;
#line 7
category c124;
#line 7
category c125;
#line 7
category c126;
#line 7
category c127;
#line 7
category c128;
#line 7
category c129;
#line 7
category c130;
#line 7
category c131;
#line 7
category c132;
#line 7
category c133;
#line 7
category c134;
#line 7
category c135;
#line 7
category c136;
#line 7
category c137;
#line 7
category c138;
#line 7
category c139;
#line 7
category c140;
#line 7
category c141;
#line 7
category c142;
#line 7
category c143;
#line 7
category c144;
#line 7
category c145;
#line 7
category c146;
#line 7
category c147;
#line 7
category c148;
#line 7
category c149;
#line 7
category c150;
#line 7
category c151;
#line 7
category c152;
#line 7
category c153;
#line 7
category c154;
#line 7
category c155;
#line 7
category c156;
#line 7
category c157;
#line 7
category c158;
#line 7
category c159;
#line 7
category c160;
#line 7
category c161;
#line 7
category c162;
#line 7
category c163;
#line 7
category c164;
#line 7
category c165;
#line 7
category c166;
#line 7
category c167;
#line 7
category c168;
#line 7
category c169;
#line 7
category c170;
#line 7
category c171;
#line 7
category c172;
#line 7
category c173;
#line 7
category c174;
#line 7
category c175;
#line 7
category c176;
#line 7
category c177;
#line 7
category c178;
#line 7
category c179;
#line 7
category c180;
#line 7
category c181;
#line 7
category c182;
#line 7
category c183;
#line 7
category c184;
#line 7
category c185;
#line 7
category c186;
#line 7
category c187;
#line 7
category c188;
#line 7
category c189;
#line 7
category c190;
#line 7
category c191;
#line 7
category c192;
#line 7
category c193;
#line 7
category c194;
#line 7
category c195;
#line 7
category c196;
#line 7
category c197;
#line 7
category c198;
#line 7
category c199;
#line 7
category c200;
#line 7
category c201;
#line 7
category c202;
#line 7
category c203;
#line 7
category c204;
#line 7
category c205;
#line 7
category c206;
#line 7
category c207;
#line 7
category c208;
#line 7
category c209;
#line 7
category c210;
#line 7
category c211;
#line 7
category c212;
#line 7
category c213;
#line 7
category c214;
#line 7
category c215;
#line 7
category c216;
#line 7
category c217;
#line 7
category c218;
#line 7
category c219;
#line 7
category c220;
#line 7
category c221;
#line 7
category c222;
#line 7
category c223;
#line 7
category c224;
#line 7
category c225;
#line 7
category c226;
#line 7
category c227;
#line 7
category c228;
#line 7
category c229;
#line 7
category c230;
#line 7
category c231;
#line 7
category c232;
#line 7
category c233;
#line 7
category c234;
#line 7
category c235;
#line 7
category c236;
#line 7
category c237;
#line 7
category c238;
#line 7
category c239;
#line 7
category c240;
#line 7
category c241;
#line 7
category c242;
#line 7
category c243;
#line 7
category c244;
#line 7
category c245;
#line 7
category c246;
#line 7
category c247;
#line 7
category c248;
#line 7
category c249;
#line 7
category c250;
#line 7
category c251;
#line 7
category c252;
#line 7
category c253;
#line 7
category c254;
#line 7
category c255;
#line 7
category c256;
#line 7
category c257;
#line 7
category c258;
#line 7
category c259;
#line 7
category c260;
#line 7
category c261;
#line 7
category c262;
#line 7
category c263;
#line 7
category c264;
#line 7
category c265;
#line 7
category c266;
#line 7
category c267;
#line 7
category c268;
#line 7
category c269;
#line 7
category c270;
#line 7
category c271;
#line 7
category c272;
#line 7
category c273;
#line 7
category c274;
#line 7
category c275;
#line 7
category c276;
#line 7
category c277;
#line 7
category c278;
#line 7
category c279;
#line 7
category c280;
#line 7
category c281;
#line 7
category c282;
#line 7
category c283;
#line 7
category c284;
#line 7
category c285;
#line 7
category c286;
#line 7
category c287;
#line 7
category c288;
#line 7
category c289;
#line 7
category c290;
#line 7
category c291;
#line 7
category c292;
#line 7
category c293;
#line 7
category c294;
#line 7
category c295;
#line 7
category c296;
#line 7
category c297;
#line 7
category c298;
#line 7
category c299;
#line 7
category c300;
#line 7
category c301;
#line 7
category c302;
#line 7
category c303;
#line 7
category c304;
#line 7
category c305;
#line 7
category c306;
#line 7
category c307;
#line 7
category c308;
#line 7
category c309;
#line 7
category c310;
#line 7
category c311;
#line 7
category c312;
#line 7
category c313;
#line 7
category c314;
#line 7
category c315;
#line 7
category c316;
#line 7
category c317;
#line 7
category c318;
#line 7
category c319;
#line 7
category c320;
#line 7
category c321;
#line 7
category c322;
#line 7
category c323;
#line 7
category c324;
#line 7
category c325;
#line 7
category c326;
#line 7
category c327;
#line 7
category c328;
#line 7
category c329;
#line 7
category c330;
#line 7
category c331;
#line 7
category c332;
#line 7
category c333;
#line 7
category c334;
#line 7
category c335;
#line 7
category c336;
#line 7
category c337;
#line 7
category c338;
#line 7
category c339;
#line 7
category c340;
#line 7
category c341;
#line 7
category c342;
#line 7
category c343;
#line 7
category c344;
#line 7
category c345;
#line 7
category c346;
#line 7
category c347;
#line 7
category c348;
#line 7
category c349;
#line 7
category c350;
#line 7
category c351;
#line 7
category c352;
#line 7
category c353;
#line 7
category c354;
#line 7
category c355;
#line 7
category c356;
#line 7
category c357;
#line 7
category c358;
#line 7
category c359;
#line 7
category c360;
#line 7
category c361;
#line 7
category c362;
#line 7
category c363;
#line 7
category c364;
#line 7
category c365;
#line 7
category c366;
#line 7
category c367;
#line 7
category c368;
#line 7
category c369;
#line 7
category c370;
#line 7
category c371;
#line 7
category c372;
#line 7
category c373;
#line 7
category c374;
#line 7
category c375;
#line 7
category c376;
#line 7
category c377;
#line 7
category c378;
#line 7
category c379;
#line 7
category c380;
#line 7
category c381;
#line 7
category c382;
#line 7
category c383;
#line 7
category c384;
#line 7
category c385;
#line 7
category c386;
#line 7
category c387;
#line 7
category c388;
#line 7
category c389;
#line 7
category c390;
#line 7
category c391;
#line 7
category c392;
#line 7
category c393;
#line 7
category c394;
#line 7
category c395;
#line 7
category c396;
#line 7
category c397;
#line 7
category c398;
#line 7
category c399;
#line 7
category c400;
#line 7
category c401;
#line 7
category c402;
#line 7
category c403;
#line 7
category c404;
#line 7
category c405;
#line 7
category c406;
#line 7
category c407;
#line 7
category c408;
#line 7
category c409;
#line 7
category c410;
#line 7
category c411;
#line 7
category c412;
#line 7
category c413;
#line 7
category c414;
#line 7
category c415;
#line 7
category c416;
#line 7
category c417;
#line 7
category c418;
#line 7
category c419;
#line 7
category c420;
#line 7
category c421;
#line 7
category c422;
#line 7
category c423;
#line 7
category c424;
#line 7
category c425;
#line 7
category c426;
#line 7
category c427;
#line 7
category c428;
#line 7
category c429;
#line 7
category c430;
#line 7
category c431;
#line 7
category c432;
#line 7
category c433;
#line 7
category c434;
#line 7
category c435;
#line 7
category c436;
#line 7
category c437;
#line 7
category c438;
#line 7
category c439;
#line 7
category c440;
#line 7
category c441;
#line 7
category c442;
#line 7
category c443;
#line 7
category c444;
#line 7
category c445;
#line 7
category c446;
#line 7
category c447;
#line 7
category c448;
#line 7
category c449;
#line 7
category c450;
#line 7
category c451;
#line 7
category c452;
#line 7
category c453;
#line 7
category c454;
#line 7
category c455;
#line 7
category c456;
#line 7
category c457;
#line 7
category c458;
#line 7
category c459;
#line 7
category c460;
#line 7
category c461;
#line 7
category c462;
#line 7
category c463;
#line 7
category c464;
#line 7
category c465;
#line 7
category c466;
#line 7
category c467;
#line 7
category c468;
#line 7
category c469;
#line 7
category c470;
#line 7
category c471;
#line 7
category c472;
#line 7
category c473;
#line 7
category c474;
#line 7
category c475;
#line 7
category c476;
#line 7
category c477;
#line 7
category c478;
#line 7
category c479;
#line 7
category c480;
#line 7
category c481;
#line 7
category c482;
#line 7
category c483;
#line 7
category c484;
#line 7
category c485;
#line 7
category c486;
#line 7
category c487;
#line 7
category c488;
#line 7
category c489;
#line 7
category c490;
#line 7
category c491;
#line 7
category c492;
#line 7
category c493;
#line 7
category c494;
#line 7
category c495;
#line 7
category c496;
#line 7
category c497;
#line 7
category c498;
#line 7
category c499;
#line 7
category c500;
#line 7
category c501;
#line 7
category c502;
#line 7
category c503;
#line 7
category c504;
#line 7
category c505;
#line 7
category c506;
#line 7
category c507;
#line 7
category c508;
#line 7
category c509;
#line 7
category c510;
#line 7
category c511;
#line 7
category c512;
#line 7
category c513;
#line 7
category c514;
#line 7
category c515;
#line 7
category c516;
#line 7
category c517;
#line 7
category c518;
#line 7
category c519;
#line 7
category c520;
#line 7
category c521;
#line 7
category c522;
#line 7
category c523;
#line 7
category c524;
#line 7
category c525;
#line 7
category c526;
#line 7
category c527;
#line 7
category c528;
#line 7
category c529;
#line 7
category c530;
#line 7
category c531;
#line 7
category c532;
#line 7
category c533;
#line 7
category c534;
#line 7
category c535;
#line 7
category c536;
#line 7
category c537;
#line 7
category c538;
#line 7
category c539;
#line 7
category c540;
#line 7
category c541;
#line 7
category c542;
#line 7
category c543;
#line 7
category c544;
#line 7
category c545;
#line 7
category c546;
#line 7
category c547;
#line 7
category c548;
#line 7
category c549;
#line 7
category c550;
#line 7
category c551;
#line 7
category c552;
#line 7
category c553;
#line 7
category c554;
#line 7
category c555;
#line 7
category c556;
#line 7
category c557;
#line 7
category c558;
#line 7
category c559;
#line 7
category c560;
#line 7
category c561;
#line 7
category c562;
#line 7
category c563;
#line 7
category c564;
#line 7
category c565;
#line 7
category c566;
#line 7
category c567;
#line 7
category c568;
#line 7
category c569;
#line 7
category c570;
#line 7
category c571;
#line 7
category c572;
#line 7
category c573;
#line 7
category c574;
#line 7
category c575;
#line 7
category c576;
#line 7
category c577;
#line 7
category c578;
#line 7
category c579;
#line 7
category c580;
#line 7
category c581;
#line 7
category c582;
#line 7
category c583;
#line 7
category c584;
#line 7
category c585;
#line 7
category c586;
#line 7
category c587;
#line 7
category c588;
#line 7
category c589;
#line 7
category c590;
#line 7
category c591;
#line 7
category c592;
#line 7
category c593;
#line 7
category c594;
#line 7
category c595;
#line 7
category c596;
#line 7
category c597;
#line 7
category c598;
#line 7
category c599;
#line 7
category c600;
#line 7
category c601;
#line 7
category c602;
#line 7
category c603;
#line 7
category c604;
#line 7
category c605;
#line 7
category c606;
#line 7
category c607;
#line 7
category c608;
#line 7
category c609;
#line 7
category c610;
#line 7
category c611;
#line 7
category c612;
#line 7
category c613;
#line 7
category c614;
#line 7
category c615;
#line 7
category c616;
#line 7
category c617;
#line 7
category c618;
#line 7
category c619;
#line 7
category c620;
#line 7
category c621;
#line 7
category c622;
#line 7
category c623;
#line 7
category c624;
#line 7
category c625;
#line 7
category c626;
#line 7
category c627;
#line 7
category c628;
#line 7
category c629;
#line 7
category c630;
#line 7
category c631;
#line 7
category c632;
#line 7
category c633;
#line 7
category c634;
#line 7
category c635;
#line 7
category c636;
#line 7
category c637;
#line 7
category c638;
#line 7
category c639;
#line 7
category c640;
#line 7
category c641;
#line 7
category c642;
#line 7
category c643;
#line 7
category c644;
#line 7
category c645;
#line 7
category c646;
#line 7
category c647;
#line 7
category c648;
#line 7
category c649;
#line 7
category c650;
#line 7
category c651;
#line 7
category c652;
#line 7
category c653;
#line 7
category c654;
#line 7
category c655;
#line 7
category c656;
#line 7
category c657;
#line 7
category c658;
#line 7
category c659;
#line 7
category c660;
#line 7
category c661;
#line 7
category c662;
#line 7
category c663;
#line 7
category c664;
#line 7
category c665;
#line 7
category c666;
#line 7
category c667;
#line 7
category c668;
#line 7
category c669;
#line 7
category c670;
#line 7
category c671;
#line 7
category c672;
#line 7
category c673;
#line 7
category c674;
#line 7
category c675;
#line 7
category c676;
#line 7
category c677;
#line 7
category c678;
#line 7
category c679;
#line 7
category c680;
#line 7
category c681;
#line 7
category c682;
#line 7
category c683;
#line 7
category c684;
#line 7
category c685;
#line 7
category c686;
#line 7
category c687;
#line 7
category c688;
#line 7
category c689;
#line 7
category c690;
#line 7
category c691;
#line 7
category c692;
#line 7
category c693;
#line 7
category c694;
#line 7
category c695;
#line 7
category c696;
#line 7
category c697;
#line 7
category c698;
#line 7
category c699;
#line 7
category c700;
#line 7
category c701;
#line 7
category c702;
#line 7
category c703;
#line 7
category c704;
#line 7
category c705;
#line 7
category c706;
#line 7
category c707;
#line 7
category c708;
#line 7
category c709;
#line 7
category c710;
#line 7
category c711;
#line 7
category c712;
#line 7
category c713;
#line 7
category c714;
#line 7
category c715;
#line 7
category c716;
#line 7
category c717;
#line 7
category c718;
#line 7
category c719;
#line 7
category c720;
#line 7
category c721;
#line 7
category c722;
#line 7
category c723;
#line 7
category c724;
#line 7
category c725;
#line 7
category c726;
#line 7
category c727;
#line 7
category c728;
#line 7
category c729;
#line 7
category c730;
#line 7
category c731;
#line 7
category c732;
#line 7
category c733;
#line 7
category c734;
#line 7
category c735;
#line 7
category c736;
#line 7
category c737;
#line 7
category c738;
#line 7
category c739;
#line 7
category c740;
#line 7
category c741;
#line 7
category c742;
#line 7
category c743;
#line 7
category c744;
#line 7
category c745;
#line 7
category c746;
#line 7
category c747;
#line 7
category c748;
#line 7
category c749;
#line 7
category c750;
#line 7
category c751;
#line 7
category c752;
#line 7
category c753;
#line 7
category c754;
#line 7
category c755;
#line 7
category c756;
#line 7
category c757;
#line 7
category c758;
#line 7
category c759;
#line 7
category c760;
#line 7
category c761;
#line 7
category c762;
#line 7
category c763;
#line 7
category c764;
#line 7
category c765;
#line 7
category c766;
#line 7
category c767;
#line 7
category c768;
#line 7
category c769;
#line 7
category c770;
#line 7
category c771;
#line 7
category c772;
#line 7
category c773;
#line 7
category c774;
#line 7
category c775;
#line 7
category c776;
#line 7
category c777;
#line 7
category c778;
#line 7
category c779;
#line 7
category c780;
#line 7
category c781;
#line 7
category c782;
#line 7
category c783;
#line 7
category c784;
#line 7
category c785;
#line 7
category c786;
#line 7
category c787;
#line 7
category c788;
#line 7
category c789;
#line 7
category c790;
#line 7
category c791;
#line 7
category c792;
#line 7
category c793;
#line 7
category c794;
#line 7
category c795;
#line 7
category c796;
#line 7
category c797;
#line 7
category c798;
#line 7
category c799;
#line 7
category c800;
#line 7
category c801;
#line 7
category c802;
#line 7
category c803;
#line 7
category c804;
#line 7
category c805;
#line 7
category c806;
#line 7
category c807;
#line 7
category c808;
#line 7
category c809;
#line 7
category c810;
#line 7
category c811;
#line 7
category c812;
#line 7
category c813;
#line 7
category c814;
#line 7
category c815;
#line 7
category c816;
#line 7
category c817;
#line 7
category c818;
#line 7
category c819;
#line 7
category c820;
#line 7
category c821;
#line 7
category c822;
#line 7
category c823;
#line 7
category c824;
#line 7
category c825;
#line 7
category c826;
#line 7
category c827;
#line 7
category c828;
#line 7
category c829;
#line 7
category c830;
#line 7
category c831;
#line 7
category c832;
#line 7
category c833;
#line 7
category c834;
#line 7
category c835;
#line 7
category c836;
#line 7
category c837;
#line 7
category c838;
#line 7
category c839;
#line 7
category c840;
#line 7
category c841;
#line 7
category c842;
#line 7
category c843;
#line 7
category c844;
#line 7
category c845;
#line 7
category c846;
#line 7
category c847;
#line 7
category c848;
#line 7
category c849;
#line 7
category c850;
#line 7
category c851;
#line 7
category c852;
#line 7
category c853;
#line 7
category c854;
#line 7
category c855;
#line 7
category c856;
#line 7
category c857;
#line 7
category c858;
#line 7
category c859;
#line 7
category c860;
#line 7
category c861;
#line 7
category c862;
#line 7
category c863;
#line 7
category c864;
#line 7
category c865;
#line 7
category c866;
#line 7
category c867;
#line 7
category c868;
#line 7
category c869;
#line 7
category c870;
#line 7
category c871;
#line 7
category c872;
#line 7
category c873;
#line 7
category c874;
#line 7
category c875;
#line 7
category c876;
#line 7
category c877;
#line 7
category c878;
#line 7
category c879;
#line 7
category c880;
#line 7
category c881;
#line 7
category c882;
#line 7
category c883;
#line 7
category c884;
#line 7
category c885;
#line 7
category c886;
#line 7
category c887;
#line 7
category c888;
#line 7
category c889;
#line 7
category c890;
#line 7
category c891;
#line 7
category c892;
#line 7
category c893;
#line 7
category c894;
#line 7
category c895;
#line 7
category c896;
#line 7
category c897;
#line 7
category c898;
#line 7
category c899;
#line 7
category c900;
#line 7
category c901;
#line 7
category c902;
#line 7
category c903;
#line 7
category c904;
#line 7
category c905;
#line 7
category c906;
#line 7
category c907;
#line 7
category c908;
#line 7
category c909;
#line 7
category c910;
#line 7
category c911;
#line 7
category c912;
#line 7
category c913;
#line 7
category c914;
#line 7
category c915;
#line 7
category c916;
#line 7
category c917;
#line 7
category c918;
#line 7
category c919;
#line 7
category c920;
#line 7
category c921;
#line 7
category c922;
#line 7
category c923;
#line 7
category c924;
#line 7
category c925;
#line 7
category c926;
#line 7
category c927;
#line 7
category c928;
#line 7
category c929;
#line 7
category c930;
#line 7
category c931;
#line 7
category c932;
#line 7
category c933;
#line 7
category c934;
#line 7
category c935;
#line 7
category c936;
#line 7
category c937;
#line 7
category c938;
#line 7
category c939;
#line 7
category c940;
#line 7
category c941;
#line 7
category c942;
#line 7
category c943;
#line 7
category c944;
#line 7
category c945;
#line 7
category c946;
#line 7
category c947;
#line 7
category c948;
#line 7
category c949;
#line 7
category c950;
#line 7
category c951;
#line 7
category c952;
#line 7
category c953;
#line 7
category c954;
#line 7
category c955;
#line 7
category c956;
#line 7
category c957;
#line 7
category c958;
#line 7
category c959;
#line 7
category c960;
#line 7
category c961;
#line 7
category c962;
#line 7
category c963;
#line 7
category c964;
#line 7
category c965;
#line 7
category c966;
#line 7
category c967;
#line 7
category c968;
#line 7
category c969;
#line 7
category c970;
#line 7
category c971;
#line 7
category c972;
#line 7
category c973;
#line 7
category c974;
#line 7
category c975;
#line 7
category c976;
#line 7
category c977;
#line 7
category c978;
#line 7
category c979;
#line 7
category c980;
#line 7
category c981;
#line 7
category c982;
#line 7
category c983;
#line 7
category c984;
#line 7
category c985;
#line 7
category c986;
#line 7
category c987;
#line 7
category c988;
#line 7
category c989;
#line 7
category c990;
#line 7
category c991;
#line 7
category c992;
#line 7
category c993;
#line 7
category c994;
#line 7
category c995;
#line 7
category c996;
#line 7
category c997;
#line 7
category c998;
#line 7
category c999;
#line 7
category c1000;
#line 7
category c1001;
#line 7
category c1002;
#line 7
category c1003;
#line 7
category c1004;
#line 7
category c1005;
#line 7
category c1006;
#line 7
category c1007;
#line 7
category c1008;
#line 7
category c1009;
#line 7
category c1010;
#line 7
category c1011;
#line 7
category c1012;
#line 7
category c1013;
#line 7
category c1014;
#line 7
category c1015;
#line 7
category c1016;
#line 7
category c1017;
#line 7
category c1018;
#line 7
category c1019;
#line 7
category c1020;
#line 7
category c1021;
#line 7
category c1022;
#line 7
category c1023;
#line 7


# Generate level definitions for each sensitivity and category.
level s0:c0.c1023;
#line 10

#line 1 "system/sepolicy/reqd_mask/mls"
mlsconstrain binder { set_context_mgr } (l1 eq l2);
#line 1 "system/sepolicy/public/te_macros"
#####################################
# domain_trans(olddomain, type, newdomain)
# Allow a transition from olddomain to newdomain
# upon executing a file labeled with type.
# This only allows the transition; it does not
# cause it to occur automatically - use domain_auto_trans
# if that is what you want.
#
#line 21


#####################################
# domain_auto_trans(olddomain, type, newdomain)
# Automatically transition from olddomain to newdomain
# upon executing a file labeled with type.
#
#line 33


#####################################
# file_type_trans(domain, dir_type, file_type)
# Allow domain to create a file labeled file_type in a
# directory labeled dir_type.
# This only allows the transition; it does not
# cause it to occur automatically - use file_type_auto_trans
# if that is what you want.
#
#line 49


#####################################
# file_type_auto_trans(domain, dir_type, file_type)
# Automatically label new files with file_type when
# they are created by domain in directories labeled dir_type.
#
#line 62


#####################################
# r_dir_file(domain, type)
# Allow the specified domain to read directories, files
# and symbolic links of the specified type.
#line 71


#####################################
# tmpfs_domain(domain)
# Define and allow access to a unique type for
# this domain when creating tmpfs / shmem / ashmem files.
#line 82


# pdx macros for IPC. pdx is a high-level name which contains transport-specific
# rules from underlying transport (e.g. UDS-based implementation).

#####################################
# pdx_server(domain)
#line 92


#####################################
# use_pdx(clientdomain, serverdomain)
#line 108


#####################################
# init_daemon_domain(domain)
# Set up a transition from init to the daemon domain
# upon executing its binary.
#line 117


#####################################
# app_domain(domain)
# Allow a base set of permissions required for all apps.
#line 128


#####################################
# untrusted_app_domain(domain)
# Allow a base set of permissions required for all untrusted apps.
#line 135


#####################################
# net_domain(domain)
# Allow a base set of permissions required for network access.
#line 142


#####################################
# bluetooth_domain(domain)
# Allow a base set of permissions required for bluetooth access.
#line 149


#####################################
# hal_server_domain(domain, hal_type)
# Allow a base set of permissions required for a domain to offer a
# HAL implementation of the specified type over HwBinder.
#
# For example, default implementation of Foo HAL:
#   type hal_foo_default, domain;
#   hal_server_domain(hal_foo_default, hal_foo)
#
#line 164


#####################################
# hal_client_domain(domain, hal_type)
# Allow a base set of permissions required for a domain to be a
# client of a HAL of the specified type.
#
# For example, make some_domain a client of Foo HAL:
#   hal_client_domain(some_domain, hal_foo)
#
#line 184


#####################################
# passthrough_hal_client_domain(domain, hal_type)
# Allow a base set of permissions required for a domain to be a
# client of a passthrough HAL of the specified type.
#
# For example, make some_domain a client of passthrough Foo HAL:
#   passthrough_hal_client_domain(some_domain, hal_foo)
#
#line 200


#####################################
# unix_socket_connect(clientdomain, socket, serverdomain)
# Allow a local socket connection from clientdomain via
# socket to serverdomain.
#
# Note: If you see denial records that distill to the
# following allow rules:
# allow clientdomain property_socket:sock_file write;
# allow clientdomain init:unix_stream_socket connectto;
# allow clientdomain something_prop:property_service set;
#
# This sequence is indicative of attempting to set a property.
# use set_prop(sourcedomain, targetproperty)
#
#line 223


#line 228


#####################################
# set_prop(sourcedomain, targetproperty)
# Allows source domain to set the
# targetproperty.
#
#line 239


#####################################
# get_prop(sourcedomain, targetproperty)
# Allows source domain to read the
# targetproperty.
#
#line 248


#####################################
# unix_socket_send(clientdomain, socket, serverdomain)
# Allow a local socket send from clientdomain via
# socket to serverdomain.
#line 257


#####################################
# binder_use(domain)
# Allow domain to use Binder IPC.
#line 271


#####################################
# hwbinder_use(domain)
# Allow domain to use HwBinder IPC.
#line 294


#####################################
# vndbinder_use(domain)
# Allow domain to use Binder IPC.
#line 308


#####################################
# binder_call(clientdomain, serverdomain)
# Allow clientdomain to perform binder IPC to serverdomain.
#line 320


#####################################
# binder_service(domain)
# Mark a domain as being a Binder service domain.
# Used to allow binder IPC to the various system services.
#line 328


#####################################
# hwallocator_use(domain)
# Allow a domain to use Hidl shared memory
#line 336


#####################################
# wakelock_use(domain)
# Allow domain to manage wake locks
#line 346


#####################################
# selinux_check_access(domain)
# Allow domain to check SELinux permissions via selinuxfs.
#line 356


#####################################
# selinux_check_context(domain)
# Allow domain to check SELinux contexts via selinuxfs.
#line 365


#####################################
# create_pty(domain)
# Allow domain to create and use a pty, isolated from any other domain ptys.
#line 384


#####################################
# Non system_app application set
#


#####################################
# Recovery only
# SELinux rules which apply only to recovery mode
#


#####################################
# Full TREBLE only
# SELinux rules which apply only to full TREBLE devices
#


#####################################
# Not full TREBLE
# SELinux rules which apply only to devices which are not full TREBLE devices
#


#####################################
# Userdebug or eng builds
# SELinux rules which apply only to userdebug or eng builds
#


#####################################
# asan builds
# SELinux rules which apply only to asan builds
#


####################################
# Fallback crash handling for processes that can't exec crash_dump (e.g. because of seccomp).
#
#line 433


#####################################
# WITH_DEXPREOPT builds
# SELinux rules which apply only when pre-opting.
#


#####################################
# write_logd(domain)
# Ability to write to android log
# daemon via sockets
#line 448


#####################################
# read_logd(domain)
# Ability to run logcat and read from android
# log daemon via sockets
#line 457


#####################################
# read_runtime_log_tags(domain)
# ability to directly map the runtime event log tags
#line 464


#####################################
# control_logd(domain)
# Ability to control
# android log daemon via sockets
#line 474


#####################################
# use_keystore(domain)
# Ability to use keystore.
# Keystore is requires the following permissions
# to call getpidcon.
#line 487


###########################################
# use_drmservice(domain)
# Ability to use DrmService which requires
# DrmService to call getpidcon.
#line 497


###########################################
# add_service(domain, service)
# Ability for domain to add a service to service_manager
# and find it. It also creates a neverallow preventing
# others from adding it.
#line 507


##########################################
# print a message with a trailing newline
# print(`args')
#line 513

#line 1 "system/sepolicy/public/attributes"
######################################
# Attribute declarations
#

# All types used for devices.
# On change, update CHECK_FC_ASSERT_ATTRS
# in tools/checkfc.c
attribute dev_type;

# All types used for processes.
attribute domain;

# Temporary attribute used for migrating permissions out of domain.
# Motivation: Domain is overly permissive. Start removing permissions
# from domain and assign them to the domain_deprecated attribute.
# Domain_deprecated and domain can initially be assigned to all
# domains. The goal is to not assign domain_deprecated to new domains
# and to start removing domain_deprecated where it's not required or
# reassigning the appropriate permissions to the inheriting domain
# when necessary.
attribute domain_deprecated;

# All types used for filesystems.
# On change, update CHECK_FC_ASSERT_ATTRS
# definition in tools/checkfc.c.
attribute fs_type;

# All types used for context= mounts.
attribute contextmount_type;

# All types used for files that can exist on a labeled fs.
# Do not use for pseudo file types.
# On change, update CHECK_FC_ASSERT_ATTRS
# definition in tools/checkfc.c.
attribute file_type;

# All types used for domain entry points.
attribute exec_type;

# All types used for /data files.
attribute data_file_type;

# All types use for sysfs files.
attribute sysfs_type;

# All types use for debugfs files.
attribute debugfs_type;

# Attribute used for all sdcards
attribute sdcard_type;

# All types used for nodes/hosts.
attribute node_type;

# All types used for network interfaces.
attribute netif_type;

# All types used for network ports.
attribute port_type;

# All types used for property service
# On change, update CHECK_PC_ASSERT_ATTRS
# definition in tools/checkfc.c.
attribute property_type;

# All properties defined in core SELinux policy. Should not be
# used by device specific properties
attribute core_property_type;

# All properties used to configure log filtering.
attribute log_property_type;

# All service_manager types created by system_server
attribute system_server_service;

# services which should be available to all but isolated apps
attribute app_api_service;

# services which should be available to all ephemeral apps
attribute ephemeral_app_api_service;

# services which export only system_api
attribute system_api_service;

# All types used for services managed by service_manager.
# On change, update CHECK_SC_ASSERT_ATTRS
# definition in tools/checkfc.c.
attribute service_manager_type;

# All domains that can override MLS restrictions.
# i.e. processes that can read up and write down.
attribute mlstrustedsubject;

# All types that can override MLS restrictions.
# i.e. files that can be read by lower and written by higher
attribute mlstrustedobject;

# All domains used for apps.
attribute appdomain;

# All third party apps.
attribute untrusted_app_all;

# All domains used for apps with network access.
attribute netdomain;

# All domains used for apps with bluetooth access.
attribute bluetoothdomain;

# All domains used for binder service domains.
attribute binderservicedomain;

# update_engine related domains that need to apply an update and run
# postinstall. This includes the background daemon and the sideload tool from
# recovery for A/B devices.
attribute update_engine_common;

# All core domains (as opposed to vendor/device-specific domains)
attribute coredomain;

# All vendor domains which violate the requirement of not using Binder
# TODO(b/35870313): Remove this once there are no violations
attribute binder_in_vendor_violators;

# All HAL servers
attribute halserverdomain;
# All HAL clients
attribute halclientdomain;

# HALs
attribute hal_allocator;
attribute hal_allocator_client;
attribute hal_allocator_server;
attribute hal_audio;
attribute hal_audio_client;
attribute hal_audio_server;
attribute hal_bluetooth;
attribute hal_bluetooth_client;
attribute hal_bluetooth_server;
attribute hal_bootctl;
attribute hal_bootctl_client;
attribute hal_bootctl_server;
attribute hal_camera;
attribute hal_camera_client;
attribute hal_camera_server;
attribute hal_configstore;
attribute hal_configstore_client;
attribute hal_configstore_server;
attribute hal_contexthub;
attribute hal_contexthub_client;
attribute hal_contexthub_server;
attribute hal_drm;
attribute hal_drm_client;
attribute hal_drm_server;
attribute hal_dumpstate;
attribute hal_dumpstate_client;
attribute hal_dumpstate_server;
attribute hal_fingerprint;
attribute hal_fingerprint_client;
attribute hal_fingerprint_server;
attribute hal_gatekeeper;
attribute hal_gatekeeper_client;
attribute hal_gatekeeper_server;
attribute hal_gnss;
attribute hal_gnss_client;
attribute hal_gnss_server;
attribute hal_graphics_allocator;
attribute hal_graphics_allocator_client;
attribute hal_graphics_allocator_server;
attribute hal_graphics_composer;
attribute hal_graphics_composer_client;
attribute hal_graphics_composer_server;
attribute hal_health;
attribute hal_health_client;
attribute hal_health_server;
attribute hal_ir;
attribute hal_ir_client;
attribute hal_ir_server;
attribute hal_keymaster;
attribute hal_keymaster_client;
attribute hal_keymaster_server;
attribute hal_light;
attribute hal_light_client;
attribute hal_light_server;
attribute hal_memtrack;
attribute hal_memtrack_client;
attribute hal_memtrack_server;
attribute hal_nfc;
attribute hal_nfc_client;
attribute hal_nfc_server;
attribute hal_power;
attribute hal_power_client;
attribute hal_power_server;
attribute hal_sensors;
attribute hal_sensors_client;
attribute hal_sensors_server;
attribute hal_telephony;
attribute hal_telephony_client;
attribute hal_telephony_server;
attribute hal_thermal;
attribute hal_thermal_client;
attribute hal_thermal_server;
attribute hal_usb;
attribute hal_usb_client;
attribute hal_usb_server;
attribute hal_vibrator;
attribute hal_vibrator_client;
attribute hal_vibrator_server;
attribute hal_vr;
attribute hal_vr_client;
attribute hal_vr_server;
attribute hal_wifi;
attribute hal_wifi_client;
attribute hal_wifi_server;
attribute hal_wifi_supplicant;
attribute hal_wifi_supplicant_client;
attribute hal_wifi_supplicant_server;
#line 1 "system/sepolicy/public/ioctl_defines"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1 "system/sepolicy/public/ioctl_macros"
# socket ioctls allowed to unprivileged apps
#line 12


# socket ioctls never allowed to unprivileged apps
#line 42


# commonly used ioctls on unix sockets
#line 47


# commonly used TTY ioctls
# merge with unpriv_unix_sock_ioctls?
#line 54


# point to point ioctls
#line 68

#line 1 "system/sepolicy/public/adbd.te"
# adbd seclabel is specified in init.rc since
# it lives in the rootfs and has no unique file type.
type adbd, domain;
#line 1 "system/sepolicy/public/audioserver.te"
# audioserver - audio services daemon
type audioserver, domain;
#line 1 "system/sepolicy/public/blkid.te"
# blkid called from vold
type blkid, domain;
#line 1 "system/sepolicy/public/blkid_untrusted.te"
# blkid for untrusted block devices
type blkid_untrusted, domain;
#line 1 "system/sepolicy/public/bluetooth.te"
# bluetooth subsystem
type bluetooth, domain;
#line 1 "system/sepolicy/public/bootanim.te"
# bootanimation oneshot service
type bootanim, domain;
type bootanim_exec, exec_type, file_type;


#line 5
typeattribute bootanim halclientdomain;
#line 5
typeattribute bootanim hal_graphics_allocator_client;
#line 5

#line 5
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 5
# once we know at build time whether a HAL is going to run in
#line 5
# passthrough or binderized mode.
#line 5
typeattribute bootanim hal_graphics_allocator;
#line 5
# Find passthrough HAL implementations
#line 5
allow hal_graphics_allocator system_file:dir { open getattr read search ioctl lock };
#line 5


#line 6
typeattribute bootanim halclientdomain;
#line 6
typeattribute bootanim hal_graphics_composer_client;
#line 6

#line 6
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 6
# once we know at build time whether a HAL is going to run in
#line 6
# passthrough or binderized mode.
#line 6
typeattribute bootanim hal_graphics_composer;
#line 6
# Find passthrough HAL implementations
#line 6
allow hal_graphics_composer system_file:dir { open getattr read search ioctl lock };
#line 6



#line 8
# Call the servicemanager and transfer references to it.
#line 8
allow bootanim servicemanager:binder { call transfer };
#line 8
# servicemanager performs getpidcon on clients.
#line 8
allow servicemanager bootanim:dir search;
#line 8
allow servicemanager bootanim:file { read open };
#line 8
allow servicemanager bootanim:process getattr;
#line 8
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 8
# all domains in domain.te.
#line 8


#line 9
# Call the server domain and optionally transfer references to it.
#line 9
allow bootanim surfaceflinger:binder { call transfer };
#line 9
# Allow the serverdomain to transfer references to the client on the reply.
#line 9
allow surfaceflinger bootanim:binder transfer;
#line 9
# Receive and use open files from the server.
#line 9
allow bootanim surfaceflinger:fd use;
#line 9


#line 10
# Call the server domain and optionally transfer references to it.
#line 10
allow bootanim audioserver:binder { call transfer };
#line 10
# Allow the serverdomain to transfer references to the client on the reply.
#line 10
allow audioserver bootanim:binder transfer;
#line 10
# Receive and use open files from the server.
#line 10
allow bootanim audioserver:fd use;
#line 10



#line 12
# Call the hwservicemanager and transfer references to it.
#line 12
allow bootanim hwservicemanager:binder { call transfer };
#line 12
# Allow hwservicemanager to send out callbacks
#line 12
allow hwservicemanager bootanim:binder { call transfer };
#line 12
# hwservicemanager performs getpidcon on clients.
#line 12
allow hwservicemanager bootanim:dir search;
#line 12
allow hwservicemanager bootanim:file { read open };
#line 12
allow hwservicemanager bootanim:process getattr;
#line 12
# TODO(b/34274385): hals wait for data to be mounted so they can
#line 12
# start only if persist.hal.binderization is enabled. (for dogfood
#line 12
# stability). getService must also check for data to be mounted
#line 12
# if the vintf promises the hal will be registered over hwbinder.
#line 12

#line 12
allow bootanim hal_binderization_prop:file { getattr open read ioctl lock };
#line 12

#line 12

#line 12
allow bootanim persistent_properties_ready_prop:file { getattr open read ioctl lock };
#line 12

#line 12

#line 12
allow bootanim vold_prop:file { getattr open read ioctl lock };
#line 12

#line 12
# rw access to /dev/hwbinder and /dev/ashmem is presently granted to
#line 12
# all domains in domain.te.
#line 12


allow bootanim gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# /oem access
allow bootanim oemfs:dir search;
allow bootanim oemfs:file { getattr open read ioctl lock };

allow bootanim audio_device:dir { open getattr read search ioctl lock };
allow bootanim audio_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow bootanim audioserver_service:service_manager find;
allow bootanim surfaceflinger_service:service_manager find;
allow bootanim audioserver_service:service_manager find;

# Allow access to ion memory allocation device
allow bootanim ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow bootanim hal_graphics_allocator:fd use;

# Fences
allow bootanim hal_graphics_composer:fd use;

# Read access to pseudo filesystems.

#line 35
allow bootanim proc:dir { open getattr read search ioctl lock };
#line 35
allow bootanim proc:{ file lnk_file } { getattr open read ioctl lock };
#line 35

allow bootanim proc_meminfo:file { getattr open read ioctl lock };

#line 37
allow bootanim sysfs:dir { open getattr read search ioctl lock };
#line 37
allow bootanim sysfs:{ file lnk_file } { getattr open read ioctl lock };
#line 37


#line 38
allow bootanim cgroup:dir { open getattr read search ioctl lock };
#line 38
allow bootanim cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 38


# System file accesses.
allow bootanim system_file:dir { open getattr read search ioctl lock };
#line 1 "system/sepolicy/public/bootstat.te"
# bootstat command
type bootstat, domain;
type bootstat_exec, exec_type, file_type;


#line 5
allow bootstat runtime_event_log_tags_file:file { getattr open read ioctl lock };
#line 5


# Allow persistent storage in /data/misc/bootstat.
allow bootstat bootstat_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow bootstat bootstat_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Read access to pseudo filesystems (for /proc/uptime).

#line 12
allow bootstat proc:dir { open getattr read search ioctl lock };
#line 12
allow bootstat proc:{ file lnk_file } { getattr open read ioctl lock };
#line 12


# Collect metrics on boot time created by init

#line 15
allow bootstat boottime_prop:file { getattr open read ioctl lock };
#line 15

#line 1 "system/sepolicy/public/bufferhubd.te"
# bufferhubd
type bufferhubd, domain, mlstrustedsubject;
type bufferhubd_exec, exec_type, file_type;


#line 5
typeattribute bufferhubd halclientdomain;
#line 5
typeattribute bufferhubd hal_graphics_allocator_client;
#line 5

#line 5
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 5
# once we know at build time whether a HAL is going to run in
#line 5
# passthrough or binderized mode.
#line 5
typeattribute bufferhubd hal_graphics_allocator;
#line 5
# Find passthrough HAL implementations
#line 5
allow hal_graphics_allocator system_file:dir { open getattr read search ioctl lock };
#line 5



#line 7
allow bufferhubd pdx_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 7
allow bufferhubd pdx_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 7


#line 8
# Open the socket.
#line 8
allow bufferhubd pdx_socket:dir { open getattr read search ioctl lock };
#line 8
allow bufferhubd pdx_socket:sock_file { { getattr open read ioctl lock } { open append write lock } };
#line 8
# Use the socket.
#line 8
allow bufferhubd performanced:unix_stream_socket { connectto read write shutdown };
#line 8
# Clients recieve an event fd from the server.
#line 8
allow bufferhubd performanced:fd use;
#line 8
# Servers may receive sync fences, gralloc buffers, etc, from clients.
#line 8
# This could be tightened on a per-server basis, but keeping track of service
#line 8
# clients is error prone.
#line 8
allow performanced bufferhubd:fd use;
#line 8


# Access the GPU.
allow bufferhubd gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Access /dev/ion
allow bufferhubd ion_device:chr_file { getattr open read ioctl lock };

# Receive sync fence FDs from mediacodec. Note that mediacodec never directly
# connects to bufferhubd via PDX. Instead, a VR app acts as a bridge between
# those two: it talks to mediacodec via Binder and talks to bufferhubd via PDX.
# Thus, there is no need to use use_pdx macro.
allow bufferhubd mediacodec:fd use;
#line 1 "system/sepolicy/public/cameraserver.te"
# cameraserver - camera daemon
type cameraserver, domain;
type cameraserver_exec, exec_type, file_type;


#line 5
# Call the servicemanager and transfer references to it.
#line 5
allow cameraserver servicemanager:binder { call transfer };
#line 5
# servicemanager performs getpidcon on clients.
#line 5
allow servicemanager cameraserver:dir search;
#line 5
allow servicemanager cameraserver:file { read open };
#line 5
allow servicemanager cameraserver:process getattr;
#line 5
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 5
# all domains in domain.te.
#line 5


#line 6
# Call the server domain and optionally transfer references to it.
#line 6
allow cameraserver binderservicedomain:binder { call transfer };
#line 6
# Allow the serverdomain to transfer references to the client on the reply.
#line 6
allow binderservicedomain cameraserver:binder transfer;
#line 6
# Receive and use open files from the server.
#line 6
allow cameraserver binderservicedomain:fd use;
#line 6


#line 7
# Call the server domain and optionally transfer references to it.
#line 7
allow cameraserver appdomain:binder { call transfer };
#line 7
# Allow the serverdomain to transfer references to the client on the reply.
#line 7
allow appdomain cameraserver:binder transfer;
#line 7
# Receive and use open files from the server.
#line 7
allow cameraserver appdomain:fd use;
#line 7


#line 8
typeattribute cameraserver binderservicedomain;
#line 8



#line 10
typeattribute cameraserver halclientdomain;
#line 10
typeattribute cameraserver hal_camera_client;
#line 10

#line 10
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 10
# once we know at build time whether a HAL is going to run in
#line 10
# passthrough or binderized mode.
#line 10
typeattribute cameraserver hal_camera;
#line 10
# Find passthrough HAL implementations
#line 10
allow hal_camera system_file:dir { open getattr read search ioctl lock };
#line 10


#line 11
typeattribute cameraserver halclientdomain;
#line 11
typeattribute cameraserver hal_graphics_allocator_client;
#line 11

#line 11
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 11
# once we know at build time whether a HAL is going to run in
#line 11
# passthrough or binderized mode.
#line 11
typeattribute cameraserver hal_graphics_allocator;
#line 11
# Find passthrough HAL implementations
#line 11
allow hal_graphics_allocator system_file:dir { open getattr read search ioctl lock };
#line 11


allow cameraserver ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };


#line 15
  allow cameraserver cameraserver_service:service_manager { add find };
#line 15
  neverallow { domain -cameraserver } cameraserver_service:service_manager add;
#line 15

allow cameraserver appops_service:service_manager find;
allow cameraserver audioserver_service:service_manager find;
allow cameraserver batterystats_service:service_manager find;
allow cameraserver cameraproxy_service:service_manager find;
allow cameraserver mediaserver_service:service_manager find;
allow cameraserver processinfo_service:service_manager find;
allow cameraserver scheduling_policy_service:service_manager find;
allow cameraserver surfaceflinger_service:service_manager find;

###
### neverallow rules
###

# cameraserver should never execute any executable without a
# domain transition
neverallow cameraserver { file_type fs_type }:file execute_no_trans;

# The goal of the mediaserver split is to place media processing code into
# restrictive sandboxes with limited responsibilities and thus limited
# permissions. Example: Audioserver is only responsible for controlling audio
# hardware and processing audio content. Cameraserver does the same for camera
# hardware/content. Etc.
#
# Media processing code is inherently risky and thus should have limited
# permissions and be isolated from the rest of the system and network.
# Lengthier explanation here:
# https://android-developers.googleblog.com/2016/05/hardening-media-stack.html
neverallow cameraserver domain:{ tcp_socket udp_socket rawip_socket } *;
#line 1 "system/sepolicy/public/charger.te"
# charger seclabel is specified in init.rc since
# it lives in the rootfs and has no unique file type.
type charger, domain;

# Write to /dev/kmsg
allow charger kmsg_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Read access to pseudo filesystems.

#line 9
allow charger sysfs_type:dir { open getattr read search ioctl lock };
#line 9
allow charger sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 9


#line 10
allow charger rootfs:dir { open getattr read search ioctl lock };
#line 10
allow charger rootfs:{ file lnk_file } { getattr open read ioctl lock };
#line 10


#line 11
allow charger cgroup:dir { open getattr read search ioctl lock };
#line 11
allow charger cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 11


allow charger self:capability { sys_tty_config };
allow charger self:capability sys_boot;


#line 16
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 16
allow charger sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 16
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 16
allow charger self:capability2 block_suspend;
#line 16


allow charger self:netlink_kobject_uevent_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Write to /sys/power/state
# TODO:  Split into a separate type?
allow charger sysfs:file write;

allow charger sysfs_batteryinfo:file { getattr open read ioctl lock };

# Read /sys/fs/pstore/console-ramoops
# Don't worry about overly broad permissions for now, as there's
# only one file in /sys/fs/pstore
allow charger pstorefs:dir { open getattr read search ioctl lock };
allow charger pstorefs:file { getattr open read ioctl lock };

allow charger graphics_device:dir { open getattr read search ioctl lock };
allow charger graphics_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow charger input_device:dir { open getattr read search ioctl lock };
allow charger input_device:chr_file { getattr open read ioctl lock };
allow charger tty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow charger proc_sysrq:file { { getattr open read ioctl lock } { open append write lock } };

# charger needs to tell init to continue the boot
# process when running in charger mode.

#line 41

#line 41
allow charger property_socket:sock_file write;
#line 41
allow charger init:unix_stream_socket connectto;
#line 41

#line 41
allow charger system_prop:property_service set;
#line 41

#line 41
allow charger system_prop:file { getattr open read ioctl lock };
#line 41

#line 41

#line 1 "system/sepolicy/public/clatd.te"
# 464xlat daemon
type clatd, domain, domain_deprecated;
type clatd_exec, exec_type, file_type;


#line 5
typeattribute clatd netdomain;
#line 5



#line 7
allow clatd proc_net:dir { open getattr read search ioctl lock };
#line 7
allow clatd proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 7


# Access objects inherited from netd.
allow clatd netd:fd use;
allow clatd netd:fifo_file { read write };
# TODO: Check whether some or all of these sockets should be close-on-exec.
allow clatd netd:netlink_kobject_uevent_socket { read write };
allow clatd netd:netlink_nflog_socket { read write };
allow clatd netd:netlink_route_socket { read write };
allow clatd netd:udp_socket { read write };
allow clatd netd:unix_stream_socket { read write };
allow clatd netd:unix_dgram_socket { read write };

allow clatd self:capability { net_admin net_raw setuid setgid };

# clatd calls mmap(MAP_LOCKED) with a 1M buffer. MAP_LOCKED first checks
# capable(CAP_IPC_LOCK), and then checks to see the requested amount is
# under RLIMIT_MEMLOCK. If the latter check succeeds clatd won't have
# needed CAP_IPC_LOCK. But this is not guaranteed to succeed on all devices
# so we permit any requests we see from clatd asking for this capability.
# See https://android-review.googlesource.com/127940 and
# https://b.corp.google.com/issues/21736319
allow clatd self:capability ipc_lock;

allow clatd self:netlink_route_socket nlmsg_write;
allow clatd self:{ packet_socket rawip_socket tun_socket } { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow clatd tun_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "system/sepolicy/public/cppreopts.te"
# cppreopts
#
# This command copies preopted files from the system_b partition to the data
# partition. This domain ensures that we are only copying into specific
# directories.

type cppreopts, domain, mlstrustedsubject;
type cppreopts_exec, exec_type, file_type;

# Allow cppreopts copy files into the dalvik-cache
allow cppreopts dalvikcache_data_file:dir { add_name remove_name search write };
allow cppreopts dalvikcache_data_file:file { create getattr open read rename write };

# Allow cppreopts to execute itself using #!/system/bin/sh
allow cppreopts shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Allow us to run find on /postinstall
allow cppreopts system_file:dir { open read };

# Allow running the cp command using cppreopts permissions. Needed so we can
# write into dalvik-cache
allow cppreopts toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 1 "system/sepolicy/public/crash_dump.te"
type crash_dump, domain;
type crash_dump_exec, exec_type, file_type;

allow crash_dump {
  domain
  -init
  -crash_dump
  -keystore
  -logd
}:process { ptrace signal sigchld sigstop sigkill };

# crash_dump might inherit CAP_SYS_PTRACE from a privileged process,
# which will result in an audit log even when it's allowed to trace.
dontaudit crash_dump self:capability { sys_ptrace };


#line 16
  allow crash_dump logd:process { ptrace signal sigchld sigstop sigkill };
#line 18


# Use inherited file descriptors
allow crash_dump domain:fd use;

# Write to the IPC pipe inherited from crashing processes.
# Append to pipes given to us by processes requesting dumps (e.g. dumpstate)
allow crash_dump domain:fifo_file { write append };


#line 27
allow crash_dump domain:dir { open getattr read search ioctl lock };
#line 27
allow crash_dump domain:{ file lnk_file } { getattr open read ioctl lock };
#line 27

allow crash_dump exec_type:file { getattr open read ioctl lock };

# Read /data/dalvik-cache.
allow crash_dump dalvikcache_data_file:dir { search getattr };
allow crash_dump dalvikcache_data_file:file { getattr open read ioctl lock };

# Read APK files.

#line 35
allow crash_dump apk_data_file:dir { open getattr read search ioctl lock };
#line 35
allow crash_dump apk_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 35
;

# Talk to tombstoned

#line 38

#line 38

#line 38
allow crash_dump tombstoned_crash_socket:sock_file write;
#line 38
allow crash_dump tombstoned:unix_stream_socket connectto;
#line 38

#line 38


# Talk to ActivityManager.

#line 41

#line 41

#line 41
allow crash_dump system_ndebug_socket:sock_file write;
#line 41
allow crash_dump system_server:unix_stream_socket connectto;
#line 41

#line 41


# Append to ANR files.
allow crash_dump anr_data_file:file { append getattr };

# Append to tombstone files.
allow crash_dump tombstone_data_file:file { append getattr };


#line 49
allow crash_dump logcat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 49

#line 49

#line 49

#line 49
allow crash_dump logdr_socket:sock_file write;
#line 49
allow crash_dump logd:unix_stream_socket connectto;
#line 49

#line 49

#line 49


###
### neverallow assertions
###

# A domain transition must occur for crash_dump to get the privileges needed to trace the process.
# Do not allow the execution of crash_dump without a domain transition.
neverallow domain crash_dump_exec:file execute_no_trans;
#line 1 "system/sepolicy/public/device.te"
# Device types
type device, dev_type, fs_type;
type alarm_device, dev_type, mlstrustedobject;
type ashmem_device, dev_type, mlstrustedobject;
type audio_device, dev_type;
type audio_timer_device, dev_type;
type audio_seq_device, dev_type;
type binder_device, dev_type, mlstrustedobject;
type hwbinder_device, dev_type, mlstrustedobject;
type vndbinder_device, dev_type;
type block_device, dev_type;
type camera_device, dev_type;
type dm_device, dev_type;
type keychord_device, dev_type;
type loop_device, dev_type;
type pmsg_device, dev_type, mlstrustedobject;
type radio_device, dev_type;
type ram_device, dev_type;
type rtc_device, dev_type;
type vold_device, dev_type;
type console_device, dev_type;
type cpuctl_device, dev_type;
type fscklogs, dev_type;
type full_device, dev_type;
# GPU (used by most UI apps)
type gpu_device, dev_type, mlstrustedobject;
type graphics_device, dev_type;
type hw_random_device, dev_type;
type input_device, dev_type;
type kmem_device, dev_type;
type port_device, dev_type;
type log_device, dev_type, mlstrustedobject;
type mtd_device, dev_type;
type mtp_device, dev_type, mlstrustedobject;
type nfc_device, dev_type;
type ptmx_device, dev_type, mlstrustedobject;
type kmsg_device, dev_type;
type null_device, dev_type, mlstrustedobject;
type random_device, dev_type, mlstrustedobject;
type sensors_device, dev_type;
type serial_device, dev_type;
type socket_device, dev_type;
type owntty_device, dev_type, mlstrustedobject;
type tty_device, dev_type;
type video_device, dev_type;
type vcs_device, dev_type;
type zero_device, dev_type, mlstrustedobject;
type fuse_device, dev_type, mlstrustedobject;
type iio_device, dev_type;
type ion_device, dev_type, mlstrustedobject;
type qtaguid_device, dev_type;
type watchdog_device, dev_type;
type uhid_device, dev_type;
type uio_device, dev_type;
type tun_device, dev_type, mlstrustedobject;
type usbaccessory_device, dev_type, mlstrustedobject;
type usb_device, dev_type, mlstrustedobject;
type properties_device, dev_type;
type properties_serial, dev_type;
type i2c_device, dev_type;

# All devices have a uart for the hci
# attach service. The uart dev node
# varies per device. This type
# is used in per device policy
type hci_attach_dev, dev_type;

# All devices have a rpmsg device for
# achieving remoteproc and rpmsg modules
type rpmsg_device, dev_type;

# Partition layout block device
type root_block_device, dev_type;

# factory reset protection block device
type frp_block_device, dev_type;

# System block device mounted on /system.
type system_block_device, dev_type;

# Recovery block device.
type recovery_block_device, dev_type;

# boot block device.
type boot_block_device, dev_type;

# Userdata block device mounted on /data.
type userdata_block_device, dev_type;

# Cache block device mounted on /cache.
type cache_block_device, dev_type;

# Block device for any swap partition.
type swap_block_device, dev_type;

# Metadata block device used for encryption metadata.
# Assign this type to the partition specified by the encryptable=
# mount option in your fstab file in the entry for userdata.
type metadata_block_device, dev_type;

# The 'misc' partition used by recovery and A/B.
type misc_block_device, dev_type;
#line 1 "system/sepolicy/public/dex2oat.te"
# dex2oat
type dex2oat, domain, domain_deprecated;
type dex2oat_exec, exec_type, file_type;


#line 5
allow dex2oat apk_data_file:dir { open getattr read search ioctl lock };
#line 5
allow dex2oat apk_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 5


allow dex2oat tmpfs:file { read getattr };


#line 9
allow dex2oat dalvikcache_data_file:dir { open getattr read search ioctl lock };
#line 9
allow dex2oat dalvikcache_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 9

allow dex2oat dalvikcache_data_file:file write;
# Read symlinks in /data/dalvik-cache. This is required for PIC mode boot images, where
# the oat file is symlinked to the original file in /system.
allow dex2oat dalvikcache_data_file:lnk_file read;
allow dex2oat installd:fd use;

# Read already open asec_apk_file file descriptors passed by installd.
# Also allow reading unlabeled files, to allow for upgrading forward
# locked APKs.
allow dex2oat asec_apk_file:file read;
allow dex2oat unlabeled:file read;
allow dex2oat oemfs:file read;
allow dex2oat apk_tmp_file:file read;
allow dex2oat user_profile_data_file:file { getattr read lock };

# Allow dex2oat to compile app's secondary dex files which were reported back to
# the framework.
allow dex2oat app_data_file:file { getattr read write lock };

##################
# A/B OTA Dexopt #
##################

# Allow dex2oat to use file descriptors from otapreopt.
allow dex2oat postinstall_dexopt:fd use;

allow dex2oat postinstall_file:dir { getattr search };
allow dex2oat postinstall_file:lnk_file read;

# Allow dex2oat access to files in /data/ota.
allow dex2oat ota_data_file:dir { { open getattr read search ioctl lock } add_name write };
allow dex2oat ota_data_file:file { getattr open read ioctl lock };

# Create and read symlinks in /data/ota/dalvik-cache. This is required for PIC mode boot images,
# where the oat file is symlinked to the original file in /system.
allow dex2oat ota_data_file:lnk_file { create read };

# It would be nice to tie this down, but currently, because of how images are written, we can't
# pass file descriptors for the preopted boot image to dex2oat. So dex2oat needs to be able to
# create them itself (and make them world-readable).
allow dex2oat ota_data_file:file { create { open append write lock } setattr };

##############
# Neverallow #
##############

neverallow dex2oat app_data_file:{ file lnk_file sock_file fifo_file } open;
#line 1 "system/sepolicy/public/dhcp.te"
type dhcp, domain, domain_deprecated;
type dhcp_exec, exec_type, file_type;
type dhcp_data_file, file_type, data_file_type;


#line 5
typeattribute dhcp netdomain;
#line 5


allow dhcp cgroup:dir { create write add_name };
allow dhcp self:capability { setgid setuid net_admin net_raw net_bind_service };
allow dhcp self:packet_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow dhcp self:netlink_route_socket nlmsg_write;
allow dhcp shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow dhcp system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# dhcpcd runs dhcpcd-hooks/*, which runs getprop / setprop (toolbox_exec)
allow dhcp toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# For /proc/sys/net/ipv4/conf/*/promote_secondaries
allow dhcp proc_net:file write;


#line 20

#line 20
allow dhcp property_socket:sock_file write;
#line 20
allow dhcp init:unix_stream_socket connectto;
#line 20

#line 20
allow dhcp dhcp_prop:property_service set;
#line 20

#line 20
allow dhcp dhcp_prop:file { getattr open read ioctl lock };
#line 20

#line 20


#line 21

#line 21
allow dhcp property_socket:sock_file write;
#line 21
allow dhcp init:unix_stream_socket connectto;
#line 21

#line 21
allow dhcp pan_result_prop:property_service set;
#line 21

#line 21
allow dhcp pan_result_prop:file { getattr open read ioctl lock };
#line 21

#line 21


allow dhcp dhcp_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow dhcp dhcp_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# PAN connections
allow dhcp netd:fd use;
allow dhcp netd:fifo_file { { getattr open read ioctl lock } { open append write lock } };
allow dhcp netd:{ { udp_socket unix_dgram_socket } unix_stream_socket } { read write };
allow dhcp netd:{ netlink_kobject_uevent_socket netlink_route_socket netlink_nflog_socket } { read write };
#line 1 "system/sepolicy/public/dnsmasq.te"
# DNS, DHCP services
type dnsmasq, domain;
type dnsmasq_exec, exec_type, file_type;


#line 5
typeattribute dnsmasq netdomain;
#line 5

allowxperm dnsmasq self:udp_socket ioctl 
#line 6
{
#line 6
# qualcomm rmnet ioctls
#line 6
0x00006900 0x00006902
#line 6
# socket ioctls
#line 6
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 6
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 6
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 6
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 6
0x00008934 0x00008935 0x00008936 0x00008937 0x00008939 0x00008940 0x00008941
#line 6
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 6
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 6
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 6
0x00008991 0x00008992 0x00008993 0x00008994
#line 6
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 6
# device and protocol specific ioctls
#line 6
0x000089f0-0x000089ff
#line 6
0x000089e0-0x000089ef
#line 6
# Wireless extension ioctls
#line 6
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 6
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 6
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 6
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 6
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 6
0x00008b34 0x00008b35 0x00008b36
#line 6
# Dev private ioctl i.e. hardware specific ioctls
#line 6
0x00008be0-0x00008bff
#line 6
};

# TODO:  Run with dhcp group to avoid need for dac_override.
allow dnsmasq self:capability dac_override;

allow dnsmasq self:capability { net_admin net_raw net_bind_service setgid setuid };

allow dnsmasq dhcp_data_file:dir { open search write add_name remove_name lock };
allow dnsmasq dhcp_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Inherit and use open files from netd.
allow dnsmasq netd:fd use;
allow dnsmasq netd:fifo_file { read write };
# TODO: Investigate whether these inherited sockets should be closed on exec.
allow dnsmasq netd:netlink_kobject_uevent_socket { read write };
allow dnsmasq netd:netlink_nflog_socket { read write };
allow dnsmasq netd:netlink_route_socket { read write };
allow dnsmasq netd:unix_stream_socket { read write };
allow dnsmasq netd:unix_dgram_socket { read write };
allow dnsmasq netd:udp_socket { read write };
#line 1 "system/sepolicy/public/domain.te"
# Rules for all domains.

# Allow reaping by init.
allow domain init:process sigchld;

# Intra-domain accesses.
allow domain self:process {
    fork
    sigchld
    sigkill
    sigstop
    signull
    signal
    getsched
    setsched
    getsession
    getpgid
    setpgid
    getcap
    setcap
    getattr
    setrlimit
};
allow domain self:fd use;
allow domain proc:dir { open getattr read search ioctl lock };
allow domain proc_net:dir search;

#line 27
allow domain self:dir { open getattr read search ioctl lock };
#line 27
allow domain self:{ file lnk_file } { getattr open read ioctl lock };
#line 27

allow domain self:{ fifo_file file } { { getattr open read ioctl lock } { open append write lock } };
allow domain self:unix_dgram_socket { { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } } sendto };
allow domain self:unix_stream_socket { { create { { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } listen accept } } connectto };

# Inherit or receive open files from others.
allow domain init:fd use;


#line 35
  # Same as adbd rules above, except allow su to do the same thing
#line 35
  allow domain su:unix_stream_socket connectto;
#line 35
  allow domain su:fd use;
#line 35
  allow domain su:unix_stream_socket { getattr getopt read write shutdown };
#line 35

#line 35
  allow { domain -init } su:binder { call transfer };
#line 35
  allow { domain -init } su:fd use;
#line 35

#line 35
  # Running something like "pm dump com.android.bluetooth" requires
#line 35
  # fifo writes
#line 35
  allow domain su:fifo_file { write getattr };
#line 35

#line 35
  # allow "gdbserver --attach" to work for su.
#line 35
  allow domain su:process sigchld;
#line 35

#line 35
  # Allow writing coredumps to /cores/*
#line 35
  allow domain coredump_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 35
  allow domain coredump_file:dir { { open getattr read search ioctl lock } add_name write };
#line 54


# Root fs.
allow domain rootfs:dir search;
allow domain rootfs:lnk_file { read getattr };

# Device accesses.
allow domain device:dir search;
allow domain dev_type:lnk_file { getattr open read ioctl lock };
allow domain devpts:dir search;
allow domain socket_device:dir { open getattr read search ioctl lock };
allow domain owntty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain null_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain zero_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain ashmem_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
# /dev/binder can be accessed by non-vendor domains and by apps
allow { coredomain appdomain -hwservicemanager } binder_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
# Devices which are not full TREBLE have fewer restrictions on access to /dev/binder
allow { domain -hwservicemanager -vndservicemanager } binder_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow { domain -servicemanager -vndservicemanager } hwbinder_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain ptmx_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain alarm_device:chr_file { getattr open read ioctl lock };
allow domain random_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow domain properties_device:dir { search getattr };
allow domain properties_serial:file { getattr open read ioctl lock };

# For now, everyone can access core property files
# Device specific properties are not granted by default

#line 82
allow domain core_property_type:file { getattr open read ioctl lock };
#line 82

# Let everyone read log properties, so that liblog can avoid sending unloggable
# messages to logd.

#line 85
allow domain log_property_type:file { getattr open read ioctl lock };
#line 85

dontaudit domain property_type:file audit_access;
allow domain property_contexts:file { getattr open read ioctl lock };

allow domain init:key search;
allow domain vold:key search;

# logd access

#line 93

#line 93
allow domain logdw_socket:sock_file write;
#line 93
allow domain logd:unix_dgram_socket sendto;
#line 93

#line 93
allow domain pmsg_device:chr_file { open append write lock };
#line 93


# System file accesses.
allow domain system_file:dir { search getattr };
allow domain system_file:file { execute read open getattr };
allow domain system_file:lnk_file { getattr read };

# read any sysfs symlinks
allow domain sysfs:lnk_file read;

# libc references /data/misc/zoneinfo for timezone related information

#line 104
allow domain zoneinfo_data_file:dir { open getattr read search ioctl lock };
#line 104
allow domain zoneinfo_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 104


# Lots of processes access current CPU information

#line 107
allow domain sysfs_devices_system_cpu:dir { open getattr read search ioctl lock };
#line 107
allow domain sysfs_devices_system_cpu:{ file lnk_file } { getattr open read ioctl lock };
#line 107



#line 109
allow domain sysfs_usb:dir { open getattr read search ioctl lock };
#line 109
allow domain sysfs_usb:{ file lnk_file } { getattr open read ioctl lock };
#line 109
;

# files under /data.
allow domain system_data_file:dir { search getattr };
allow domain system_data_file:lnk_file read;

# required by the dynamic linker
allow domain proc:lnk_file { getattr read };

# /proc/cpuinfo
allow domain proc_cpuinfo:file { getattr open read ioctl lock };

# jemalloc needs to read /proc/sys/vm/overcommit_memory
allow domain proc_overcommit_memory:file { getattr open read ioctl lock };

# profiling needs to read /proc/sys/kernel/perf_event_max_sample_rate
allow domain proc_perf:file { getattr open read ioctl lock };

# toybox loads libselinux which stats /sys/fs/selinux/
allow domain selinuxfs:dir search;
allow domain selinuxfs:file getattr;
allow domain sysfs:dir search;
allow domain selinuxfs:filesystem getattr;

# For /acct/uid/*/tasks.
allow domain cgroup:dir { search write };
allow domain cgroup:file { open append write lock };

# Almost all processes log tracing information to
# /sys/kernel/debug/tracing/trace_marker
# The reason behind this is documented in b/6513400
allow domain debugfs:dir search;
allow domain debugfs_tracing:dir search;
allow domain debugfs_trace_marker:file { open append write lock };

# Filesystem access.
allow domain fs_type:filesystem getattr;
allow domain fs_type:dir getattr;

# Restrict all domains to a whitelist for common socket types. Additional
# ioctl commands may be added to individual domains, but this sets safe
# defaults for all processes. Note that granting this whitelist to domain does
# not grant the ioctl permission on these socket types. That must be granted
# separately.
allowxperm domain domain:{ rawip_socket tcp_socket udp_socket }
  ioctl { 
#line 154
{
#line 154
# Socket ioctls for gathering information about the interface
#line 154
0x00008906 0x00008907
#line 154
0x00008910 0x00008912 0x00008913 0x00008915 0x00008917 0x00008919
#line 154
0x0000891b 0x00008921 0x00008933 0x00008938 0x00008942
#line 154
# Wireless extension ioctls. Primarily get functions.
#line 154
0x00008b01 0x00008b05 0x00008b07 0x00008b09 0x00008b0b 0x00008b0d
#line 154
0x00008b0f 0x00008b11 0x00008b12 0x00008b13 0x00008b21 0x00008b23
#line 154
0x00008b25 0x00008b27 0x00008b29 0x00008b2d
#line 154
} {
#line 154
  0x00005411 0x00005451 0x00005401 0x00005402 0x00005413 0x00005414 0x0000540e 0x00005403
#line 154
  0x0000540b 0x00005410 0x0000540f
#line 154
} };
# default whitelist for unix sockets.
allowxperm domain domain:{ unix_dgram_socket unix_stream_socket }
  ioctl {
#line 157
  0x00005411 0x00005451 0x00005401 0x00005413 0x00005414 0x0000541b
#line 157
};

# Restrict PTYs to only whitelisted ioctls.
# Note that granting this whitelist to domain does
# not grant the wider ioctl permission. That must be granted
# separately.
allowxperm domain devpts:chr_file ioctl {
#line 163
  0x00005411 0x00005451 0x00005401 0x00005402 0x00005413 0x00005414 0x0000540e 0x00005403
#line 163
  0x0000540b 0x00005410 0x0000540f
#line 163
};

###
### neverallow rules
###

# All socket ioctls must be restricted to a whitelist.
neverallowxperm domain domain:{ socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket netlink_iscsi_socket netlink_fib_lookup_socket netlink_connector_socket netlink_netfilter_socket netlink_generic_socket netlink_scsitransport_socket netlink_rdma_socket netlink_crypto_socket sctp_socket icmp_socket ax25_socket ipx_socket netrom_socket atmpvc_socket x25_socket rose_socket decnet_socket atmsvc_socket rds_socket irda_socket pppox_socket llc_socket can_socket tipc_socket bluetooth_socket iucv_socket rxrpc_socket isdn_socket phonet_socket ieee802154_socket caif_socket alg_socket nfc_socket vsock_socket kcm_socket qipcrtr_socket } ioctl { 0 };

# TIOCSTI is only ever used for exploits. Block it.
# b/33073072, b/7530569
# http://www.openwall.com/lists/oss-security/2016/09/26/14
neverallowxperm * devpts:chr_file ioctl 0x00005412;

# Do not allow any domain other than init or recovery to create unlabeled files.
neverallow { domain -init -recovery } unlabeled:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } create;

# Limit device node creation to these whitelisted domains.
neverallow {
  domain
  -kernel
  -init
  -ueventd
  -vold
} self:capability mknod;

# Limit raw I/O to these whitelisted domains. Do not apply to debug builds.
neverallow {
  domain
  -domain
  -kernel
  -init
  -recovery
  -ueventd
  -healthd
  -uncrypt
  -tee
} self:capability sys_rawio;

# No process can map low memory (< CONFIG_LSM_MMAP_MIN_ADDR).
neverallow * self:memprotect mmap_zero;

# No domain needs mac_override as it is unused by SELinux.
neverallow * self:capability2 mac_override;

# Only recovery needs mac_admin to set contexts not defined in current policy.
neverallow { domain -recovery } self:capability2 mac_admin;

# Once the policy has been loaded there shall be none to modify the policy.
# It is sealed.
neverallow * kernel:security load_policy;

# Only init prior to switching context should be able to set enforcing mode.
# init starts in kernel domain and switches to init domain via setcon in
# the init.rc, so the setenforce occurs while still in kernel. After
# switching domains, there is never any need to setenforce again by init.
neverallow * kernel:security setenforce;
neverallow { domain -kernel } kernel:security setcheckreqprot;

# No booleans in AOSP policy, so no need to ever set them.
neverallow * kernel:security setbool;

# Adjusting the AVC cache threshold.
# Not presently allowed to anything in policy, but possibly something
# that could be set from init.rc.
neverallow { domain -init } kernel:security setsecparam;

# Only init, ueventd, shell and system_server should be able to access HW RNG
neverallow {
  domain
  -init
  -shell # For CTS and is restricted to getattr in shell.te
  -system_server
  -ueventd
} hw_random_device:chr_file *;

# Ensure that all entrypoint executables are in exec_type or postinstall_file.
neverallow * { file_type -exec_type -postinstall_file }:file entrypoint;

# Ensure that nothing in userspace can access /dev/mem or /dev/kmem
neverallow {
  domain
  -shell # For CTS and is restricted to getattr in shell.te
  -ueventd # Further restricted in ueventd.te
} kmem_device:chr_file *;
neverallow * kmem_device:chr_file ~{ create relabelto unlink setattr getattr };

#Ensure that nothing in userspace can access /dev/port
neverallow {
  domain
  -shell # Shell user should not have any abilities outside of getattr
  -ueventd
} port_device:chr_file *;
neverallow * port_device:chr_file ~{ create relabelto unlink setattr getattr };
# Only init should be able to configure kernel usermodehelpers or
# security-sensitive proc settings.
neverallow { domain -init } usermodehelper:file { append write };
neverallow { domain -init } proc_security:file { append open read write };

# No domain should be allowed to ptrace init.
neverallow * init:process ptrace;

# Init can't do anything with binder calls. If this neverallow rule is being
# triggered, it's probably due to a service with no SELinux domain.
neverallow * init:binder *;

# Don't allow raw read/write/open access to block_device
# Rather force a relabel to a more specific type
neverallow { domain -kernel -init -recovery } block_device:blk_file { open read write };

# Do not allow renaming of block files or character files
# Ability to do so can lead to possible use in an exploit chain
# e.g. https://googleprojectzero.blogspot.com/2016/12/chrome-os-exploit-one-byte-overflow-and.html
neverallow * *:{ blk_file chr_file } rename;

# Don't allow raw read/write/open access to generic devices.
# Rather force a relabel to a more specific type.
neverallow domain device:chr_file { open read write };

# Limit what domains can mount filesystems or change their mount flags.
# sdcard_type / vfat is exempt as a larger set of domains need
# this capability, including device-specific domains.
neverallow { domain -kernel -init -recovery -vold -zygote -update_engine -otapreopt_chroot } { fs_type -sdcard_type }:filesystem { mount remount relabelfrom relabelto };

#
# Assert that, to the extent possible, we're not loading executable content from
# outside the rootfs or /system partition except for a few whitelisted domains.
#
neverallow {
    domain
    -appdomain
    -dumpstate
    -shell
    -su
    -system_server
    -webview_zygote
    -zygote
} { file_type -system_file -exec_type -postinstall_file }:file execute;
neverallow {
    domain
    -appdomain # for oemfs
    -recovery # for /tmp/update_binary in tmpfs
} { fs_type -rootfs }:file execute;
# Files from cache should never be executed
neverallow domain { cache_file cache_backup_file cache_private_backup_file cache_recovery_file }:file execute;

# Protect most domains from executing arbitrary content from /data.
#neverallow {
#  domain
#  -appdomain
#} {
#  data_file_type
#  -dalvikcache_data_file
#  -system_data_file # shared libs in apks
#  -apk_data_file
#}:file { execute execute_no_trans };

neverallow { domain -shell } nativetest_data_file:file { execute execute_no_trans };

# Only the init property service should write to /data/property and /dev/__properties__
neverallow { domain -init } property_data_file:dir { add_name create link relabelfrom remove_name rename reparent rmdir setattr write };
neverallow { domain -init } property_data_file:file { { append create link unlink relabelfrom rename setattr write } { execute execute_no_trans } };
neverallow { domain -init } property_type:file { { append create link unlink relabelfrom rename setattr write } { execute execute_no_trans } };
neverallow { domain -init } properties_device:file { { append create link unlink relabelfrom rename setattr write } { execute execute_no_trans } };
neverallow { domain -init } properties_serial:file { { append create link unlink relabelfrom rename setattr write } { execute execute_no_trans } };

# Only recovery should be doing writes to /system
neverallow { domain -recovery } { system_file exec_type }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom append unlink link rename };
neverallow { domain -recovery -kernel } { system_file exec_type }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } relabelto;

# Don't allow mounting on top of /system files or directories
neverallow * exec_type:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } mounton;
neverallow { domain -init } system_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } mounton;

# Nothing should be writing to files in the rootfs.
neverallow * rootfs:file { create write setattr relabelto append unlink link rename };

# Restrict context mounts to specific types marked with
# the contextmount_type attribute.
neverallow * {fs_type -contextmount_type}:filesystem relabelto;

# Ensure that context mount types are not writable, to ensure that
# the write to /system restriction above is not bypassed via context=
# mount to another type.
neverallow { domain -recovery } contextmount_type:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } }
    { create write setattr relabelfrom relabelto append unlink link rename };

# Do not allow service_manager add for default_android_service.
# Instead domains should use a more specific type such as
# system_app_service rather than the generic type.
# New service_types are defined in service.te and new mappings
# from service name to service_type are defined in service_contexts.
neverallow * default_android_service:service_manager add;

# Require that domains explicitly label unknown properties, and do not allow
# anyone but init to modify unknown properties.
neverallow { domain -init } default_prop:property_service set;
neverallow { domain -init } mmc_prop:property_service set;

# Do not allow reading device's serial number from system properties except form
# a few whitelisted domains.
neverallow {
  domain
  -adbd
  -dumpstate
  -hal_drm
  -init
  -mediadrmserver
  -recovery
  -shell
  -system_server
} serialno_prop:file { getattr open read ioctl lock };

# Do not allow reading the last boot timestamp from system properties
neverallow { domain -init -system_server } firstboot_prop:file { getattr open read ioctl lock };

neverallow {
  domain
  -init
  -recovery
  -system_server
  -shell # Shell is further restricted in shell.te
  -ueventd # Further restricted in ueventd.te
} frp_block_device:blk_file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };

# The metadata block device is set aside for device encryption and
# verified boot metadata. It may be reset at will and should not
# be used by other domains.
neverallow { domain -init -recovery -vold } metadata_block_device:blk_file
  { append link rename write open read ioctl lock };

# No domain other than recovery and update_engine can write to system partition(s).
neverallow { domain -recovery -update_engine } system_block_device:blk_file write;

# No domains other than install_recovery or recovery can write to recovery.
neverallow { domain -install_recovery -recovery } recovery_block_device:blk_file write;

# No domains other than a select few can access the misc_block_device. This
# block device is reserved for OTA use.
# Do not assert this rule on userdebug/eng builds, due to some devices using
# this partition for testing purposes.
neverallow {
  domain
  -domain # exclude debuggable builds
  -init
  -uncrypt
  -update_engine
  -vold
  -recovery
  -ueventd
} misc_block_device:blk_file { append link relabelfrom rename write open read ioctl lock };

# Only (hw|vnd|)servicemanager should be able to register with binder as the context manager
neverallow { domain -servicemanager -hwservicemanager -vndservicemanager } *:binder set_context_mgr;
# The service managers are only allowed to access their own device node
neverallow servicemanager hwbinder_device:chr_file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };
neverallow servicemanager vndbinder_device:chr_file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };
neverallow hwservicemanager binder_device:chr_file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };
neverallow hwservicemanager vndbinder_device:chr_file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };
neverallow vndservicemanager binder_device:chr_file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };
neverallow vndservicemanager hwbinder_device:chr_file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };

# On full TREBLE devices, only core components and apps can use Binder and servicemanager. Non-core
# domain apps need this because Android framework offers many of its services to apps as Binder
# services.
#line 442


# Only authorized processes should be writing to files in /data/dalvik-cache
neverallow {
  domain
  -init # TODO: limit init to relabelfrom for files
  -zygote
  -installd
  -postinstall_dexopt
  -cppreopts
  -dex2oat
  -otapreopt_slot
} dalvikcache_data_file:file { append create link unlink relabelfrom rename setattr write };

neverallow {
  domain
  -init
  -installd
  -postinstall_dexopt
  -cppreopts
  -dex2oat
  -zygote
  -otapreopt_slot
} dalvikcache_data_file:dir { add_name create link relabelfrom remove_name rename reparent rmdir setattr write };

# Only system_server should be able to send commands via the zygote socket
neverallow { domain -zygote -system_server } zygote:unix_stream_socket connectto;
neverallow { domain -system_server } zygote_socket:sock_file write;

neverallow { domain -system_server -webview_zygote } webview_zygote:unix_stream_socket connectto;
neverallow { domain -system_server } webview_zygote_socket:sock_file write;

neverallow {
  domain
  -tombstoned
  -crash_dump
  -dumpstate
  -system_server

  # Processes that can't exec crash_dump
  -mediacodec
  -mediaextractor
} tombstoned:unix_stream_socket connectto;
neverallow {
  domain
  -crash_dump
  -mediacodec
  -mediaextractor
} tombstoned_crash_socket:sock_file write;
neverallow { domain -dumpstate -system_server } tombstoned_intercept_socket:sock_file write;

# Android does not support System V IPCs.
#
# The reason for this is due to the fact that, by design, they lead to global
# kernel resource leakage.
#
# For example, there is no way to automatically release a SysV semaphore
# allocated in the kernel when:
#
# - a buggy or malicious process exits
# - a non-buggy and non-malicious process crashes or is explicitly killed.
#
# Killing processes automatically to make room for new ones is an
# important part of Android's application lifecycle implementation. This means
# that, even assuming only non-buggy and non-malicious code, it is very likely
# that over time, the kernel global tables used to implement SysV IPCs will fill
# up.
neverallow * *:{ shm sem msg msgq } *;

# Do not mount on top of symlinks, fifos, or sockets.
# Feature parity with Chromium LSM.
neverallow * { file_type fs_type dev_type }:{ lnk_file fifo_file sock_file } mounton;

# Nobody should be able to execute su on user builds.
# On userdebug/eng builds, only dumpstate, shell, and
# su itself execute su.
neverallow { domain -dumpstate -shell -su } su_exec:file { execute execute_no_trans };

# Do not allow the introduction of new execmod rules. Text relocations
# and modification of executable pages are unsafe.
# The only exceptions are for NDK text relocations associated with
# https://code.google.com/p/android/issues/detail?id=23203
# which, long term, need to go away.
neverallow * {
  file_type
  -apk_data_file
  -app_data_file
  -asec_public_file
}:file execmod;

# Do not allow making the stack or heap executable.
# We would also like to minimize execmem but it seems to be
# required by some device-specific service domains.
neverallow * self:process { execstack execheap };

# prohibit non-zygote spawned processes from using shared libraries
# with text relocations. b/20013628 .
neverallow { domain -untrusted_app_all } file_type:file execmod;

neverallow { domain -init } proc:{ file dir } mounton;

# Ensure that all types assigned to processes are included
# in the domain attribute, so that all allow and neverallow rules
# written on domain are applied to all processes.
# This is achieved by ensuring that it is impossible to transition
# from a domain to a non-domain type and vice versa.
# TODO - rework this: neverallow domain ~domain:process { transition dyntransition };
neverallow ~domain domain:process { transition dyntransition };

#
# Only system_app and system_server should be creating or writing
# their files. The proper way to share files is to setup
# type transitions to a more specific type or assigning a type
# to its parent directory via a file_contexts entry.
# Example type transition:
#  mydomain.te:file_type_auto_trans(mydomain, system_data_file, new_file_type)
#
neverallow {
  domain
  -system_server
  -system_app
  -init
  -installd # for relabelfrom and unlink, check for this in explicit neverallow
} system_data_file:file { append create link unlink relabelfrom rename setattr write };
# do not grant anything greater than r_file_perms and relabelfrom unlink
# to installd
neverallow installd system_data_file:file ~{ { getattr open read ioctl lock } relabelfrom unlink };

# respect system_app sandboxes
neverallow {
  domain
  -system_app # its own sandbox
  -system_server #populate com.android.providers.settings/databases/settings.db.
  -installd # creation of app sandbox
} system_app_data_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } { create unlink open };

# Services should respect app sandboxes
neverallow {
  domain
  -appdomain
  -installd # creation of sandbox
} app_data_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } { create unlink };

#
# Only these domains should transition to shell domain. This domain is
# permissible for the "shell user". If you need a process to exec a shell
# script with differing privilege, define a domain and set up a transition.
#
neverallow {
  domain
  -adbd
  -init
  -runas
  -zygote
} shell:process { transition dyntransition };

# Only domains spawned from zygote and runas may have the appdomain attribute.
neverallow { domain -runas -webview_zygote -zygote } {
  appdomain -shell -su -bluetooth
}:process { transition dyntransition };

# Minimize read access to shell- or app-writable symlinks.
# This is to prevent malicious symlink attacks.
neverallow {
  domain
  -appdomain
  -installd
  -uncrypt  # TODO: see if we can remove
} app_data_file:lnk_file read;

neverallow {
  domain
  -shell
  -uncrypt
  -installd
} shell_data_file:lnk_file read;

# In addition to the symlink reading restrictions above, restrict
# write access to shell owned directories. The /data/local/tmp
# directory is untrustworthy, and non-whitelisted domains should
# not be trusting any content in those directories.
neverallow {
  domain
  -adbd
  -dumpstate
  -installd
  -init
  -shell
  -vold
} shell_data_file:dir { add_name create link relabelfrom remove_name rename reparent rmdir setattr write };

#neverallow {
#  domain
#  -adbd
#  -appdomain
#  -dumpstate
#  -init
#  -installd
#  -system_server # why?
#  -uncrypt
#} shell_data_file:dir { open search };

# Same as above for /data/local/tmp files. We allow shell files
# to be passed around by file descriptor, but not directly opened.
#neverallow {
#  domain
#  -adbd
#  -appdomain
#  -dumpstate
#  -installd
#  -uncrypt
#} shell_data_file:file open;

# servicemanager is the only process which handles list request
neverallow * ~servicemanager:service_manager list;

# only service_manager_types can be added to service_manager
# TODO - rework this: neverallow * ~service_manager_type:service_manager { add find };

# Prevent assigning non property types to properties
# TODO - rework this: neverallow * ~property_type:property_service set;

# Domain types should never be assigned to any files other
# than the /proc/pid files associated with a process. The
# executable file used to enter a domain should be labeled
# with its own _exec type, not with the domain type.
# Conventionally, this looks something like:
# $ cat mydaemon.te
# type mydaemon, domain;
# type mydaemon_exec, exec_type, file_type;
# init_daemon_domain(mydaemon)
# $ grep mydaemon file_contexts
# /system/bin/mydaemon -- u:object_r:mydaemon_exec:s0
neverallow * domain:file { execute execute_no_trans entrypoint };

# Do not allow access to the generic debugfs label. This is too broad.
# Instead, if access to part of debugfs is desired, it should have a
# more specific label.
# TODO: fix system_server and dumpstate
neverallow { domain -init -system_server -dumpstate } debugfs:file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };

neverallow {
  domain
  -init
  -recovery
  -sdcardd
  -vold
} fuse_device:chr_file open;
neverallow {
  domain
  -dumpstate
  -init
  -priv_app
  -recovery
  -sdcardd
  -shell # Restricted by shell.te to only getattr
  -system_server
  -ueventd
  -vold
} fuse_device:chr_file *;

# Profiles contain untrusted data and profman parses that. We should only run
# in from installd forked processes.
neverallow {
  domain
  -installd
  -profman
} profman_exec:file { execute execute_no_trans };

# Enforce restrictions on kernel module origin.
# Do not allow kernel module loading except from system,
# vendor, and boot partitions.
neverallow * ~{ system_file rootfs }:system module_load;

# Only allow filesystem caps to be set at build time or
# during upgrade by recovery.
neverallow {
  domain
  -recovery
} self:capability setfcap;

# Enforce AT_SECURE for executing crash_dump.
neverallow domain crash_dump:process noatsecure;
#line 1 "system/sepolicy/public/domain_deprecated.te"
# rules removed from the domain attribute

# Search /storage/emulated tmpfs mount.
allow domain_deprecated tmpfs:dir { open getattr read search ioctl lock };

#line 5
auditallow {
#line 5
  domain_deprecated
#line 5
  -appdomain
#line 5
  -sdcardd
#line 5
  -surfaceflinger
#line 5
  -system_server
#line 5
  -vold
#line 5
  -zygote
#line 5
} tmpfs:dir { open getattr read search ioctl lock };
#line 15


# Inherit or receive open files from others.
allow domain_deprecated system_server:fd use;

#line 19
auditallow { domain_deprecated -appdomain -netd -surfaceflinger } system_server:fd use;
#line 21


# Connect to adbd and use a socket transferred from it.
# This is used for e.g. adb backup/restore.
allow domain_deprecated adbd:fd use;

#line 26
auditallow { domain_deprecated -appdomain -system_server } adbd:fd use;
#line 28


# Root fs.
allow domain_deprecated rootfs:dir { open getattr read search ioctl lock };
allow domain_deprecated rootfs:file { getattr open read ioctl lock };
allow domain_deprecated rootfs:lnk_file { getattr open read ioctl lock };

#line 34
auditallow {
#line 34
  domain_deprecated
#line 34
  -fsck
#line 34
  -healthd
#line 34
  -installd
#line 34
  -servicemanager
#line 34
  -system_server
#line 34
  -ueventd
#line 34
  -uncrypt
#line 34
  -vold
#line 34
  -zygote
#line 34
} rootfs:dir { open getattr read ioctl lock }; # search granted in domain
#line 34
auditallow {
#line 34
  domain_deprecated
#line 34
  -healthd
#line 34
  -installd
#line 34
  -servicemanager
#line 34
  -system_server
#line 34
  -ueventd
#line 34
  -uncrypt
#line 34
  -vold
#line 34
  -zygote
#line 34
} rootfs:file { getattr open read ioctl lock };
#line 34
auditallow {
#line 34
  domain_deprecated
#line 34
  -appdomain
#line 34
  -healthd
#line 34
  -installd
#line 34
  -servicemanager
#line 34
  -system_server
#line 34
  -ueventd
#line 34
  -uncrypt
#line 34
  -vold
#line 34
  -zygote
#line 34
} rootfs:lnk_file { getattr open ioctl lock }; # read granted in domain
#line 70


# System file accesses.
allow domain_deprecated system_file:dir { open getattr read search ioctl lock };
allow domain_deprecated system_file:file { getattr open read ioctl lock };

#line 75
auditallow {
#line 75
  domain_deprecated
#line 75
  -appdomain
#line 75
  -fingerprintd
#line 75
  -installd
#line 75
  -keystore
#line 75
  -rild
#line 75
  -surfaceflinger
#line 75
  -system_server
#line 75
  -update_engine
#line 75
  -vold
#line 75
  -zygote
#line 75
} system_file:dir { open read ioctl lock }; # search getattr in domain
#line 75
auditallow {
#line 75
  domain_deprecated
#line 75
  -appdomain
#line 75
  -rild
#line 75
  -surfaceflinger
#line 75
  -system_server
#line 75
  -zygote
#line 75
} system_file:file { ioctl lock }; # read open getattr in domain
#line 97


# Read files already opened under /data.
allow domain_deprecated system_data_file:file { getattr read };
allow domain_deprecated system_data_file:lnk_file { getattr open read ioctl lock };

#line 102
auditallow {
#line 102
  domain_deprecated
#line 102
  -appdomain
#line 102
  -sdcardd
#line 102
  -system_server
#line 102
  -tee
#line 102
} system_data_file:file { getattr read };
#line 102
auditallow {
#line 102
  domain_deprecated
#line 102
  -appdomain
#line 102
  -system_server
#line 102
  -tee
#line 102
} system_data_file:lnk_file { getattr open read ioctl lock };
#line 116


# Read apk files under /data/app.
allow domain_deprecated apk_data_file:dir { getattr search };
allow domain_deprecated apk_data_file:file { getattr open read ioctl lock };
allow domain_deprecated apk_data_file:lnk_file { getattr open read ioctl lock };

#line 122
auditallow {
#line 122
  domain_deprecated
#line 122
  -appdomain
#line 122
  -dex2oat
#line 122
  -installd
#line 122
  -system_server
#line 122
} apk_data_file:dir { getattr search };
#line 122
auditallow {
#line 122
  domain_deprecated
#line 122
  -appdomain
#line 122
  -dex2oat
#line 122
  -installd
#line 122
  -system_server
#line 122
} apk_data_file:file { getattr open read ioctl lock };
#line 122
auditallow {
#line 122
  domain_deprecated
#line 122
  -appdomain
#line 122
  -dex2oat
#line 122
  -installd
#line 122
  -system_server
#line 122
} apk_data_file:lnk_file { getattr open read ioctl lock };
#line 144


# Read already opened /cache files.
allow domain_deprecated cache_file:dir { open getattr read search ioctl lock };
allow domain_deprecated cache_file:file { getattr read };
allow domain_deprecated cache_file:lnk_file { getattr open read ioctl lock };

#line 150
auditallow {
#line 150
  domain_deprecated
#line 150
  -system_server
#line 150
  -vold
#line 150
} cache_file:dir { open read search ioctl lock };
#line 150
auditallow {
#line 150
  domain_deprecated
#line 150
  -appdomain
#line 150
  -system_server
#line 150
  -vold
#line 150
} cache_file:dir getattr;
#line 150
auditallow {
#line 150
  domain_deprecated
#line 150
  -system_server
#line 150
  -vold
#line 150
} cache_file:file { getattr read };
#line 150
auditallow {
#line 150
  domain_deprecated
#line 150
  -system_server
#line 150
  -vold
#line 150
} cache_file:lnk_file { getattr open read ioctl lock };
#line 172


# Allow access to ion memory allocation device
allow domain_deprecated ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
# split this auditallow into read and write perms since most domains seem to
# only require read

#line 178
auditallow {
#line 178
  domain_deprecated
#line 178
  -appdomain
#line 178
  -fingerprintd
#line 178
  -keystore
#line 178
  -surfaceflinger
#line 178
  -system_server
#line 178
  -tee
#line 178
  -vold
#line 178
  -zygote
#line 178
} ion_device:chr_file { getattr open read ioctl lock };
#line 178
auditallow domain_deprecated ion_device:chr_file { write append };
#line 191


# Read access to pseudo filesystems.

#line 194
allow domain_deprecated proc:dir { open getattr read search ioctl lock };
#line 194
allow domain_deprecated proc:{ file lnk_file } { getattr open read ioctl lock };
#line 194


#line 195
allow domain_deprecated sysfs:dir { open getattr read search ioctl lock };
#line 195
allow domain_deprecated sysfs:{ file lnk_file } { getattr open read ioctl lock };
#line 195


#line 196
allow domain_deprecated cgroup:dir { open getattr read search ioctl lock };
#line 196
allow domain_deprecated cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 196

allow domain_deprecated proc_meminfo:file { getattr open read ioctl lock };


#line 199
auditallow {
#line 199
  domain_deprecated
#line 199
  -fsck
#line 199
  -fsck_untrusted
#line 199
  -rild
#line 199
  -sdcardd
#line 199
  -system_server
#line 199
  -update_engine
#line 199
  -vold
#line 199
} proc:file { getattr open read ioctl lock };
#line 199
auditallow {
#line 199
  domain_deprecated
#line 199
  -fsck
#line 199
  -fsck_untrusted
#line 199
  -rild
#line 199
  -system_server
#line 199
  -vold
#line 199
} proc:lnk_file { open ioctl lock }; # getattr read granted in domain
#line 199
auditallow {
#line 199
  domain_deprecated
#line 199
  -bluetooth
#line 199
  -fingerprintd
#line 199
  -healthd
#line 199
  -netd
#line 199
  -rild
#line 199
  -system_app
#line 199
  -surfaceflinger
#line 199
  -system_server
#line 199
  -tee
#line 199
  -ueventd
#line 199
  -vold
#line 199
} sysfs:dir { open getattr read ioctl lock }; # search granted in domain
#line 199
auditallow {
#line 199
  domain_deprecated
#line 199
  -bluetooth
#line 199
  -fingerprintd
#line 199
  -healthd
#line 199
  -netd
#line 199
  -rild
#line 199
  -system_app
#line 199
  -surfaceflinger
#line 199
  -system_server
#line 199
  -tee
#line 199
  -ueventd
#line 199
  -vold
#line 199
} sysfs:file { getattr open read ioctl lock };
#line 199
auditallow {
#line 199
  domain_deprecated
#line 199
  -bluetooth
#line 199
  -fingerprintd
#line 199
  -healthd
#line 199
  -netd
#line 199
  -rild
#line 199
  -system_app
#line 199
  -surfaceflinger
#line 199
  -system_server
#line 199
  -tee
#line 199
  -ueventd
#line 199
  -vold
#line 199
} sysfs:lnk_file { getattr open ioctl lock }; # read granted in domain
#line 199
auditallow {
#line 199
  domain_deprecated
#line 199
  -appdomain
#line 199
  -dumpstate
#line 199
  -fingerprintd
#line 199
  -healthd
#line 199
  -inputflinger
#line 199
  -installd
#line 199
  -keystore
#line 199
  -netd
#line 199
  -rild
#line 199
  -surfaceflinger
#line 199
  -system_server
#line 199
  -zygote
#line 199
} cgroup:dir { open getattr read search ioctl lock };
#line 199
auditallow {
#line 199
  domain_deprecated
#line 199
  -appdomain
#line 199
  -dumpstate
#line 199
  -fingerprintd
#line 199
  -healthd
#line 199
  -inputflinger
#line 199
  -installd
#line 199
  -keystore
#line 199
  -netd
#line 199
  -rild
#line 199
  -surfaceflinger
#line 199
  -system_server
#line 199
  -zygote
#line 199
} cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 199
auditallow {
#line 199
  domain_deprecated
#line 199
  -appdomain
#line 199
  -surfaceflinger
#line 199
  -system_server
#line 199
  -vold
#line 199
} proc_meminfo:file { getattr open read ioctl lock };
#line 297


# Get SELinux enforcing status.
allow domain_deprecated selinuxfs:dir { open getattr read search ioctl lock };
allow domain_deprecated selinuxfs:file { getattr open read ioctl lock };

#line 302
auditallow {
#line 302
  domain_deprecated
#line 302
  -appdomain
#line 302
  -installd
#line 302
  -keystore
#line 302
  -postinstall_dexopt
#line 302
  -runas
#line 302
  -servicemanager
#line 302
  -system_server
#line 302
  -ueventd
#line 302
  -zygote
#line 302
} selinuxfs:dir { open getattr read ioctl lock }; # search granted in domain
#line 302
auditallow {
#line 302
  domain_deprecated
#line 302
  -appdomain
#line 302
  -installd
#line 302
  -keystore
#line 302
  -postinstall_dexopt
#line 302
  -runas
#line 302
  -servicemanager
#line 302
  -system_server
#line 302
  -ueventd
#line 302
  -zygote
#line 302
} selinuxfs:file { open read ioctl lock }; # getattr granted in domain
#line 327

#line 1 "system/sepolicy/public/drmserver.te"
# drmserver - DRM service
type drmserver, domain;
type drmserver_exec, exec_type, file_type;

typeattribute drmserver mlstrustedsubject;


#line 7
typeattribute drmserver netdomain;
#line 7


# Perform Binder IPC to system server.

#line 10
# Call the servicemanager and transfer references to it.
#line 10
allow drmserver servicemanager:binder { call transfer };
#line 10
# servicemanager performs getpidcon on clients.
#line 10
allow servicemanager drmserver:dir search;
#line 10
allow servicemanager drmserver:file { read open };
#line 10
allow servicemanager drmserver:process getattr;
#line 10
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 10
# all domains in domain.te.
#line 10


#line 11
# Call the server domain and optionally transfer references to it.
#line 11
allow drmserver system_server:binder { call transfer };
#line 11
# Allow the serverdomain to transfer references to the client on the reply.
#line 11
allow system_server drmserver:binder transfer;
#line 11
# Receive and use open files from the server.
#line 11
allow drmserver system_server:fd use;
#line 11


#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow drmserver appdomain:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow appdomain drmserver:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow drmserver appdomain:fd use;
#line 12


#line 13
typeattribute drmserver binderservicedomain;
#line 13

# Inherit or receive open files from system_server.
allow drmserver system_server:fd use;

# Perform Binder IPC to mediaserver

#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow drmserver mediaserver:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow mediaserver drmserver:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow drmserver mediaserver:fd use;
#line 18


allow drmserver sdcard_type:dir search;
allow drmserver drm_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow drmserver drm_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow drmserver tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow drmserver app_data_file:file { read write getattr };
allow drmserver sdcard_type:file { read write getattr };

#line 26
allow drmserver efs_file:dir { open getattr read search ioctl lock };
#line 26
allow drmserver efs_file:{ file lnk_file } { getattr open read ioctl lock };
#line 26


type drmserver_socket, file_type;

# /data/app/tlcd_sock socket file.
# Clearly, /data/app is the most logical place to create a socket.  Not.
allow drmserver apk_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow drmserver drmserver_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow drmserver tee:unix_stream_socket connectto;
# Delete old socket file if present.
allow drmserver apk_data_file:sock_file unlink;

# After taking a video, drmserver looks at the video file.

#line 39
allow drmserver media_rw_data_file:dir { open getattr read search ioctl lock };
#line 39
allow drmserver media_rw_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 39


# Read resources from open apk files passed over Binder.
allow drmserver apk_data_file:file { read getattr };
allow drmserver asec_apk_file:file { read getattr };
allow drmserver ringtone_file:file { read getattr };

# Read /data/data/com.android.providers.telephony files passed over Binder.
allow drmserver radio_data_file:file { read getattr };

# /oem access
allow drmserver oemfs:dir search;
allow drmserver oemfs:file { getattr open read ioctl lock };


#line 53
  allow drmserver drmserver_service:service_manager { add find };
#line 53
  neverallow { domain -drmserver } drmserver_service:service_manager add;
#line 53

allow drmserver permission_service:service_manager find;


#line 56

#line 56
allow drmserver selinuxfs:dir { open getattr read search ioctl lock };
#line 56
allow drmserver selinuxfs:{ file lnk_file } { getattr open read ioctl lock };
#line 56

#line 56
allow drmserver selinuxfs:file { open append write lock };
#line 56
allow drmserver kernel:security compute_av;
#line 56
allow drmserver self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto name_bind };
#line 56



#line 58
allow drmserver cgroup:dir { open getattr read search ioctl lock };
#line 58
allow drmserver cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 58


#line 59
allow drmserver system_file:dir { open getattr read search ioctl lock };
#line 59
allow drmserver system_file:{ file lnk_file } { getattr open read ioctl lock };
#line 59

#line 1 "system/sepolicy/public/dumpstate.te"
# dumpstate
type dumpstate, domain, domain_deprecated, mlstrustedsubject;
type dumpstate_exec, exec_type, file_type;


#line 5
typeattribute dumpstate netdomain;
#line 5


#line 6
# Call the servicemanager and transfer references to it.
#line 6
allow dumpstate servicemanager:binder { call transfer };
#line 6
# servicemanager performs getpidcon on clients.
#line 6
allow servicemanager dumpstate:dir search;
#line 6
allow servicemanager dumpstate:file { read open };
#line 6
allow servicemanager dumpstate:process getattr;
#line 6
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 6
# all domains in domain.te.
#line 6


#line 7
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 7
allow dumpstate sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 7
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 7
allow dumpstate self:capability2 block_suspend;
#line 7


# Allow setting process priority, protect from OOM killer, and dropping
# privileges by switching UID / GID
allow dumpstate self:capability { setuid setgid sys_resource };

# Allow dumpstate to scan through /proc/pid for all processes

#line 14
allow dumpstate domain:dir { open getattr read search ioctl lock };
#line 14
allow dumpstate domain:{ file lnk_file } { getattr open read ioctl lock };
#line 14


allow dumpstate self:capability {
    # Send signals to processes
    kill
    # Run iptables
    net_raw
    net_admin
};

# Allow executing files on system, such as:
#   /system/bin/toolbox
#   /system/bin/logcat
#   /system/bin/dumpsys
allow dumpstate system_file:file execute_no_trans;
allow dumpstate toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Create and write into /data/anr/
allow dumpstate self:capability { dac_override chown fowner fsetid };
allow dumpstate anr_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow dumpstate anr_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Allow reading /data/system/uiderrors.txt
# TODO: scope this down.
allow dumpstate system_data_file:file { getattr open read ioctl lock };

# Read dmesg
allow dumpstate self:capability2 syslog;
allow dumpstate kernel:system syslog_read;

# Read /sys/fs/pstore/console-ramoops
allow dumpstate pstorefs:dir { open getattr read search ioctl lock };
allow dumpstate pstorefs:file { getattr open read ioctl lock };

# Get process attributes
allow dumpstate domain:process getattr;

# Signal java processes to dump their stack
allow dumpstate { appdomain system_server }:process signal;

# Signal native processes to dump their stack.
allow dumpstate {
  # This list comes from native_processes_to_dump in dumpstate/utils.c
  audioserver
  cameraserver
  drmserver
  inputflinger
  mediadrmserver
  mediaextractor
  mediaserver
  sdcardd
  surfaceflinger

  # This list comes from hal_interfaces_to_dump in dumpstate/utils.c
  hal_audio_server
  hal_bluetooth_server
  hal_camera_server
  hal_vr_server
  mediacodec # TODO(b/36375899): hal_omx_server
}:process signal;

# Connect to tombstoned to intercept dumps.

#line 76

#line 76

#line 76
allow dumpstate tombstoned_intercept_socket:sock_file write;
#line 76
allow dumpstate tombstoned:unix_stream_socket connectto;
#line 76

#line 76


# TODO: added to match above sysfs rule. Remove me?
allow dumpstate sysfs_usb:file { open append write lock };

# Other random bits of data we want to collect
allow dumpstate qtaguid_proc:file { getattr open read ioctl lock };
allow dumpstate debugfs:file { getattr open read ioctl lock };
# df for /storage/emulated needs search
allow dumpstate { storage_file block_device }:dir { search getattr };
allow dumpstate fuse_device:chr_file getattr;
allow dumpstate { dm_device cache_block_device }:blk_file getattr;

# Read /dev/cpuctl and /dev/cpuset

#line 90
allow dumpstate cgroup:dir { open getattr read search ioctl lock };
#line 90
allow dumpstate cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 90


# Allow dumpstate to make binder calls to any binder service

#line 93
# Call the server domain and optionally transfer references to it.
#line 93
allow dumpstate binderservicedomain:binder { call transfer };
#line 93
# Allow the serverdomain to transfer references to the client on the reply.
#line 93
allow binderservicedomain dumpstate:binder transfer;
#line 93
# Receive and use open files from the server.
#line 93
allow dumpstate binderservicedomain:fd use;
#line 93


#line 94
# Call the server domain and optionally transfer references to it.
#line 94
allow dumpstate { appdomain netd wificond }:binder { call transfer };
#line 94
# Allow the serverdomain to transfer references to the client on the reply.
#line 94
allow { appdomain netd wificond } dumpstate:binder transfer;
#line 94
# Receive and use open files from the server.
#line 94
allow dumpstate { appdomain netd wificond }:fd use;
#line 94


# Vibrate the device after we are done collecting the bugreport
# For binderized mode:

#line 98
typeattribute dumpstate halclientdomain;
#line 98
typeattribute dumpstate hal_dumpstate_client;
#line 98

#line 98
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 98
# once we know at build time whether a HAL is going to run in
#line 98
# passthrough or binderized mode.
#line 98
typeattribute dumpstate hal_dumpstate;
#line 98
# Find passthrough HAL implementations
#line 98
allow hal_dumpstate system_file:dir { open getattr read search ioctl lock };
#line 98


#line 99
# Call the server domain and optionally transfer references to it.
#line 99
allow dumpstate hal_vibrator:binder { call transfer };
#line 99
# Allow the serverdomain to transfer references to the client on the reply.
#line 99
allow hal_vibrator dumpstate:binder transfer;
#line 99
# Receive and use open files from the server.
#line 99
allow dumpstate hal_vibrator:fd use;
#line 99


#line 100
typeattribute dumpstate halclientdomain;
#line 100
typeattribute dumpstate hal_vibrator_client;
#line 100

#line 100
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 100
# once we know at build time whether a HAL is going to run in
#line 100
# passthrough or binderized mode.
#line 100
typeattribute dumpstate hal_vibrator;
#line 100
# Find passthrough HAL implementations
#line 100
allow hal_vibrator system_file:dir { open getattr read search ioctl lock };
#line 100

# For passthrough mode:
allow dumpstate sysfs_vibrator:file { { { getattr open read ioctl lock } { open append write lock } } getattr };

# Reading /proc/PID/maps of other processes
allow dumpstate self:capability sys_ptrace;

# Allow the bugreport service to create a file in
# /data/data/com.android.shell/files/bugreports/bugreport
allow dumpstate shell_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow dumpstate shell_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Run a shell.
allow dumpstate shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# For running am and similar framework commands.
# Run /system/bin/app_process.
allow dumpstate zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
# Dalvik Compiler JIT.
allow dumpstate ashmem_device:chr_file execute;
allow dumpstate self:process execmem;
# For art.
allow dumpstate dalvikcache_data_file:dir { search getattr };
allow dumpstate dalvikcache_data_file:file { { getattr open read ioctl lock } execute };
allow dumpstate dalvikcache_data_file:lnk_file { getattr open read ioctl lock };

# For Bluetooth
allow dumpstate bluetooth_data_file:dir search;
allow dumpstate bluetooth_logs_data_file:dir { open getattr read search ioctl lock };
allow dumpstate bluetooth_logs_data_file:file { getattr open read ioctl lock };

# Dumpstate calls screencap, which grabs a screenshot. Needs gpu access
allow dumpstate gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# logd access

#line 135
allow dumpstate logcat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 135

#line 135

#line 135

#line 135
allow dumpstate logdr_socket:sock_file write;
#line 135
allow dumpstate logd:unix_stream_socket connectto;
#line 135

#line 135

#line 135


#line 136
# Group AID_LOG checked by filesystem & logd
#line 136
# to permit control commands
#line 136

#line 136

#line 136

#line 136
allow dumpstate logd_socket:sock_file write;
#line 136
allow dumpstate logd:unix_stream_socket connectto;
#line 136

#line 136

#line 136


#line 137
allow dumpstate runtime_event_log_tags_file:file { getattr open read ioctl lock };
#line 137


# Read /proc/net
allow dumpstate proc_net:file { getattr open read ioctl lock };

# Read network state info files.
allow dumpstate net_data_file:dir search;
allow dumpstate net_data_file:file { getattr open read ioctl lock };

# List sockets via ss.
allow dumpstate self:netlink_tcpdiag_socket { { create { read getattr write setattr lock append bind connect getopt setopt shutdown } } nlmsg_read };

# Access /data/tombstones.
allow dumpstate tombstone_data_file:dir { open getattr read search ioctl lock };
allow dumpstate tombstone_data_file:file { getattr open read ioctl lock };

# Access /cache/recovery
allow dumpstate cache_recovery_file:dir { open getattr read search ioctl lock };
allow dumpstate cache_recovery_file:file { getattr open read ioctl lock };

# Access /data/misc/recovery
allow dumpstate recovery_data_file:dir { open getattr read search ioctl lock };
allow dumpstate recovery_data_file:file { getattr open read ioctl lock };

# Access /data/misc/profiles/{cur,ref}/

#line 162
  allow dumpstate user_profile_data_file:dir { open getattr read search ioctl lock };
#line 162
  allow dumpstate user_profile_data_file:file { getattr open read ioctl lock };
#line 165


# Access /data/misc/logd

#line 168
  allow dumpstate misc_logd_file:dir { open getattr read search ioctl lock };
#line 168
  allow dumpstate misc_logd_file:file { getattr open read ioctl lock };
#line 171


allow dumpstate { service_manager_type -gatekeeper_service -dumpstate_service -incident_service -virtual_touchpad_service }:service_manager find;
allow dumpstate servicemanager:service_manager list;

allow dumpstate devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Set properties.
# dumpstate_prop is used to share state with the Shell app.

#line 180

#line 180
allow dumpstate property_socket:sock_file write;
#line 180
allow dumpstate init:unix_stream_socket connectto;
#line 180

#line 180
allow dumpstate dumpstate_prop:property_service set;
#line 180

#line 180
allow dumpstate dumpstate_prop:file { getattr open read ioctl lock };
#line 180

#line 180

# dumpstate_options_prop is used to pass extra command-line args.

#line 182

#line 182
allow dumpstate property_socket:sock_file write;
#line 182
allow dumpstate init:unix_stream_socket connectto;
#line 182

#line 182
allow dumpstate dumpstate_options_prop:property_service set;
#line 182

#line 182
allow dumpstate dumpstate_options_prop:file { getattr open read ioctl lock };
#line 182

#line 182


# Read device's serial number from system properties

#line 185
allow dumpstate serialno_prop:file { getattr open read ioctl lock };
#line 185


# Access to /data/media.
# This should be removed if sdcardfs is modified to alter the secontext for its
# accesses to the underlying FS.
allow dumpstate media_rw_data_file:dir getattr;
allow dumpstate proc_interrupts:file { getattr open read ioctl lock };
allow dumpstate proc_zoneinfo:file { getattr open read ioctl lock };

# Create a service for talking back to system_server

#line 195
  allow dumpstate dumpstate_service:service_manager { add find };
#line 195
  neverallow { domain -dumpstate } dumpstate_service:service_manager add;
#line 195


###
### neverallow rules
###

# dumpstate has capability sys_ptrace, but should only use that capability for
# accessing sensitive /proc/PID files, never for using ptrace attach.
neverallow dumpstate *:process ptrace;

# only system_server, dumpstate and shell can find the dumpstate service
neverallow { domain -system_server -shell -dumpstate } dumpstate_service:service_manager find;

# Dumpstate should not be writing to any generically labeled sysfs files.
# Create a specific label for the file type
neverallow dumpstate sysfs:file { append create link unlink relabelfrom rename setattr write };
#line 1 "system/sepolicy/public/ephemeral_app.te"
###
### Ephemeral apps.
###
### This file defines the security policy for apps with the ephemeral
### feature.
###
### The ephemeral_app domain is a reduced permissions sandbox allowing
### ephemeral applications to be safely installed and run. Non ephemeral
### applications may also opt-in to ephemeral to take advantage of the
### additional security features.
###
### PackageManager flags an app as ephemeral at install time.

type ephemeral_app, domain;
#line 1 "system/sepolicy/public/file.te"
# Filesystem types
type labeledfs, fs_type;
type pipefs, fs_type;
type sockfs, fs_type;
type rootfs, fs_type;
type proc, fs_type;
# Security-sensitive proc nodes that should not be writable to most.
type proc_security, fs_type;
type proc_drop_caches, fs_type;
type proc_overcommit_memory, fs_type;
# proc, sysfs, or other nodes that permit configuration of kernel usermodehelpers.
type usermodehelper, fs_type, sysfs_type;
type qtaguid_proc, fs_type, mlstrustedobject;
type proc_bluetooth_writable, fs_type;
type proc_cpuinfo, fs_type;
type proc_interrupts, fs_type;
type proc_iomem, fs_type;
type proc_meminfo, fs_type;
type proc_misc, fs_type;
type proc_modules, fs_type;
type proc_net, fs_type;
type proc_perf, fs_type;
type proc_stat, fs_type;
type proc_sysrq, fs_type;
type proc_timer, fs_type;
type proc_tty_drivers, fs_type;
type proc_uid_cputime_showstat, fs_type;
type proc_uid_cputime_removeuid, fs_type;
type proc_uid_io_stats, fs_type;
type proc_uid_procstat_set, fs_type;
type proc_zoneinfo, fs_type;
type selinuxfs, fs_type, mlstrustedobject;
type cgroup, fs_type, mlstrustedobject;
type sysfs, fs_type, sysfs_type, mlstrustedobject;
type sysfs_uio, sysfs_type, fs_type;
type sysfs_batteryinfo, fs_type, sysfs_type;
type sysfs_bluetooth_writable, fs_type, sysfs_type, mlstrustedobject;
type sysfs_leds, fs_type, sysfs_type;
type sysfs_hwrandom, fs_type, sysfs_type;
type sysfs_nfc_power_writable, fs_type, sysfs_type, mlstrustedobject;
type sysfs_wake_lock, fs_type, sysfs_type;
type sysfs_mac_address, fs_type, sysfs_type;
type sysfs_usb, sysfs_type, file_type, mlstrustedobject;
type configfs, fs_type;
# /sys/devices/system/cpu
type sysfs_devices_system_cpu, fs_type, sysfs_type;
# /sys/module/lowmemorykiller
type sysfs_lowmemorykiller, fs_type, sysfs_type;
# /sys/module/wlan/parameters/fwpath
type sysfs_wlan_fwpath, fs_type, sysfs_type;
type sysfs_vibrator, fs_type, sysfs_type;

type sysfs_thermal, sysfs_type, fs_type;

type sysfs_zram, fs_type, sysfs_type;
type sysfs_zram_uevent, fs_type, sysfs_type;
type inotify, fs_type, mlstrustedobject;
type devpts, fs_type, mlstrustedobject;
type tmpfs, fs_type;
type shm, fs_type;
type mqueue, fs_type;
type fuse, sdcard_type, fs_type, mlstrustedobject;
type sdcardfs, sdcard_type, fs_type, mlstrustedobject;
type vfat, sdcard_type, fs_type, mlstrustedobject;
type debugfs, fs_type;
type debugfs_mmc, fs_type, debugfs_type;
type debugfs_trace_marker, fs_type, debugfs_type, mlstrustedobject;
type debugfs_tracing, fs_type, debugfs_type;
type debugfs_tracing_instances, fs_type, debugfs_type;
type debugfs_wifi_tracing, fs_type, debugfs_type;
type tracing_shell_writable, fs_type, debugfs_type;
type pstorefs, fs_type;
type functionfs, fs_type, mlstrustedobject;
type oemfs, fs_type, contextmount_type;
type usbfs, fs_type;
type binfmt_miscfs, fs_type;
type app_fusefs, fs_type, contextmount_type;

# File types
type unlabeled, file_type;
# Default type for anything under /system.
type system_file, file_type;
# Speedup access for trusted applications to the runtime event tags
type runtime_event_log_tags_file, file_type;
# Type for /system/bin/logcat.
type logcat_exec, exec_type, file_type;
# /cores for coredumps on userdebug / eng builds
type coredump_file, file_type;
# Default type for anything under /data.
type system_data_file, file_type, data_file_type;
# Unencrypted data
type unencrypted_data_file, file_type, data_file_type;
# /data/.layout_version or other installd-created files that
# are created in a system_data_file directory.
type install_data_file, file_type, data_file_type;
# /data/drm - DRM plugin data
type drm_data_file, file_type, data_file_type;
# /data/adb - adb debugging files
type adb_data_file, file_type, data_file_type;
# /data/anr - ANR traces
type anr_data_file, file_type, data_file_type, mlstrustedobject;
# /data/tombstones - core dumps
type tombstone_data_file, file_type, data_file_type, mlstrustedobject;
# /data/app - user-installed apps
type apk_data_file, file_type, data_file_type;
type apk_tmp_file, file_type, data_file_type, mlstrustedobject;
# /data/app-private - forward-locked apps
type apk_private_data_file, file_type, data_file_type;
type apk_private_tmp_file, file_type, data_file_type, mlstrustedobject;
# /data/dalvik-cache
type dalvikcache_data_file, file_type, data_file_type;
# /data/ota
type ota_data_file, file_type, data_file_type;
# /data/ota_package
type ota_package_file, file_type, data_file_type, mlstrustedobject;
# /data/misc/profiles
type user_profile_data_file, file_type, data_file_type, mlstrustedobject;
# /data/misc/profman
type profman_dump_data_file, file_type, data_file_type;
# /data/resource-cache
type resourcecache_data_file, file_type, data_file_type;
# /data/local - writable by shell
type shell_data_file, file_type, data_file_type, mlstrustedobject;
# /data/property
type property_data_file, file_type, data_file_type;
# /data/bootchart
type bootchart_data_file, file_type, data_file_type;
# /data/system/heapdump
type heapdump_data_file, file_type, data_file_type, mlstrustedobject;
# /data/nativetest
type nativetest_data_file, file_type, data_file_type;
# /data/system_de/0/ringtones
type ringtone_file, file_type, data_file_type, mlstrustedobject;
# /data/preloads
type preloads_data_file, file_type, data_file_type;
# /data/preloads/media
type preloads_media_file, file_type, data_file_type;

# Mount locations managed by vold
type mnt_media_rw_file, file_type;
type mnt_user_file, file_type;
type mnt_expand_file, file_type;
type storage_file, file_type;

# Label for storage dirs which are just mount stubs
type mnt_media_rw_stub_file, file_type;
type storage_stub_file, file_type;

# /postinstall: Mount point used by update_engine to run postinstall.
type postinstall_mnt_dir, file_type;
# Files inside the /postinstall mountpoint are all labeled as postinstall_file.
type postinstall_file, file_type;

# /data/misc subdirectories
type adb_keys_file, file_type, data_file_type;
type audio_data_file, file_type, data_file_type;
type audiohal_data_file, file_type, data_file_type;
type audioserver_data_file, file_type, data_file_type;
type bluetooth_data_file, file_type, data_file_type;
type bluetooth_logs_data_file, file_type, data_file_type;
type bootstat_data_file, file_type, data_file_type;
type boottrace_data_file, file_type, data_file_type;
type camera_data_file, file_type, data_file_type;
type gatekeeper_data_file, file_type, data_file_type;
type incident_data_file, file_type, data_file_type;
type keychain_data_file, file_type, data_file_type;
type keystore_data_file, file_type, data_file_type;
type media_data_file, file_type, data_file_type;
type media_rw_data_file, file_type, data_file_type, mlstrustedobject;
type misc_user_data_file, file_type, data_file_type;
type net_data_file, file_type, data_file_type;
type nfc_data_file, file_type, data_file_type;
type radio_data_file, file_type, data_file_type, mlstrustedobject;
type reboot_data_file, file_type, data_file_type;
type recovery_data_file, file_type, data_file_type;
type shared_relro_file, file_type, data_file_type;
type systemkeys_data_file, file_type, data_file_type;
type vpn_data_file, file_type, data_file_type;
type wifi_data_file, file_type, data_file_type;
type zoneinfo_data_file, file_type, data_file_type;
type vold_data_file, file_type, data_file_type;
type perfprofd_data_file, file_type, data_file_type, mlstrustedobject;
# /data/misc/trace for method traces on userdebug / eng builds
type method_trace_data_file, file_type, data_file_type, mlstrustedobject;

# /data/data subdirectories - app sandboxes
type app_data_file, file_type, data_file_type;
# /data/data subdirectory for system UID apps.
type system_app_data_file, file_type, data_file_type, mlstrustedobject;
# Compatibility with type name used in Android 4.3 and 4.4.
# Default type for anything under /cache
type cache_file, file_type, mlstrustedobject;
# Type for /cache/backup_stage/* (fd interchange with apps)
type cache_backup_file, file_type, mlstrustedobject;
# type for anything under /cache/backup (local transport storage)
type cache_private_backup_file, file_type;
# Type for anything under /cache/recovery
type cache_recovery_file, file_type, mlstrustedobject;
# Default type for anything under /efs
type efs_file, file_type;
# Type for wallpaper file.
type wallpaper_file, file_type, data_file_type, mlstrustedobject;
# Type for shortcut manager icon file.
type shortcut_manager_icons, file_type, data_file_type, mlstrustedobject;
# Type for user icon file.
type icon_file, file_type, data_file_type;
# /mnt/asec
type asec_apk_file, file_type, data_file_type, mlstrustedobject;
# Elements of asec files (/mnt/asec) that are world readable
type asec_public_file, file_type, data_file_type;
# /data/app-asec
type asec_image_file, file_type, data_file_type;
# /data/backup and /data/secure/backup
type backup_data_file, file_type, data_file_type, mlstrustedobject;
# All devices have bluetooth efs files. But they
# vary per device, so this type is used in per
# device policy
type bluetooth_efs_file, file_type;
# Type for fingerprint template file
type fingerprintd_data_file, file_type, data_file_type;
# Type for appfuse file.
type app_fuse_file, file_type, data_file_type, mlstrustedobject;

# Socket types
type adbd_socket, file_type;
type bluetooth_socket, file_type;
type dnsproxyd_socket, file_type, mlstrustedobject;
type dumpstate_socket, file_type;
type fwmarkd_socket, file_type, mlstrustedobject;
type lmkd_socket, file_type;
type logd_socket, file_type, mlstrustedobject;
type logdr_socket, file_type, mlstrustedobject;
type logdw_socket, file_type, mlstrustedobject;
type mdns_socket, file_type;
type mdnsd_socket, file_type, mlstrustedobject;
type misc_logd_file, file_type;
type mtpd_socket, file_type;
type netd_socket, file_type;
type pdx_socket, file_type, mlstrustedobject;
type property_socket, file_type, mlstrustedobject;
type racoon_socket, file_type;
type rild_socket, file_type;
type rild_debug_socket, file_type;
type system_wpa_socket, file_type;
type system_ndebug_socket, file_type;
type tombstoned_crash_socket, file_type, mlstrustedobject;
type tombstoned_intercept_socket, file_type;
type uncrypt_socket, file_type;
type vold_socket, file_type;
type webview_zygote_socket, file_type;
type wpa_socket, file_type;
# hostapd control interface.
type hostapd_socket, file_type;
type zygote_socket, file_type;
type sap_uim_socket, file_type;
# UART (for GPS) control proc file
type gps_control, file_type;

# property_contexts file
type property_contexts, file_type;

# Allow files to be created in their appropriate filesystems.
allow fs_type self:filesystem associate;
allow sysfs_type sysfs:filesystem associate;
allow debugfs_type { debugfs debugfs_tracing }:filesystem associate;
allow file_type labeledfs:filesystem associate;
allow file_type tmpfs:filesystem associate;
allow file_type rootfs:filesystem associate;
allow dev_type tmpfs:filesystem associate;
allow app_fuse_file app_fusefs:filesystem associate;
allow postinstall_file self:filesystem associate;

# It's a bug to assign the file_type attribute and fs_type attribute
# to any type. Do not allow it.
#
# For example, the following is a bug:
#   type apk_data_file, file_type, data_file_type, fs_type;
# Should be:
#   type apk_data_file, file_type, data_file_type;
neverallow fs_type file_type:filesystem associate;
#line 1 "system/sepolicy/public/fingerprintd.te"
type fingerprintd, domain, domain_deprecated;
type fingerprintd_exec, exec_type, file_type;


#line 4
# Call the servicemanager and transfer references to it.
#line 4
allow fingerprintd servicemanager:binder { call transfer };
#line 4
# servicemanager performs getpidcon on clients.
#line 4
allow servicemanager fingerprintd:dir search;
#line 4
allow servicemanager fingerprintd:file { read open };
#line 4
allow servicemanager fingerprintd:process getattr;
#line 4
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 4
# all domains in domain.te.
#line 4


# Scan through /system/lib64/hw looking for installed HALs
allow fingerprintd system_file:dir { open getattr read search ioctl lock };

# need to find KeyStore and add self

#line 10
  allow fingerprintd fingerprintd_service:service_manager { add find };
#line 10
  neverallow { domain -fingerprintd } fingerprintd_service:service_manager add;
#line 10


# allow HAL module to read dir contents
allow fingerprintd fingerprintd_data_file:file { { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } };

# allow HAL module to read/write/unlink contents of this dir
allow fingerprintd fingerprintd_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };

# Need to add auth tokens to KeyStore

#line 19
  allow keystore fingerprintd:dir search;
#line 19
  allow keystore fingerprintd:file { read open };
#line 19
  allow keystore fingerprintd:process getattr;
#line 19
  allow fingerprintd keystore_service:service_manager find;
#line 19
  
#line 19
# Call the server domain and optionally transfer references to it.
#line 19
allow fingerprintd keystore:binder { call transfer };
#line 19
# Allow the serverdomain to transfer references to the client on the reply.
#line 19
allow keystore fingerprintd:binder transfer;
#line 19
# Receive and use open files from the server.
#line 19
allow fingerprintd keystore:fd use;
#line 19

#line 19

allow fingerprintd keystore:keystore_key { add_auth };

# For permissions checking

#line 23
# Call the server domain and optionally transfer references to it.
#line 23
allow fingerprintd system_server:binder { call transfer };
#line 23
# Allow the serverdomain to transfer references to the client on the reply.
#line 23
allow system_server fingerprintd:binder transfer;
#line 23
# Receive and use open files from the server.
#line 23
allow fingerprintd system_server:fd use;
#line 23
;
allow fingerprintd permission_service:service_manager find;


#line 26
allow fingerprintd cgroup:dir { open getattr read search ioctl lock };
#line 26
allow fingerprintd cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 26


#line 27
allow fingerprintd sysfs_type:dir { open getattr read search ioctl lock };
#line 27
allow fingerprintd sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 27

allow fingerprintd ion_device:chr_file { getattr open read ioctl lock };
#line 1 "system/sepolicy/public/fsck.te"
# Any fsck program run by init
type fsck, domain, domain_deprecated;
type fsck_exec, exec_type, file_type;

# /dev/__null__ created by init prior to policy load,
# open fd inherited by fsck.
allow fsck tmpfs:chr_file { read write ioctl };

# Inherit and use pty created by android_fork_execvp_ext().
allow fsck devpts:chr_file { read write ioctl getattr };

# Allow stdin/out back to vold
allow fsck vold:fd use;
allow fsck vold:fifo_file { read write getattr };

# Run fsck on certain block devices
allow fsck block_device:dir search;
allow fsck userdata_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };
allow fsck cache_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };
allow fsck dm_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# To determine if it is safe to run fsck on a filesystem, e2fsck
# must first determine if the filesystem is mounted. To do that,
# e2fsck scans through /proc/mounts and collects all the mounted
# block devices. With that information, it runs stat() on each block
# device, comparing the major and minor numbers to the filesystem
# passed in on the command line. If there is a match, then the filesystem
# is currently mounted and running fsck is dangerous.
# Allow stat access to all block devices so that fsck can compare
# major/minor values.
allow fsck dev_type:blk_file getattr;


#line 33
allow fsck proc:dir { open getattr read search ioctl lock };
#line 33
allow fsck proc:{ file lnk_file } { getattr open read ioctl lock };
#line 33

allow fsck rootfs:dir { open getattr read search ioctl lock };

###
### neverallow rules
###

# fsck should never be run on these block devices
neverallow fsck {
  boot_block_device
  frp_block_device
  metadata_block_device
  recovery_block_device
  root_block_device
  swap_block_device
  system_block_device
  vold_device
}:blk_file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };

# Only allow entry from init or vold via fsck binaries
neverallow { domain -init -vold } fsck:process transition;
neverallow * fsck:process dyntransition;
neverallow fsck { file_type fs_type -fsck_exec }:file entrypoint;
#line 1 "system/sepolicy/public/fsck_untrusted.te"
# Any fsck program run on untrusted block devices
type fsck_untrusted, domain, domain_deprecated;

# Inherit and use pty created by android_fork_execvp_ext().
allow fsck_untrusted devpts:chr_file { read write ioctl getattr };

# Allow stdin/out back to vold
allow fsck_untrusted vold:fd use;
allow fsck_untrusted vold:fifo_file { read write getattr };

# Run fsck on vold block devices
allow fsck_untrusted block_device:dir search;
allow fsck_untrusted vold_device:blk_file { { getattr open read ioctl lock } { open append write lock } };


#line 15
allow fsck_untrusted proc:dir { open getattr read search ioctl lock };
#line 15
allow fsck_untrusted proc:{ file lnk_file } { getattr open read ioctl lock };
#line 15


# To determine if it is safe to run fsck on a filesystem, e2fsck
# must first determine if the filesystem is mounted. To do that,
# e2fsck scans through /proc/mounts and collects all the mounted
# block devices. With that information, it runs stat() on each block
# device, comparing the major and minor numbers to the filesystem
# passed in on the command line. If there is a match, then the filesystem
# is currently mounted and running fsck is dangerous.
# Allow stat access to all block devices so that fsck can compare
# major/minor values.
allow fsck_untrusted dev_type:blk_file getattr;

###
### neverallow rules
###

# Untrusted fsck should never be run on block devices holding sensitive data
neverallow fsck_untrusted {
  boot_block_device
  frp_block_device
  metadata_block_device
  recovery_block_device
  root_block_device
  swap_block_device
  system_block_device
  userdata_block_device
  cache_block_device
  dm_device
}:blk_file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };

# Only allow entry from vold via fsck binaries
neverallow { domain -vold } fsck_untrusted:process transition;
neverallow * fsck_untrusted:process dyntransition;
neverallow fsck_untrusted { file_type fs_type -fsck_exec }:file entrypoint;
#line 1 "system/sepolicy/public/gatekeeperd.te"
type gatekeeperd, domain;
type gatekeeperd_exec, exec_type, file_type;

# gatekeeperd

#line 5
typeattribute gatekeeperd binderservicedomain;
#line 5


#line 6
# Call the servicemanager and transfer references to it.
#line 6
allow gatekeeperd servicemanager:binder { call transfer };
#line 6
# servicemanager performs getpidcon on clients.
#line 6
allow servicemanager gatekeeperd:dir search;
#line 6
allow servicemanager gatekeeperd:file { read open };
#line 6
allow servicemanager gatekeeperd:process getattr;
#line 6
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 6
# all domains in domain.te.
#line 6


### Rules needed when Gatekeeper HAL runs inside gatekeeperd process.
### These rules should eventually be granted only when needed.
allow gatekeeperd tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow gatekeeperd ion_device:chr_file { getattr open read ioctl lock };
# Load HAL implementation
allow gatekeeperd system_file:dir { open getattr read search ioctl lock };
###

### Rules needed when Gatekeeper HAL runs outside of gatekeeperd process.
### These rules should eventually be granted only when needed.

#line 18
typeattribute gatekeeperd halclientdomain;
#line 18
typeattribute gatekeeperd hal_gatekeeper_client;
#line 18

#line 18
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 18
# once we know at build time whether a HAL is going to run in
#line 18
# passthrough or binderized mode.
#line 18
typeattribute gatekeeperd hal_gatekeeper;
#line 18
# Find passthrough HAL implementations
#line 18
allow hal_gatekeeper system_file:dir { open getattr read search ioctl lock };
#line 18

###

# need to find KeyStore and add self

#line 22
  allow gatekeeperd gatekeeper_service:service_manager { add find };
#line 22
  neverallow { domain -gatekeeperd } gatekeeper_service:service_manager add;
#line 22


# Need to add auth tokens to KeyStore

#line 25
  allow keystore gatekeeperd:dir search;
#line 25
  allow keystore gatekeeperd:file { read open };
#line 25
  allow keystore gatekeeperd:process getattr;
#line 25
  allow gatekeeperd keystore_service:service_manager find;
#line 25
  
#line 25
# Call the server domain and optionally transfer references to it.
#line 25
allow gatekeeperd keystore:binder { call transfer };
#line 25
# Allow the serverdomain to transfer references to the client on the reply.
#line 25
allow keystore gatekeeperd:binder transfer;
#line 25
# Receive and use open files from the server.
#line 25
allow gatekeeperd keystore:fd use;
#line 25

#line 25

allow gatekeeperd keystore:keystore_key { add_auth };

# For permissions checking
allow gatekeeperd system_server:binder call;
allow gatekeeperd permission_service:service_manager find;

# For parent user ID lookup
allow gatekeeperd user_service:service_manager find;

# for SID file access
allow gatekeeperd gatekeeper_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow gatekeeperd gatekeeper_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# For hardware properties retrieval
allow gatekeeperd hardware_properties_service:service_manager find;


#line 42
allow gatekeeperd cgroup:dir { open getattr read search ioctl lock };
#line 42
allow gatekeeperd cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 42

#line 1 "system/sepolicy/public/hal_audio.te"
# HwBinder IPC from client to server, and callbacks

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_audio_client hal_audio_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow hal_audio_server hal_audio_client:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_audio_client hal_audio_server:fd use;
#line 2


#line 3
# Call the server domain and optionally transfer references to it.
#line 3
allow hal_audio_server hal_audio_client:binder { call transfer };
#line 3
# Allow the serverdomain to transfer references to the client on the reply.
#line 3
allow hal_audio_client hal_audio_server:binder transfer;
#line 3
# Receive and use open files from the server.
#line 3
allow hal_audio_server hal_audio_client:fd use;
#line 3


# Both client and the server need to use hwallocator

#line 6
# Call into the allocator hal
#line 6

#line 6
# Call the server domain and optionally transfer references to it.
#line 6
allow hal_audio_client hal_allocator_server:binder { call transfer };
#line 6
# Allow the serverdomain to transfer references to the client on the reply.
#line 6
allow hal_allocator_server hal_audio_client:binder transfer;
#line 6
# Receive and use open files from the server.
#line 6
allow hal_audio_client hal_allocator_server:fd use;
#line 6
;
#line 6


#line 7
# Call into the allocator hal
#line 7

#line 7
# Call the server domain and optionally transfer references to it.
#line 7
allow hal_audio_server hal_allocator_server:binder { call transfer };
#line 7
# Allow the serverdomain to transfer references to the client on the reply.
#line 7
allow hal_allocator_server hal_audio_server:binder transfer;
#line 7
# Receive and use open files from the server.
#line 7
allow hal_audio_server hal_allocator_server:fd use;
#line 7
;
#line 7


allow hal_audio ion_device:chr_file { getattr open read ioctl lock };

allow hal_audio system_file:dir { open read };


#line 13
  # used for pcm capture for debug.
#line 13
  allow hal_audio audiohal_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 13
  allow hal_audio audiohal_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 17



#line 19
allow hal_audio proc:dir { open getattr read search ioctl lock };
#line 19
allow hal_audio proc:{ file lnk_file } { getattr open read ioctl lock };
#line 19

allow hal_audio audio_device:dir { open getattr read search ioctl lock };
allow hal_audio audio_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Needed to provide debug dump output via dumpsys' pipes.
allow hal_audio shell:fd use;
allow hal_audio shell:fifo_file write;

# Needed on some devices for playing audio on paired BT device,
# but seems appropriate for all devices.

#line 29

#line 29

#line 29
allow hal_audio bluetooth_socket:sock_file write;
#line 29
allow hal_audio bluetooth:unix_stream_socket connectto;
#line 29

#line 29


###
### neverallow rules
###

# Should never execute any executable without a domain transition
neverallow hal_audio { file_type fs_type }:file execute_no_trans;

# Should never need network access.
# Disallow network sockets.
neverallow hal_audio domain:{ tcp_socket udp_socket rawip_socket } *;

# Only audio HAL may directly access the audio hardware
neverallow { halserverdomain -hal_audio_server } audio_device:chr_file *;
#line 1 "system/sepolicy/public/hal_bluetooth.te"
# HwBinder IPC from clients into server, and callbacks

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_bluetooth_client hal_bluetooth_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow hal_bluetooth_server hal_bluetooth_client:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_bluetooth_client hal_bluetooth_server:fd use;
#line 2


#line 3
# Call the server domain and optionally transfer references to it.
#line 3
allow hal_bluetooth_server hal_bluetooth_client:binder { call transfer };
#line 3
# Allow the serverdomain to transfer references to the client on the reply.
#line 3
allow hal_bluetooth_client hal_bluetooth_server:binder transfer;
#line 3
# Receive and use open files from the server.
#line 3
allow hal_bluetooth_server hal_bluetooth_client:fd use;
#line 3



#line 5
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 5
allow hal_bluetooth sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 5
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 5
allow hal_bluetooth self:capability2 block_suspend;
#line 5
;

# The HAL toggles rfkill to power the chip off/on.
allow hal_bluetooth self:capability net_admin;

# bluetooth factory file accesses.

#line 11
allow hal_bluetooth bluetooth_efs_file:dir { open getattr read search ioctl lock };
#line 11
allow hal_bluetooth bluetooth_efs_file:{ file lnk_file } { getattr open read ioctl lock };
#line 11


allow hal_bluetooth { uhid_device hci_attach_dev }:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Access to config files to look for a Bluetooth address

#line 16
allow hal_bluetooth bluetooth_data_file:dir { open getattr read search ioctl lock };
#line 16
allow hal_bluetooth bluetooth_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 16


# sysfs access.

#line 19
allow hal_bluetooth sysfs_type:dir { open getattr read search ioctl lock };
#line 19
allow hal_bluetooth sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 19

allow hal_bluetooth sysfs_bluetooth_writable:file { { getattr open read ioctl lock } { open append write lock } };
allow hal_bluetooth self:capability2 wake_alarm;

# Allow write access to bluetooth-specific properties

#line 24

#line 24
allow hal_bluetooth property_socket:sock_file write;
#line 24
allow hal_bluetooth init:unix_stream_socket connectto;
#line 24

#line 24
allow hal_bluetooth bluetooth_prop:property_service set;
#line 24

#line 24
allow hal_bluetooth bluetooth_prop:file { getattr open read ioctl lock };
#line 24

#line 24


# /proc access (bluesleep etc.).
allow hal_bluetooth proc_bluetooth_writable:file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "system/sepolicy/public/hal_bootctl.te"
# HwBinder IPC from client to server, and callbacks

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_bootctl_client hal_bootctl_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow hal_bootctl_server hal_bootctl_client:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_bootctl_client hal_bootctl_server:fd use;
#line 2


#line 3
# Call the server domain and optionally transfer references to it.
#line 3
allow hal_bootctl_server hal_bootctl_client:binder { call transfer };
#line 3
# Allow the serverdomain to transfer references to the client on the reply.
#line 3
allow hal_bootctl_client hal_bootctl_server:binder transfer;
#line 3
# Receive and use open files from the server.
#line 3
allow hal_bootctl_server hal_bootctl_client:fd use;
#line 3

#line 1 "system/sepolicy/public/hal_camera.te"
# HwBinder IPC from clients to server and callbacks

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_camera_client hal_camera_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow hal_camera_server hal_camera_client:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_camera_client hal_camera_server:fd use;
#line 2


#line 3
# Call the server domain and optionally transfer references to it.
#line 3
allow hal_camera_server hal_camera_client:binder { call transfer };
#line 3
# Allow the serverdomain to transfer references to the client on the reply.
#line 3
allow hal_camera_client hal_camera_server:binder transfer;
#line 3
# Receive and use open files from the server.
#line 3
allow hal_camera_server hal_camera_client:fd use;
#line 3


# access /data/misc/camera
allow hal_camera camera_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow hal_camera camera_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

allow hal_camera video_device:dir { open getattr read search ioctl lock };
allow hal_camera video_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow hal_camera camera_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow hal_camera ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
# Both the client and the server need to use the graphics allocator
allow { hal_camera_client hal_camera_server } hal_graphics_allocator:fd use;

# Allow hal_camera to use fd from app,gralloc,and ashmem HAL
allow hal_camera { appdomain -isolated_app }:fd use;
allow hal_camera surfaceflinger:fd use;
allow hal_camera hal_allocator_server:fd use;

###
### neverallow rules
###

# hal_camera should never execute any executable without a
# domain transition
neverallow hal_camera { file_type fs_type }:file execute_no_trans;

# hal_camera should never need network access. Disallow network sockets.
neverallow hal_camera domain:{ tcp_socket udp_socket rawip_socket } *;

# Only camera HAL may directly access the camera and video hardware
neverallow { halserverdomain -hal_camera_server } camera_device:chr_file *;
neverallow { halserverdomain -hal_camera_server } video_device:chr_file *;
#line 1 "system/sepolicy/public/hal_contexthub.te"
# call into system_server process (callbacks)

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_contexthub system_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow system_server hal_contexthub:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_contexthub system_server:fd use;
#line 2

#line 1 "system/sepolicy/public/hal_drm.te"
# HwBinder IPC from client to server, and callbacks

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_drm_client hal_drm_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow hal_drm_server hal_drm_client:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_drm_client hal_drm_server:fd use;
#line 2


#line 3
# Call the server domain and optionally transfer references to it.
#line 3
allow hal_drm_server hal_drm_client:binder { call transfer };
#line 3
# Allow the serverdomain to transfer references to the client on the reply.
#line 3
allow hal_drm_client hal_drm_server:binder transfer;
#line 3
# Receive and use open files from the server.
#line 3
allow hal_drm_server hal_drm_client:fd use;
#line 3


# Required by Widevine DRM (b/22990512)
allow hal_drm self:process execmem;

# Permit reading device's serial number from system properties

#line 9
allow hal_drm serialno_prop:file { getattr open read ioctl lock };
#line 9


# System file accesses
allow hal_drm system_file:dir { open getattr read search ioctl lock };
allow hal_drm system_file:file { getattr open read ioctl lock };
allow hal_drm system_file:lnk_file { getattr open read ioctl lock };

# Read files already opened under /data
allow hal_drm system_data_file:dir { search getattr };
allow hal_drm system_data_file:file { getattr read };
allow hal_drm system_data_file:lnk_file { getattr open read ioctl lock };

# Read access to pseudo filesystems

#line 22
allow hal_drm cgroup:dir { open getattr read search ioctl lock };
#line 22
allow hal_drm cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 22

allow hal_drm cgroup:dir { search write };
allow hal_drm cgroup:file { open append write lock };

# Allow access to ion memory allocation device
allow hal_drm ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow hal_drm hal_graphics_allocator:fd use;

# Allow access to app_data and media_data_files
allow hal_drm media_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow hal_drm media_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow hal_drm media_data_file:file { getattr read };

allow hal_drm sysfs:file { getattr open read ioctl lock };

# Connect to tee service.
allow hal_drm tee:unix_stream_socket connectto;
allow hal_drm tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# only allow unprivileged socket ioctl commands
allowxperm hal_drm self:{ rawip_socket tcp_socket udp_socket }
  ioctl { 
#line 43
{
#line 43
# Socket ioctls for gathering information about the interface
#line 43
0x00008906 0x00008907
#line 43
0x00008910 0x00008912 0x00008913 0x00008915 0x00008917 0x00008919
#line 43
0x0000891b 0x00008921 0x00008933 0x00008938 0x00008942
#line 43
# Wireless extension ioctls. Primarily get functions.
#line 43
0x00008b01 0x00008b05 0x00008b07 0x00008b09 0x00008b0b 0x00008b0d
#line 43
0x00008b0f 0x00008b11 0x00008b12 0x00008b13 0x00008b21 0x00008b23
#line 43
0x00008b25 0x00008b27 0x00008b29 0x00008b2d
#line 43
} {
#line 43
  0x00005411 0x00005451 0x00005401 0x00005402 0x00005413 0x00005414 0x0000540e 0x00005403
#line 43
  0x0000540b 0x00005410 0x0000540f
#line 43
} };

###
### neverallow rules
###

# hal_drm should never execute any executable without a
# domain transition
neverallow hal_drm { file_type fs_type }:file execute_no_trans;

# do not allow privileged socket ioctl commands
neverallowxperm hal_drm domain:{ rawip_socket tcp_socket udp_socket } ioctl 
#line 54
{
#line 54
# qualcomm rmnet ioctls
#line 54
0x00006900 0x00006902
#line 54
# socket ioctls
#line 54
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 54
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 54
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 54
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 54
0x00008934 0x00008935 0x00008936 0x00008937 0x00008939 0x00008940 0x00008941
#line 54
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 54
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 54
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 54
0x00008991 0x00008992 0x00008993 0x00008994
#line 54
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 54
# device and protocol specific ioctls
#line 54
0x000089f0-0x000089ff
#line 54
0x000089e0-0x000089ef
#line 54
# Wireless extension ioctls
#line 54
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 54
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 54
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 54
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 54
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 54
0x00008b34 0x00008b35 0x00008b36
#line 54
# Dev private ioctl i.e. hardware specific ioctls
#line 54
0x00008be0-0x00008bff
#line 54
};
#line 1 "system/sepolicy/public/hal_dumpstate.te"
# HwBinder IPC from client to server, and callbacks

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_dumpstate_client hal_dumpstate_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow hal_dumpstate_server hal_dumpstate_client:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_dumpstate_client hal_dumpstate_server:fd use;
#line 2


#line 3
# Call the server domain and optionally transfer references to it.
#line 3
allow hal_dumpstate_server hal_dumpstate_client:binder { call transfer };
#line 3
# Allow the serverdomain to transfer references to the client on the reply.
#line 3
allow hal_dumpstate_client hal_dumpstate_server:binder transfer;
#line 3
# Receive and use open files from the server.
#line 3
allow hal_dumpstate_server hal_dumpstate_client:fd use;
#line 3


# write bug reports in /data/data/com.android.shell/files/bugreports/bugreport
allow hal_dumpstate shell_data_file:file write;
# allow reading /proc/interrupts for all hal impls
allow hal_dumpstate proc_interrupts:file { getattr open read ioctl lock };
#line 1 "system/sepolicy/public/hal_fingerprint.te"
# HwBinder IPC from client to server, and callbacks

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_fingerprint_client hal_fingerprint_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow hal_fingerprint_server hal_fingerprint_client:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_fingerprint_client hal_fingerprint_server:fd use;
#line 2


#line 3
# Call the server domain and optionally transfer references to it.
#line 3
allow hal_fingerprint_server hal_fingerprint_client:binder { call transfer };
#line 3
# Allow the serverdomain to transfer references to the client on the reply.
#line 3
allow hal_fingerprint_client hal_fingerprint_server:binder transfer;
#line 3
# Receive and use open files from the server.
#line 3
allow hal_fingerprint_server hal_fingerprint_client:fd use;
#line 3


# allow HAL module to read dir contents
allow hal_fingerprint fingerprintd_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# allow HAL module to read/write/unlink contents of this dir
allow hal_fingerprint fingerprintd_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };

# For memory allocation
allow hal_fingerprint ion_device:chr_file { getattr open read ioctl lock };


#line 14
allow hal_fingerprint cgroup:dir { open getattr read search ioctl lock };
#line 14
allow hal_fingerprint cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 14


#line 15
allow hal_fingerprint sysfs:dir { open getattr read search ioctl lock };
#line 15
allow hal_fingerprint sysfs:{ file lnk_file } { getattr open read ioctl lock };
#line 15

#line 1 "system/sepolicy/public/hal_gatekeeper.te"

#line 1
# Call the server domain and optionally transfer references to it.
#line 1
allow hal_gatekeeper_client hal_gatekeeper_server:binder { call transfer };
#line 1
# Allow the serverdomain to transfer references to the client on the reply.
#line 1
allow hal_gatekeeper_server hal_gatekeeper_client:binder transfer;
#line 1
# Receive and use open files from the server.
#line 1
allow hal_gatekeeper_client hal_gatekeeper_server:fd use;
#line 1


# TEE access.
allow hal_gatekeeper tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow hal_gatekeeper ion_device:chr_file { getattr open read ioctl lock };
#line 1 "system/sepolicy/public/hal_gnss.te"

#line 1
# Call the server domain and optionally transfer references to it.
#line 1
allow hal_gnss system_server:binder { call transfer };
#line 1
# Allow the serverdomain to transfer references to the client on the reply.
#line 1
allow system_server hal_gnss:binder transfer;
#line 1
# Receive and use open files from the server.
#line 1
allow hal_gnss system_server:fd use;
#line 1

#line 1 "system/sepolicy/public/hal_graphics_allocator.te"
# HwBinder IPC from client to server

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_graphics_allocator_client hal_graphics_allocator_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow hal_graphics_allocator_server hal_graphics_allocator_client:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_graphics_allocator_client hal_graphics_allocator_server:fd use;
#line 2


# GPU device access
allow hal_graphics_allocator gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow hal_graphics_allocator ion_device:chr_file { getattr open read ioctl lock };
#line 1 "system/sepolicy/public/hal_graphics_composer.te"
# IComposerCallback

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_graphics_composer surfaceflinger:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow surfaceflinger hal_graphics_composer:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_graphics_composer surfaceflinger:fd use;
#line 2


# GPU device access
allow hal_graphics_composer gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow hal_graphics_composer ion_device:chr_file { getattr open read ioctl lock };
allow hal_graphics_composer hal_graphics_allocator:fd use;

# Access /dev/graphics/fb0.
allow hal_graphics_composer graphics_device:dir search;
allow hal_graphics_composer graphics_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Fences
allow hal_graphics_composer system_server:fd use;
allow hal_graphics_composer bootanim:fd use;
allow hal_graphics_composer appdomain:fd use;

# allow self to set SCHED_FIFO
allow hal_graphics_composer self:capability sys_nice;
#line 1 "system/sepolicy/public/hal_health.te"
# call into healthd for callbacks

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_health healthd:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow healthd hal_health:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_health healthd:fd use;
#line 2


# Read access to system files for HALs in
# /{system,vendor,odm}/lib[64]/hw/ in order
# to be able to open the hal implementation .so files

#line 7
allow hal_health system_file:dir { open getattr read search ioctl lock };
#line 7
allow hal_health system_file:{ file lnk_file } { getattr open read ioctl lock };
#line 7

#line 1 "system/sepolicy/public/hal_ir.te"
# call into system_server process (callbacks)

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_ir system_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow system_server hal_ir:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_ir system_server:fd use;
#line 2

#line 1 "system/sepolicy/public/hal_keymaster.te"
# HwBinder IPC from client to server

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_keymaster_client hal_keymaster_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow hal_keymaster_server hal_keymaster_client:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_keymaster_client hal_keymaster_server:fd use;
#line 2


allow hal_keymaster tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow hal_keymaster tee:unix_stream_socket connectto;

allow hal_keymaster ion_device:chr_file { getattr open read ioctl lock };
#line 1 "system/sepolicy/public/hal_light.te"
# call into system_server process (callbacks)

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_light system_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow system_server hal_light:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_light system_server:fd use;
#line 2


allow hal_light sysfs_leds:lnk_file read;
allow hal_light sysfs_leds:file { { getattr open read ioctl lock } { open append write lock } };
allow hal_light sysfs_leds:dir { open getattr read search ioctl lock };
#line 1 "system/sepolicy/public/hal_neverallows.te"
# only HALs responsible for network hardware should have privileged
# network capabilities
neverallow {
  halserverdomain
  -hal_bluetooth_server
  -hal_wifi_server
  -hal_wifi_supplicant_server
  -rild
} self:capability { net_admin net_raw };

# Unless a HAL's job is to manage network hardware, it should not be
# using network sockets.
neverallow {
  halserverdomain
  -hal_gnss # TODO b/36085168 b/35757613
  -hal_wifi_server
  -hal_wifi_supplicant_server
  -rild
} domain:{ tcp_socket udp_socket rawip_socket } *;

###
# HALs are defined as an attribute and so a given domain could hypothetically
# have multiple HALs in it (or even all of them) with the subsequent policy of
# the domain comprised of the union of all the HALs.
#
# This is a problem because
# 1) Security sensitive components should only be accessed by specific HALs.
# 2) hwbinder_call and the restrictions it provides cannot be reasoned about in
#    the platform.
# 3) The platform cannot reason about defense in depth if there are
#    monolithic domains etc.
#
# As an example, hal_keymaster and hal_gatekeeper can access the TEE and while
# its OK for them to share a process its not OK with them to share processes
# with other hals.
#
# The following neverallow rules, in conjuntion with CTS tests, assert that
# these security principles are adhered to.
#
# Do not allow a hal to exec another process without a domain transition.
# TODO remove exemptions.
neverallow {
  halserverdomain
  -hal_dumpstate_server
  -rild
} { file_type fs_type }:file execute_no_trans;
# Do not allow a process other than init to transition into a HAL domain.
neverallow { domain -init } halserverdomain:process transition;
# Only allow transitioning to a domain by running its executable. Do not
# allow transitioning into a HAL domain by use of seclabel in an
# init.*.rc script.
neverallow * halserverdomain:process dyntransition;
#line 1 "system/sepolicy/public/hal_nfc.te"
# HwBinder IPC from client to server, and callbacks

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_nfc_client hal_nfc_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow hal_nfc_server hal_nfc_client:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_nfc_client hal_nfc_server:fd use;
#line 2


#line 3
# Call the server domain and optionally transfer references to it.
#line 3
allow hal_nfc_server hal_nfc_client:binder { call transfer };
#line 3
# Allow the serverdomain to transfer references to the client on the reply.
#line 3
allow hal_nfc_client hal_nfc_server:binder transfer;
#line 3
# Receive and use open files from the server.
#line 3
allow hal_nfc_server hal_nfc_client:fd use;
#line 3


# Set NFC properties (used by bcm2079x HAL).

#line 6

#line 6
allow hal_nfc property_socket:sock_file write;
#line 6
allow hal_nfc init:unix_stream_socket connectto;
#line 6

#line 6
allow hal_nfc nfc_prop:property_service set;
#line 6

#line 6
allow hal_nfc nfc_prop:file { getattr open read ioctl lock };
#line 6

#line 6


# NFC device access.
allow hal_nfc nfc_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Data file accesses.
allow hal_nfc nfc_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow hal_nfc nfc_data_file:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 1 "system/sepolicy/public/hal_sensors.te"
# HwBinder IPC from client to server

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_sensors_client hal_sensors_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow hal_sensors_server hal_sensors_client:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_sensors_client hal_sensors_server:fd use;
#line 2


# Allow sensor hals to access ashmem memory allocated by apps
allow hal_sensors { appdomain -isolated_app }:fd use;
#line 1 "system/sepolicy/public/hal_telephony.te"
# Perform HwBinder IPC.

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_telephony radio:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow radio hal_telephony:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_telephony radio:fd use;
#line 2


#line 3
# Call the server domain and optionally transfer references to it.
#line 3
allow hal_telephony bluetooth:binder { call transfer };
#line 3
# Allow the serverdomain to transfer references to the client on the reply.
#line 3
allow bluetooth hal_telephony:binder transfer;
#line 3
# Receive and use open files from the server.
#line 3
allow hal_telephony bluetooth:fd use;
#line 3

#line 1 "system/sepolicy/public/hal_thermal.te"
# call into system_server process (callbacks)

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_thermal system_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow system_server hal_thermal:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_thermal system_server:fd use;
#line 2

#line 1 "system/sepolicy/public/hal_usb.te"
# call into system_server process (callbacks)

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_usb system_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow system_server hal_usb:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_usb system_server:fd use;
#line 2


allow hal_usb self:netlink_kobject_uevent_socket create;
allow hal_usb self:netlink_kobject_uevent_socket setopt;
allow hal_usb self:netlink_kobject_uevent_socket bind;
allow hal_usb self:netlink_kobject_uevent_socket read;
allow hal_usb sysfs:dir open;
allow hal_usb sysfs:dir read;
allow hal_usb sysfs:file read;
allow hal_usb sysfs:file open;
allow hal_usb sysfs:file write;
allow hal_usb sysfs:file getattr;

#line 1 "system/sepolicy/public/hal_vibrator.te"
# vibrator sysfs rw access
allow hal_vibrator sysfs_vibrator:file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "system/sepolicy/public/hal_vr.te"
# call into system_server process

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_vr system_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow system_server hal_vr:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_vr system_server:fd use;
#line 2

#line 1 "system/sepolicy/public/hal_wifi.te"
# HwBinder IPC from client to server, and callbacks

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_wifi_client hal_wifi_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow hal_wifi_server hal_wifi_client:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_wifi_client hal_wifi_server:fd use;
#line 2


#line 3
# Call the server domain and optionally transfer references to it.
#line 3
allow hal_wifi_server hal_wifi_client:binder { call transfer };
#line 3
# Allow the serverdomain to transfer references to the client on the reply.
#line 3
allow hal_wifi_client hal_wifi_server:binder transfer;
#line 3
# Receive and use open files from the server.
#line 3
allow hal_wifi_server hal_wifi_client:fd use;
#line 3



#line 5
allow hal_wifi proc_net:dir { open getattr read search ioctl lock };
#line 5
allow hal_wifi proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 5


#line 6
allow hal_wifi sysfs_type:dir { open getattr read search ioctl lock };
#line 6
allow hal_wifi sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 6



#line 8

#line 8
allow hal_wifi property_socket:sock_file write;
#line 8
allow hal_wifi init:unix_stream_socket connectto;
#line 8

#line 8
allow hal_wifi wifi_prop:property_service set;
#line 8

#line 8
allow hal_wifi wifi_prop:file { getattr open read ioctl lock };
#line 8

#line 8


# allow hal wifi set interfaces up and down
allow hal_wifi self:udp_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allowxperm hal_wifi self:udp_socket ioctl { 0x00008914 };

allow hal_wifi self:capability { net_admin net_raw };
# allow hal_wifi to speak to nl80211 in the kernel
allow hal_wifi self:netlink_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
# newer kernels (e.g. 4.4 but not 4.1) have a new class for sockets
allow hal_wifi self:netlink_generic_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
# hal_wifi writes firmware paths to this file.
allow hal_wifi sysfs_wlan_fwpath:file { { open append write lock } };
#line 1 "system/sepolicy/public/hal_wifi_supplicant.te"
# HwBinder IPC from client to server

#line 2
# Call the server domain and optionally transfer references to it.
#line 2
allow hal_wifi_supplicant_client hal_wifi_supplicant_server:binder { call transfer };
#line 2
# Allow the serverdomain to transfer references to the client on the reply.
#line 2
allow hal_wifi_supplicant_server hal_wifi_supplicant_client:binder transfer;
#line 2
# Receive and use open files from the server.
#line 2
allow hal_wifi_supplicant_client hal_wifi_supplicant_server:fd use;
#line 2


#line 3
# Call the server domain and optionally transfer references to it.
#line 3
allow hal_wifi_supplicant_server hal_wifi_supplicant_client:binder { call transfer };
#line 3
# Allow the serverdomain to transfer references to the client on the reply.
#line 3
allow hal_wifi_supplicant_client hal_wifi_supplicant_server:binder transfer;
#line 3
# Receive and use open files from the server.
#line 3
allow hal_wifi_supplicant_server hal_wifi_supplicant_client:fd use;
#line 3


# in addition to ioctls whitelisted for all domains, grant hal_wifi_supplicant priv_sock_ioctls.
allowxperm hal_wifi_supplicant self:udp_socket ioctl 
#line 6
{
#line 6
# qualcomm rmnet ioctls
#line 6
0x00006900 0x00006902
#line 6
# socket ioctls
#line 6
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 6
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 6
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 6
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 6
0x00008934 0x00008935 0x00008936 0x00008937 0x00008939 0x00008940 0x00008941
#line 6
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 6
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 6
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 6
0x00008991 0x00008992 0x00008993 0x00008994
#line 6
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 6
# device and protocol specific ioctls
#line 6
0x000089f0-0x000089ff
#line 6
0x000089e0-0x000089ef
#line 6
# Wireless extension ioctls
#line 6
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 6
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 6
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 6
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 6
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 6
0x00008b34 0x00008b35 0x00008b36
#line 6
# Dev private ioctl i.e. hardware specific ioctls
#line 6
0x00008be0-0x00008bff
#line 6
};


#line 8
allow hal_wifi_supplicant sysfs_type:dir { open getattr read search ioctl lock };
#line 8
allow hal_wifi_supplicant sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 8


#line 9
allow hal_wifi_supplicant proc_net:dir { open getattr read search ioctl lock };
#line 9
allow hal_wifi_supplicant proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 9


allow hal_wifi_supplicant kernel:system module_request;
allow hal_wifi_supplicant self:capability { setuid net_admin setgid net_raw };
allow hal_wifi_supplicant cgroup:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow hal_wifi_supplicant self:netlink_route_socket nlmsg_write;
allow hal_wifi_supplicant self:netlink_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow hal_wifi_supplicant self:netlink_generic_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow hal_wifi_supplicant self:packet_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
allowxperm hal_wifi_supplicant self:packet_socket ioctl { 
#line 18
{
#line 18
# Socket ioctls for gathering information about the interface
#line 18
0x00008906 0x00008907
#line 18
0x00008910 0x00008912 0x00008913 0x00008915 0x00008917 0x00008919
#line 18
0x0000891b 0x00008921 0x00008933 0x00008938 0x00008942
#line 18
# Wireless extension ioctls. Primarily get functions.
#line 18
0x00008b01 0x00008b05 0x00008b07 0x00008b09 0x00008b0b 0x00008b0d
#line 18
0x00008b0f 0x00008b11 0x00008b12 0x00008b13 0x00008b21 0x00008b23
#line 18
0x00008b25 0x00008b27 0x00008b29 0x00008b2d
#line 18
} 
#line 18
{
#line 18
# qualcomm rmnet ioctls
#line 18
0x00006900 0x00006902
#line 18
# socket ioctls
#line 18
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 18
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 18
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 18
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 18
0x00008934 0x00008935 0x00008936 0x00008937 0x00008939 0x00008940 0x00008941
#line 18
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 18
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 18
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 18
0x00008991 0x00008992 0x00008993 0x00008994
#line 18
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 18
# device and protocol specific ioctls
#line 18
0x000089f0-0x000089ff
#line 18
0x000089e0-0x000089ef
#line 18
# Wireless extension ioctls
#line 18
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 18
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 18
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 18
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 18
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 18
0x00008b34 0x00008b35 0x00008b36
#line 18
# Dev private ioctl i.e. hardware specific ioctls
#line 18
0x00008be0-0x00008bff
#line 18
} {
#line 18
  0x00005411 0x00005451 0x00005401 0x00005402 0x00005413 0x00005414 0x0000540e 0x00005403
#line 18
  0x0000540b 0x00005410 0x0000540f
#line 18
} };
allow hal_wifi_supplicant wifi_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow hal_wifi_supplicant wifi_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Create a socket for receiving info from wpa
allow hal_wifi_supplicant wpa_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow hal_wifi_supplicant wpa_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# TODO(b/34131400): Use hwbinder to access keystore.

#line 27
  allow keystore hal_wifi_supplicant:dir search;
#line 27
  allow keystore hal_wifi_supplicant:file { read open };
#line 27
  allow keystore hal_wifi_supplicant:process getattr;
#line 27
  allow hal_wifi_supplicant keystore_service:service_manager find;
#line 27
  
#line 27
# Call the server domain and optionally transfer references to it.
#line 27
allow hal_wifi_supplicant keystore:binder { call transfer };
#line 27
# Allow the serverdomain to transfer references to the client on the reply.
#line 27
allow keystore hal_wifi_supplicant:binder transfer;
#line 27
# Receive and use open files from the server.
#line 27
allow hal_wifi_supplicant keystore:fd use;
#line 27

#line 27


#line 28
# Call the servicemanager and transfer references to it.
#line 28
allow hal_wifi_supplicant servicemanager:binder { call transfer };
#line 28
# servicemanager performs getpidcon on clients.
#line 28
allow servicemanager hal_wifi_supplicant:dir search;
#line 28
allow servicemanager hal_wifi_supplicant:file { read open };
#line 28
allow servicemanager hal_wifi_supplicant:process getattr;
#line 28
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 28
# all domains in domain.te.
#line 28


# WPA (wifi) has a restricted set of permissions from the default.
allow hal_wifi_supplicant keystore:keystore_key {
    get
    sign
    verify
};

# Allow wpa_cli to work. wpa_cli creates a socket in
# /data/misc/wifi/sockets which hal_wifi_supplicant supplicant communicates with.

#line 39
  
#line 39
allow hal_wifi_supplicant wpa_socket:sock_file write;
#line 39
allow hal_wifi_supplicant su:unix_dgram_socket sendto;
#line 39

#line 41


###
### neverallow rules
###

# wpa_supplicant should not trust any data from sdcards
neverallow hal_wifi_supplicant_server sdcard_type:dir ~getattr;
neverallow hal_wifi_supplicant_server sdcard_type:file *;
#line 1 "system/sepolicy/public/healthd.te"
# healthd - battery/charger monitoring service daemon
type healthd, domain;
type healthd_exec, exec_type, file_type;

# Write to /dev/kmsg
allow healthd kmsg_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Read access to pseudo filesystems.

#line 9
allow healthd sysfs_type:dir { open getattr read search ioctl lock };
#line 9
allow healthd sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 9


#line 10
allow healthd rootfs:dir { open getattr read search ioctl lock };
#line 10
allow healthd rootfs:{ file lnk_file } { getattr open read ioctl lock };
#line 10


#line 11
allow healthd cgroup:dir { open getattr read search ioctl lock };
#line 11
allow healthd cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 11


# Read access to system files for passthrough HALs in
# /{system,vendor,odm}/lib[64]/hw/

#line 15
allow healthd system_file:dir { open getattr read search ioctl lock };
#line 15
allow healthd system_file:{ file lnk_file } { getattr open read ioctl lock };
#line 15


allow healthd self:capability { sys_tty_config };
allow healthd self:capability sys_boot;

allow healthd self:netlink_kobject_uevent_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };


#line 22
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 22
allow healthd sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 22
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 22
allow healthd self:capability2 block_suspend;
#line 22



#line 24
# Call the servicemanager and transfer references to it.
#line 24
allow healthd servicemanager:binder { call transfer };
#line 24
# servicemanager performs getpidcon on clients.
#line 24
allow servicemanager healthd:dir search;
#line 24
allow servicemanager healthd:file { read open };
#line 24
allow servicemanager healthd:process getattr;
#line 24
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 24
# all domains in domain.te.
#line 24


#line 25
typeattribute healthd binderservicedomain;
#line 25


#line 26
# Call the server domain and optionally transfer references to it.
#line 26
allow healthd system_server:binder { call transfer };
#line 26
# Allow the serverdomain to transfer references to the client on the reply.
#line 26
allow system_server healthd:binder transfer;
#line 26
# Receive and use open files from the server.
#line 26
allow healthd system_server:fd use;
#line 26


#line 27
# Call the server domain and optionally transfer references to it.
#line 27
allow healthd hwservicemanager:binder { call transfer };
#line 27
# Allow the serverdomain to transfer references to the client on the reply.
#line 27
allow hwservicemanager healthd:binder transfer;
#line 27
# Receive and use open files from the server.
#line 27
allow healthd hwservicemanager:fd use;
#line 27


#line 28
# Call the server domain and optionally transfer references to it.
#line 28
allow healthd hal_health:binder { call transfer };
#line 28
# Allow the serverdomain to transfer references to the client on the reply.
#line 28
allow hal_health healthd:binder transfer;
#line 28
# Receive and use open files from the server.
#line 28
allow healthd hal_health:fd use;
#line 28


#line 29
typeattribute healthd halclientdomain;
#line 29
typeattribute healthd hal_health_client;
#line 29

#line 29
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 29
# once we know at build time whether a HAL is going to run in
#line 29
# passthrough or binderized mode.
#line 29
typeattribute healthd hal_health;
#line 29
# Find passthrough HAL implementations
#line 29
allow hal_health system_file:dir { open getattr read search ioctl lock };
#line 29


# Write to state file.
# TODO:  Split into a separate type?
allow healthd sysfs:file write;

# TODO: added to match above sysfs rule. Remove me?
allow healthd sysfs_usb:file write;

allow healthd sysfs_batteryinfo:file { getattr open read ioctl lock };


#line 40
allow healthd sysfs_type:dir { open getattr read search ioctl lock };
#line 40
allow healthd sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 40


###
### healthd: charger mode
###

# Read /sys/fs/pstore/console-ramoops
# Don't worry about overly broad permissions for now, as there's
# only one file in /sys/fs/pstore
allow healthd pstorefs:dir { open getattr read search ioctl lock };
allow healthd pstorefs:file { getattr open read ioctl lock };

allow healthd graphics_device:dir { open getattr read search ioctl lock };
allow healthd graphics_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow healthd input_device:dir { open getattr read search ioctl lock };
allow healthd input_device:chr_file { getattr open read ioctl lock };
allow healthd tty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow healthd ashmem_device:chr_file execute;
allow healthd self:process execmem;
allow healthd proc_sysrq:file { { getattr open read ioctl lock } { open append write lock } };


#line 61
  allow healthd batteryproperties_service:service_manager { add find };
#line 61
  neverallow { domain -healthd } batteryproperties_service:service_manager add;
#line 61


# Healthd needs to tell init to continue the boot
# process when running in charger mode.

#line 65

#line 65
allow healthd property_socket:sock_file write;
#line 65
allow healthd init:unix_stream_socket connectto;
#line 65

#line 65
allow healthd system_prop:property_service set;
#line 65

#line 65
allow healthd system_prop:file { getattr open read ioctl lock };
#line 65

#line 65

#line 1 "system/sepolicy/public/hostapd.te"
# userspace wifi access points
type hostapd, domain;
type hostapd_exec, exec_type, file_type;



#line 6
typeattribute hostapd netdomain;
#line 6

allow hostapd self:capability { net_admin net_raw };

# hostapd learns about its network interface via sysfs.
allow hostapd sysfs:file { getattr open read ioctl lock };
# hostapd follows the /sys/class/net/wlan0 link to the PCI device.
allow hostapd sysfs:lnk_file { getattr open read ioctl lock };

# Allow hostapd to access /proc/net/psched
allow hostapd proc_net:file { getattr open read };

# Various socket permissions.
allowxperm hostapd self:udp_socket ioctl 
#line 18
{
#line 18
# qualcomm rmnet ioctls
#line 18
0x00006900 0x00006902
#line 18
# socket ioctls
#line 18
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 18
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 18
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 18
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 18
0x00008934 0x00008935 0x00008936 0x00008937 0x00008939 0x00008940 0x00008941
#line 18
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 18
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 18
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 18
0x00008991 0x00008992 0x00008993 0x00008994
#line 18
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 18
# device and protocol specific ioctls
#line 18
0x000089f0-0x000089ff
#line 18
0x000089e0-0x000089ef
#line 18
# Wireless extension ioctls
#line 18
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 18
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 18
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 18
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 18
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 18
0x00008b34 0x00008b35 0x00008b36
#line 18
# Dev private ioctl i.e. hardware specific ioctls
#line 18
0x00008be0-0x00008bff
#line 18
};
allow hostapd self:netlink_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow hostapd self:netlink_generic_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow hostapd self:packet_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow hostapd self:netlink_route_socket nlmsg_write;

# hostapd can read and write WiFi related data and configuration.
# For example, the entropy file is periodically updated.
allow hostapd wifi_data_file:file { { getattr open read ioctl lock } { open append write lock } };

#line 27
allow hostapd wifi_data_file:dir { open getattr read search ioctl lock };
#line 27
allow hostapd wifi_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 27


# hostapd wants to create the directory holding its control socket.
allow hostapd hostapd_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
# hostapd needs to create, bind to, read, and write its control socket.
allow hostapd hostapd_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 1 "system/sepolicy/public/hwservicemanager.te"
# hwservicemanager - the Binder context manager for HAL services
type hwservicemanager, domain, mlstrustedsubject;
type hwservicemanager_exec, exec_type, file_type;

# serving android.hidl.manager@1.0 and android.hidl.token@1.0
typeattribute hwservicemanager halserverdomain;

# Note that we do not use the binder_* macros here.
# hwservicemanager provides name service (aka context manager)
# for hwbinder.
# Additionally, it initiates binder IPC calls to
# clients who request service notifications. The permission
# to do this is granted in the hwbinder_use macro.
allow hwservicemanager self:binder set_context_mgr;


#line 16

#line 16
allow hwservicemanager property_socket:sock_file write;
#line 16
allow hwservicemanager init:unix_stream_socket connectto;
#line 16

#line 16
allow hwservicemanager hwservicemanager_prop:property_service set;
#line 16

#line 16
allow hwservicemanager hwservicemanager_prop:file { getattr open read ioctl lock };
#line 16

#line 16


# Scan through /system/lib64/hw looking for installed HALs
allow hwservicemanager system_file:dir { open getattr read search ioctl lock };

# TODO once hwservicemanager checks whether HALs are
# allowed to register a certain service, add policy here
# for allowing to check SELinux permissions.
#line 1 "system/sepolicy/public/idmap.te"
# idmap, when executed by installd
type idmap, domain;
type idmap_exec, exec_type, file_type;

# Use open file to /data/resource-cache file inherited from installd.
allow idmap installd:fd use;
allow idmap resourcecache_data_file:file { getattr read write };

# Open and read from target and overlay apk files passed by argument.
allow idmap apk_data_file:file { getattr open read ioctl lock };
allow idmap apk_data_file:dir search;
#line 1 "system/sepolicy/public/incident.te"
# The incident command is used to call into the incidentd service to
# take an incident report (binary, shared bugreport), download incident
# reports that have already been taken, and monitor for new ones.
# It doesn't do anything else.

# incident
type incident, domain;

#line 1 "system/sepolicy/public/incidentd.te"
# incidentd
type incidentd, domain;

#line 1 "system/sepolicy/public/init.te"
# init is its own domain.
type init, domain, mlstrustedsubject;

# The init domain is entered by execing init.
type init_exec, exec_type, file_type;

# /dev/__null__ node created by init.
allow init tmpfs:chr_file { create setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

#
# init direct restorecon calls.
#
# /dev/kmsg
allow init tmpfs:chr_file relabelfrom;
allow init kmsg_device:chr_file { write relabelto };
# /dev/__properties__
allow init properties_device:dir relabelto;
allow init properties_serial:file { write relabelto };
allow init property_type:file { { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } relabelto };
# /dev/event-log-tags
allow init device:file relabelfrom;
allow init runtime_event_log_tags_file:file { open write setattr relabelto };
# /dev/socket
allow init { device socket_device }:dir relabelto;
# /dev/random, /dev/urandom
allow init random_device:chr_file relabelto;
# /dev/device-mapper, /dev/block(/.*)?
allow init tmpfs:{ chr_file blk_file } relabelfrom;
allow init tmpfs:blk_file getattr;
allow init block_device:{ dir blk_file lnk_file } relabelto;
allow init dm_device:{ chr_file blk_file } relabelto;
allow init kernel:fd use;
# restorecon for early mount device symlinks
allow init tmpfs:lnk_file { getattr read relabelfrom };
allow init system_block_device:{ blk_file lnk_file } relabelto;

# setrlimit
allow init self:capability sys_resource;

# Remove /dev/.booting, created before initial policy load or restorecon /dev.
allow init tmpfs:file unlink;

# Access pty created for fsck.
allow init devpts:chr_file { read write open };

# Create /dev/fscklogs files.
allow init fscklogs:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access /dev/__null__ node created prior to initial policy load.
allow init tmpfs:chr_file write;

# Access /dev/console.
allow init console_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Access /dev/tty0.
allow init tty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Call mount(2).
allow init self:capability sys_admin;

# Create and mount on directories in /.
allow init rootfs:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow init { rootfs cache_file cgroup storage_file system_data_file system_file postinstall_mnt_dir }:dir mounton;

# Mount on /dev/usb-ffs/adb.
allow init device:dir mounton;

# Create and remove symlinks in /.
allow init rootfs:lnk_file { create unlink };

# Mount debugfs on /sys/kernel/debug.
allow init sysfs:dir mounton;

# Create cgroups mount points in tmpfs and mount cgroups on them.
allow init tmpfs:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow init tmpfs:dir mounton;
allow init cgroup:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };

#line 78
allow init cgroup:dir { open getattr read search ioctl lock };
#line 78
allow init cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 78

allow init cpuctl_device:dir { create mounton };

# /config
allow init configfs:dir mounton;
allow init configfs:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };

# Use tmpfs as /data, used for booting when /data is encrypted
allow init tmpfs:dir relabelfrom;

# Create directories under /dev/cpuctl after chowning it to system.
allow init self:capability dac_override;

# Set system clock.
allow init self:capability sys_time;

allow init self:capability { sys_rawio mknod };

# Mounting filesystems from block devices.
allow init dev_type:blk_file { getattr open read ioctl lock };

# Mounting filesystems.
# Only allow relabelto for types used in context= mount options,
# which should all be assigned the contextmount_type attribute.
# This can be done in device-specific policy via type or typeattribute
# declarations.
allow init fs_type:filesystem ~relabelto;
allow init unlabeled:filesystem ~relabelto;
allow init contextmount_type:filesystem relabelto;

# Allow read-only access to context= mounted filesystems.
allow init contextmount_type:dir { open getattr read search ioctl lock };
allow init contextmount_type:{ file lnk_file sock_file fifo_file } { getattr open read ioctl lock };

# restorecon /adb_keys or any other rootfs files and directories to a more
# specific type.
allow init rootfs:{ dir file } relabelfrom;

# mkdir, symlink, write, rm/rmdir, chown/chmod, restorecon/restorecon_recursive from init.rc files.
# chown/chmod require open+read+setattr required for open()+fchown/fchmod().
# system/core/init.rc requires at least cache_file and data_file_type.
# init.<board>.rc files often include device-specific types, so
# we just allow all file types except /system files here.
allow init self:capability { chown fowner fsetid };

allow init {
  file_type
  -app_data_file
  -exec_type
  -misc_logd_file
  -system_app_data_file
  -system_file
}:dir { create search getattr open read setattr ioctl };

allow init {
  file_type
  -app_data_file
  -exec_type
  -keystore_data_file
  -misc_logd_file
  -shell_data_file
  -system_app_data_file
  -system_file
  -vold_data_file
}:dir { write add_name remove_name rmdir relabelfrom };

allow init {
  file_type
  -app_data_file
  -runtime_event_log_tags_file
  -exec_type
  -keystore_data_file
  -misc_logd_file
  -shell_data_file
  -system_app_data_file
  -system_file
  -vold_data_file
}:file { create getattr open read write setattr relabelfrom unlink };

allow init {
  file_type
  -app_data_file
  -exec_type
  -keystore_data_file
  -misc_logd_file
  -shell_data_file
  -system_app_data_file
  -system_file
  -vold_data_file
}:{ sock_file fifo_file } { create getattr open read setattr relabelfrom unlink };

allow init {
  file_type
  -app_data_file
  -exec_type
  -keystore_data_file
  -misc_logd_file
  -shell_data_file
  -system_app_data_file
  -system_file
  -vold_data_file
}:lnk_file { create getattr setattr relabelfrom unlink };

allow init cache_file:lnk_file { getattr open read ioctl lock };

allow init { file_type -system_file -exec_type }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } relabelto;
allow init { sysfs debugfs debugfs_tracing }:{ dir file lnk_file } { getattr relabelfrom };
allow init { sysfs_type debugfs_type }:{ dir file lnk_file } { relabelto getattr };
allow init dev_type:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow init dev_type:lnk_file create;

# Disable tracing by writing to /sys/kernel/debug/tracing/tracing_on
allow init tracing_shell_writable:file { open append write lock };

# Setup and control wifi event tracing (see wifi-events.rc)
allow init debugfs_tracing_instances:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow init debugfs_tracing_instances:file { open append write lock };
allow init debugfs_wifi_tracing:file { open append write lock };

# chown/chmod on pseudo files.
allow init { fs_type -contextmount_type -sdcard_type -rootfs }:file { open read setattr };
allow init { fs_type -contextmount_type -sdcard_type -rootfs }:dir  { open read setattr search };

# init should not be able to read or open generic devices
# TODO: auditing to see if this can be deleted entirely
allow init { dev_type -kmem_device -port_device -device }:chr_file { read open };
auditallow init {
  dev_type
  -alarm_device
  -ashmem_device
  -binder_device
  -console_device
  -device
  -devpts
  -dm_device
  -hwbinder_device
  -hw_random_device
  -keychord_device
  -kmem_device
  -kmsg_device
  -null_device
  -owntty_device
  -port_device
  -ptmx_device
  -random_device
  -zero_device
}:chr_file { read open };

# chown/chmod on devices.
allow init { dev_type -kmem_device -port_device }:chr_file setattr;

# Unlabeled file access for upgrades from 4.2.
allow init unlabeled:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } relabelfrom };
allow init unlabeled:{ file lnk_file sock_file fifo_file } { { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } relabelfrom };

# Any operation that can modify the kernel ring buffer, e.g. clear
# or a read that consumes the messages that were read.
allow init kernel:system syslog_mod;
allow init self:capability2 syslog;

# Set usermodehelpers and /proc security settings.
allow init usermodehelper:file { { getattr open read ioctl lock } { open append write lock } };
allow init proc_security:file { { getattr open read ioctl lock } { open append write lock } };

# Write to /proc/sys/kernel/panic_on_oops.

#line 243
allow init proc:dir { open getattr read search ioctl lock };
#line 243
allow init proc:{ file lnk_file } { getattr open read ioctl lock };
#line 243

allow init proc:file { open append write lock };

# Write to /proc/sys/net/ping_group_range and other /proc/sys/net files.

#line 247
allow init proc_net:dir { open getattr read search ioctl lock };
#line 247
allow init proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 247

allow init proc_net:file { open append write lock };
allow init self:capability net_admin;

# Write to /proc/sysrq-trigger.
allow init proc_sysrq:file { open append write lock };

# Read /proc/stat for bootchart.
allow init proc_stat:file { getattr open read ioctl lock };

# Reboot.
allow init self:capability sys_boot;

# Write to sysfs nodes.
allow init sysfs_type:dir { open getattr read search ioctl lock };
allow init sysfs_type:lnk_file read;
allow init sysfs_type:file { { getattr open read ioctl lock } { open append write lock } };

# Init will create /data/misc/logd when the property persist.logd.logpersistd is "logcatd".
# Init will also walk through the directory as part of a recursive restorecon.
allow init misc_logd_file:dir { add_name open create read getattr setattr search write };
allow init misc_logd_file:file { open create getattr setattr write };

# Support "adb shell stop"
allow init self:capability kill;
allow init domain:process { sigkill signal };

# Init creates keystore's directory on boot, and walks through
# the directory as part of a recursive restorecon.
allow init keystore_data_file:dir { open create read getattr setattr search };
allow init keystore_data_file:file { getattr };

# Init creates vold's directory on boot, and walks through
# the directory as part of a recursive restorecon.
allow init vold_data_file:dir { open create read getattr setattr search };
allow init vold_data_file:file { getattr };

# Init creates /data/local/tmp at boot
allow init shell_data_file:dir { open create read getattr setattr search };
allow init shell_data_file:file { getattr };

# Set UID, GID, and adjust capability bounding set for services.
allow init self:capability { setuid setgid setpcap };

# For bootchart to read the /proc/$pid/cmdline file of each process,
# we need to have following line to allow init to have access
# to different domains.

#line 294
allow init domain:dir { open getattr read search ioctl lock };
#line 294
allow init domain:{ file lnk_file } { getattr open read ioctl lock };
#line 294


# Use setexeccon(), setfscreatecon(), and setsockcreatecon().
# setexec is for services with seclabel options.
# setfscreate is for labeling directories and socket files.
# setsockcreate is for labeling local/unix domain sockets.
allow init self:process { setexec setfscreate setsockcreate };

# Perform SELinux access checks on setting properties.

#line 303

#line 303
allow init selinuxfs:dir { open getattr read search ioctl lock };
#line 303
allow init selinuxfs:{ file lnk_file } { getattr open read ioctl lock };
#line 303

#line 303
allow init selinuxfs:file { open append write lock };
#line 303
allow init kernel:security compute_av;
#line 303
allow init self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto name_bind };
#line 303


# Ask the kernel for the new context on services to label their sockets.
allow init kernel:security compute_create;

# Create sockets for the services.
allow init domain:unix_stream_socket { create bind };
allow init domain:unix_dgram_socket { create bind };

# Create /data/property and files within it.
allow init property_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow init property_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Set any property.
allow init property_type:property_service set;

# Send an SELinux userspace denial to the kernel audit subsystem,
# so it can be picked up and processed by logd. These denials are
# generated when an attempt to set a property is denied by policy.
allow init self:netlink_audit_socket { { create { read getattr write setattr lock append bind connect getopt setopt shutdown } } nlmsg_relay };
allow init self:capability audit_write;

# Run "ifup lo" to bring up the localhost interface
allow init self:udp_socket { create ioctl };
# in addition to unpriv ioctls granted to all domains, init also needs:
allowxperm init self:udp_socket ioctl 0x00008914;
allow init self:capability net_raw;

# This line seems suspect, as it should not really need to
# set scheduling parameters for a kernel domain task.
allow init kernel:process setsched;

# swapon() needs write access to swap device
# system/core/fs_mgr/fs_mgr.c - fs_mgr_swapon_all
allow init swap_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Read from /dev/hw_random if present.
# system/core/init/init.c - mix_hwrng_into_linux_rng_action
allow init hw_random_device:chr_file { getattr open read ioctl lock };

# Create and access /dev files without a specific type,
# e.g. /dev/.coldboot_done, /dev/.booting
# TODO:  Move these files into their own type unless they are
# only ever accessed by init.
allow init device:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# keychord configuration
allow init self:capability sys_tty_config;
allow init keychord_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Access device mapper for setting up dm-verity
allow init dm_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow init dm_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Access metadata block device for storing dm-verity state
allow init metadata_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Read /sys/fs/pstore/console-ramoops to detect restarts caused
# by dm-verity detecting corrupted blocks
allow init pstorefs:dir search;
allow init pstorefs:file { getattr open read ioctl lock };
allow init kernel:system syslog_read;

# linux keyring configuration
allow init init:key { write search setattr };

# Allow init to create /data/unencrypted
allow init unencrypted_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };

# Allow init to write to /proc/sys/vm/overcommit_memory
allow init proc_overcommit_memory:file { write };


#line 375

#line 375

#line 375
allow init vold_socket:sock_file write;
#line 375
allow init vold:unix_stream_socket connectto;
#line 375

#line 375


# Raw writes to misc block device
allow init misc_block_device:blk_file { open append write lock };


#line 380
allow init system_file:dir { open getattr read search ioctl lock };
#line 380
allow init system_file:{ file lnk_file } { getattr open read ioctl lock };
#line 380

allow init proc_meminfo:file { getattr open read ioctl lock };

allow init system_data_file:file { getattr read };
allow init system_data_file:lnk_file { getattr open read ioctl lock };


###
### neverallow rules
###

# The init domain is only entered via an exec based transition from the
# kernel domain, never via setcon().
neverallow domain init:process dyntransition;
neverallow { domain -kernel } init:process transition;
neverallow init { file_type fs_type -init_exec }:file entrypoint;

# Never read/follow symlinks created by shell or untrusted apps.
neverallow init shell_data_file:lnk_file read;
neverallow init app_data_file:lnk_file read;

# init should never execute a program without changing to another domain.
neverallow init { file_type fs_type }:file execute_no_trans;

# Init never adds or uses services via service_manager.
neverallow init service_manager_type:service_manager { add find };
neverallow init servicemanager:service_manager list;

# Init should not be creating subdirectories in /data/local/tmp
neverallow init shell_data_file:dir { write add_name remove_name };
#line 1 "system/sepolicy/public/inputflinger.te"
# inputflinger
type inputflinger, domain;
type inputflinger_exec, exec_type, file_type;


#line 5
# Call the servicemanager and transfer references to it.
#line 5
allow inputflinger servicemanager:binder { call transfer };
#line 5
# servicemanager performs getpidcon on clients.
#line 5
allow servicemanager inputflinger:dir search;
#line 5
allow servicemanager inputflinger:file { read open };
#line 5
allow servicemanager inputflinger:process getattr;
#line 5
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 5
# all domains in domain.te.
#line 5


#line 6
typeattribute inputflinger binderservicedomain;
#line 6



#line 8
# Call the server domain and optionally transfer references to it.
#line 8
allow inputflinger system_server:binder { call transfer };
#line 8
# Allow the serverdomain to transfer references to the client on the reply.
#line 8
allow system_server inputflinger:binder transfer;
#line 8
# Receive and use open files from the server.
#line 8
allow inputflinger system_server:fd use;
#line 8



#line 10
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 10
allow inputflinger sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 10
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 10
allow inputflinger self:capability2 block_suspend;
#line 10



#line 12
  allow inputflinger inputflinger_service:service_manager { add find };
#line 12
  neverallow { domain -inputflinger } inputflinger_service:service_manager add;
#line 12

allow inputflinger input_device:dir { open getattr read search ioctl lock };
allow inputflinger input_device:chr_file { { getattr open read ioctl lock } { open append write lock } };


#line 16
allow inputflinger cgroup:dir { open getattr read search ioctl lock };
#line 16
allow inputflinger cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 16

#line 1 "system/sepolicy/public/install_recovery.te"
# service flash_recovery in init.rc
type install_recovery, domain;
type install_recovery_exec, exec_type, file_type;

allow install_recovery self:capability dac_override;

# /system/bin/install-recovery.sh is a shell script.
# Needs to execute /system/bin/sh
allow install_recovery shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Execute /system/bin/applypatch
allow install_recovery system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

allow install_recovery toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Update the recovery block device based off a diff of the boot block device
allow install_recovery block_device:dir search;
allow install_recovery boot_block_device:blk_file { getattr open read ioctl lock };
allow install_recovery recovery_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Create and delete /cache/saved.file
allow install_recovery cache_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow install_recovery cache_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Write to /proc/sys/vm/drop_caches
allow install_recovery proc_drop_caches:file { open append write lock };
#line 1 "system/sepolicy/public/installd.te"
# installer daemon
type installd, domain, domain_deprecated;
type installd_exec, exec_type, file_type;
typeattribute installd mlstrustedsubject;
allow installd self:capability { chown dac_override fowner fsetid setgid setuid sys_admin };

# Allow labeling of files under /data/app/com.example/oat/
allow installd dalvikcache_data_file:dir relabelto;
allow installd dalvikcache_data_file:file { relabelto link };

# Allow movement of APK files between volumes
allow installd apk_data_file:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } relabelfrom };
allow installd apk_data_file:file { { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } relabelfrom link };
allow installd apk_data_file:lnk_file { create { getattr open read ioctl lock } unlink };

allow installd asec_apk_file:file { getattr open read ioctl lock };
allow installd apk_tmp_file:file { { getattr open read ioctl lock } unlink };
allow installd apk_tmp_file:dir { relabelfrom { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } };
allow installd oemfs:dir { open getattr read search ioctl lock };
allow installd oemfs:file { getattr open read ioctl lock };
allow installd cgroup:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd cgroup:{ file lnk_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow installd mnt_expand_file:dir { search getattr };
# Check validity of SELinux context before use.

#line 25

#line 25
allow installd selinuxfs:dir { open getattr read search ioctl lock };
#line 25
allow installd selinuxfs:{ file lnk_file } { getattr open read ioctl lock };
#line 25

#line 25
allow installd selinuxfs:file { open append write lock };
#line 25
allow installd kernel:security check_context;
#line 25



#line 27
allow installd rootfs:dir { open getattr read search ioctl lock };
#line 27
allow installd rootfs:{ file lnk_file } { getattr open read ioctl lock };
#line 27

# Scan through APKs in /system/app and /system/priv-app

#line 29
allow installd system_file:dir { open getattr read search ioctl lock };
#line 29
allow installd system_file:{ file lnk_file } { getattr open read ioctl lock };
#line 29


# Search /data/app-asec and stat files in it.
allow installd asec_image_file:dir search;
allow installd asec_image_file:file getattr;

# Create /data/user and /data/user/0 if necessary.
# Also required to initially create /data/data subdirectories
# and lib symlinks before the setfilecon call.  May want to
# move symlink creation after setfilecon in installd.
allow installd system_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd system_data_file:lnk_file { create setattr unlink };

# Upgrade /data/media for multi-user if necessary.
allow installd media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd media_rw_data_file:file { getattr unlink };
# restorecon new /data/media directory.
allow installd system_data_file:dir relabelfrom;
allow installd media_rw_data_file:dir relabelto;

# Upgrade /data/misc/keychain for multi-user if necessary.
allow installd misc_user_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd misc_user_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow installd keychain_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd keychain_data_file:file {{ getattr open read ioctl lock } unlink};

# Create /data/.layout_version.* file
allow installd install_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Create files under /data/dalvik-cache.
allow installd dalvikcache_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd dalvikcache_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow installd dalvikcache_data_file:lnk_file getattr;

# Create files under /data/resource-cache.
allow installd resourcecache_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow installd resourcecache_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Upgrade from unlabeled userdata.
# Just need enough to remove and/or relabel it.
allow installd unlabeled:dir { getattr search relabelfrom { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } rmdir };
allow installd unlabeled:{ file lnk_file sock_file fifo_file } { getattr relabelfrom rename unlink setattr };
# Read pkg.apk file for input during dexopt.
allow installd unlabeled:file { getattr open read ioctl lock };

# Upgrade from before system_app_data_file was used for system UID apps.
# Just need enough to relabel it and to unlink removed package files.
# Directory access covered by earlier rule above.
allow installd system_data_file:{ file lnk_file sock_file fifo_file } { getattr relabelfrom unlink };

# Manage /data/data subdirectories, including initially labeling them
# upon creation via setfilecon or running restorecon_recursive,
# setting owner/mode, creating symlinks within them, and deleting them
# upon package uninstall.
# Types extracted from seapp_contexts type= fields.
allow installd {
    system_app_data_file
    bluetooth_data_file
    nfc_data_file
    radio_data_file
    shell_data_file
    app_data_file
}:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } relabelfrom relabelto };

allow installd {
    system_app_data_file
    bluetooth_data_file
    nfc_data_file
    radio_data_file
    shell_data_file
    app_data_file
}:{ file lnk_file sock_file fifo_file } { { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } relabelfrom relabelto };

# Similar for the files under /data/misc/profiles/
allow installd user_profile_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow installd user_profile_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow installd user_profile_data_file:dir rmdir;
allow installd user_profile_data_file:file unlink;

# Files created/updated by profman dumps.
allow installd profman_dump_data_file:dir { search add_name write };
allow installd profman_dump_data_file:file { create setattr open write };

# Create and use pty created by android_fork_execvp().
allow installd devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };

# execute toybox for app relocation
allow installd toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Allow installd to publish a binder service and make binder calls.

#line 119
# Call the servicemanager and transfer references to it.
#line 119
allow installd servicemanager:binder { call transfer };
#line 119
# servicemanager performs getpidcon on clients.
#line 119
allow servicemanager installd:dir search;
#line 119
allow servicemanager installd:file { read open };
#line 119
allow servicemanager installd:process getattr;
#line 119
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 119
# all domains in domain.te.
#line 119


#line 120
  allow installd installd_service:service_manager { add find };
#line 120
  neverallow { domain -installd } installd_service:service_manager add;
#line 120

allow installd dumpstate:fifo_file  { getattr write };

# Allow installd to call into the system server so it can check permissions.

#line 124
# Call the server domain and optionally transfer references to it.
#line 124
allow installd system_server:binder { call transfer };
#line 124
# Allow the serverdomain to transfer references to the client on the reply.
#line 124
allow system_server installd:binder transfer;
#line 124
# Receive and use open files from the server.
#line 124
allow installd system_server:fd use;
#line 124

allow installd permission_service:service_manager find;

# Allow installd to read and write quotas
allow installd block_device:dir { search };
allow installd labeledfs:filesystem { quotaget quotamod };

# Allow installd to delete from /data/preloads when trimming data caches
# TODO b/34690396 Remove when time-based purge policy for preloads is implemented in system_server
allow installd preloads_data_file:file { { getattr open read ioctl lock } unlink };
allow installd preloads_data_file:dir { { open getattr read search ioctl lock } write remove_name rmdir };
allow installd preloads_media_file:file { { getattr open read ioctl lock } unlink };
allow installd preloads_media_file:dir { { open getattr read search ioctl lock } write remove_name rmdir };

###
### Neverallow rules
###

# only system_server, installd and dumpstate may interact with installd over binder
neverallow { domain -system_server -dumpstate -installd } installd_service:service_manager find;
neverallow { domain -system_server -dumpstate } installd:binder call;
neverallow installd { domain -system_server -servicemanager -su }:binder call;
#line 1 "system/sepolicy/public/isolated_app.te"
###
### Services with isolatedProcess=true in their manifest.
###
### This file defines the rules for isolated apps. An "isolated
### app" is an APP with UID between AID_ISOLATED_START (99000)
### and AID_ISOLATED_END (99999).
###

type isolated_app, domain;
#line 1 "system/sepolicy/public/kernel.te"
# Life begins with the kernel.
type kernel, domain, mlstrustedsubject;

allow kernel self:capability sys_nice;

# Root fs.

#line 7
allow kernel rootfs:dir { open getattr read search ioctl lock };
#line 7
allow kernel rootfs:{ file lnk_file } { getattr open read ioctl lock };
#line 7


#line 8
allow kernel proc:dir { open getattr read search ioctl lock };
#line 8
allow kernel proc:{ file lnk_file } { getattr open read ioctl lock };
#line 8


# Get SELinux enforcing status.
allow kernel selinuxfs:dir { open getattr read search ioctl lock };
allow kernel selinuxfs:file { getattr open read ioctl lock };

# Allow init relabel itself.
allow kernel rootfs:file relabelfrom;
allow kernel init_exec:file relabelto;
# TODO: investigate why we need this.
allow kernel init:process share;

# cgroup filesystem initialization prior to setting the cgroup root directory label.
allow kernel unlabeled:dir search;

# Mount usbfs.
allow kernel usbfs:filesystem mount;
allow kernel usbfs:dir search;

# Initial setenforce by init prior to switching to init domain.
# We use dontaudit instead of allow to prevent a kernel spawned userspace
# process from turning off SELinux once enabled.
dontaudit kernel self:security setenforce;

# Write to /proc/1/oom_adj prior to switching to init domain.
allow kernel self:capability sys_resource;

# Init reboot before switching selinux domains under certain error
# conditions. Allow it.
# As part of rebooting, init writes "u" to /proc/sysrq-trigger to
# remount filesystems read-only. /data is not mounted at this point,
# so we could ignore this. For now, we allow it.
allow kernel self:capability sys_boot;
allow kernel proc_sysrq:file { open append write lock };

# Allow writing to /dev/kmsg which was created prior to loading policy.
allow kernel tmpfs:chr_file write;

# Set checkreqprot by init.rc prior to switching to init domain.
allow kernel selinuxfs:file write;
allow kernel self:security setcheckreqprot;

# MTP sync (b/15835289)
# kernel thread "loop0", used by the loop block device, for ASECs (b/17158723)
allow kernel priv_app:fd use;
allow kernel sdcard_type:file { read write };

# Allow the kernel to read OBB files from app directories. (b/17428116)
# Kernel thread "loop0" reads a vold supplied file descriptor.
# Fixes CTS tests:
#  * android.os.storage.cts.StorageManagerTest#testMountAndUnmountObbNormal
#  * android.os.storage.cts.StorageManagerTest#testMountAndUnmountTwoObbs
allow kernel vold:fd use;
allow kernel app_data_file:file read;
allow kernel asec_image_file:file read;

# Allow reading loop device in update_engine_unittests. (b/28319454)

#line 65
  allow kernel update_engine_data_file:file read;
#line 65
  allow kernel nativetest_data_file:file read;
#line 68


# Access to /data/media.
# This should be removed if sdcardfs is modified to alter the secontext for its
# accesses to the underlying FS.
allow kernel media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow kernel media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

###
### neverallow rules
###

# The initial task starts in the kernel domain (assigned via
# initial_sid_contexts), but nothing ever transitions to it.
neverallow * kernel:process { transition dyntransition };

# The kernel domain is never entered via an exec, nor should it
# ever execute a program outside the rootfs without changing to another domain.
# If you encounter an execute_no_trans denial on the kernel domain, then
# possible causes include:
# - The program is a kernel usermodehelper.  In this case, define a domain
#   for the program and domain_auto_trans() to it.
# - You are running an exploit which switched to the init task credentials
#   and is then trying to exec a shell or other program.  You lose!
neverallow kernel *:file { entrypoint execute_no_trans };

# the kernel should not be accessing files owned by other users.
# Instead of adding dac_{read_search,override}, fix the unix permissions
# on files being accessed.
neverallow kernel self:capability { dac_override dac_read_search };
#line 1 "system/sepolicy/public/keystore.te"
type keystore, domain, domain_deprecated;
type keystore_exec, exec_type, file_type;

# keystore daemon
typeattribute keystore mlstrustedsubject;

#line 6
# Call the servicemanager and transfer references to it.
#line 6
allow keystore servicemanager:binder { call transfer };
#line 6
# servicemanager performs getpidcon on clients.
#line 6
allow servicemanager keystore:dir search;
#line 6
allow servicemanager keystore:file { read open };
#line 6
allow servicemanager keystore:process getattr;
#line 6
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 6
# all domains in domain.te.
#line 6


#line 7
typeattribute keystore binderservicedomain;
#line 7


#line 8
# Call the server domain and optionally transfer references to it.
#line 8
allow keystore system_server:binder { call transfer };
#line 8
# Allow the serverdomain to transfer references to the client on the reply.
#line 8
allow system_server keystore:binder transfer;
#line 8
# Receive and use open files from the server.
#line 8
allow keystore system_server:fd use;
#line 8


# talk to keymaster

#line 11
typeattribute keystore halclientdomain;
#line 11
typeattribute keystore hal_keymaster_client;
#line 11

#line 11
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 11
# once we know at build time whether a HAL is going to run in
#line 11
# passthrough or binderized mode.
#line 11
typeattribute keystore hal_keymaster;
#line 11
# Find passthrough HAL implementations
#line 11
allow hal_keymaster system_file:dir { open getattr read search ioctl lock };
#line 11


allow keystore keystore_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow keystore keystore_data_file:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow keystore keystore_exec:file { getattr };


#line 17
  allow keystore keystore_service:service_manager { add find };
#line 17
  neverallow { domain -keystore } keystore_service:service_manager add;
#line 17

allow keystore sec_key_att_app_id_provider_service:service_manager find;

# Check SELinux permissions.

#line 21

#line 21
allow keystore selinuxfs:dir { open getattr read search ioctl lock };
#line 21
allow keystore selinuxfs:{ file lnk_file } { getattr open read ioctl lock };
#line 21

#line 21
allow keystore selinuxfs:file { open append write lock };
#line 21
allow keystore kernel:security compute_av;
#line 21
allow keystore self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto name_bind };
#line 21



#line 23
allow keystore cgroup:dir { open getattr read search ioctl lock };
#line 23
allow keystore cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 23


###
### Neverallow rules
###
### Protect ourself from others
###

neverallow { domain -keystore } keystore_data_file:dir ~{ open create read getattr setattr search relabelto ioctl };
neverallow { domain -keystore } keystore_data_file:{ file lnk_file sock_file fifo_file } ~{ relabelto getattr };

neverallow { domain -keystore -init } keystore_data_file:dir *;
neverallow { domain -keystore -init } keystore_data_file:{ file lnk_file sock_file fifo_file } *;

neverallow * keystore:process ptrace;
#line 1 "system/sepolicy/public/lmkd.te"
# lmkd low memory killer daemon
type lmkd, domain, mlstrustedsubject;
type lmkd_exec, exec_type, file_type;

allow lmkd self:capability { dac_override sys_resource kill };

# lmkd locks itself in memory, to prevent it from being
# swapped out and unable to kill other memory hogs.
# system/core commit b28ff9131363f7b4a698990da5748b2a88c3ed35
# b/16236289
allow lmkd self:capability ipc_lock;

## Open and write to /proc/PID/oom_score_adj
## TODO: maybe scope this down?

#line 15
allow lmkd appdomain:dir { open getattr read search ioctl lock };
#line 15
allow lmkd appdomain:{ file lnk_file } { getattr open read ioctl lock };
#line 15

allow lmkd appdomain:file write;

#line 17
allow lmkd system_server:dir { open getattr read search ioctl lock };
#line 17
allow lmkd system_server:{ file lnk_file } { getattr open read ioctl lock };
#line 17

allow lmkd system_server:file write;

## Writes to /sys/module/lowmemorykiller/parameters/minfree

#line 21
allow lmkd sysfs_type:dir { open getattr read search ioctl lock };
#line 21
allow lmkd sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 21

allow lmkd sysfs_lowmemorykiller:file { open append write lock };

# Send kill signals
allow lmkd appdomain:process sigkill;

# Clean up old cgroups
allow lmkd cgroup:dir { remove_name rmdir };

# Set self to SCHED_FIFO
allow lmkd self:capability sys_nice;

allow lmkd proc_zoneinfo:file { getattr open read ioctl lock };

### neverallow rules

# never honor LD_PRELOAD
neverallow * lmkd:process noatsecure;
#line 1 "system/sepolicy/public/logd.te"
# android user-space log manager
type logd, domain, mlstrustedsubject;
type logd_exec, exec_type, file_type;

# Read access to pseudo filesystems.

#line 6
allow logd cgroup:dir { open getattr read search ioctl lock };
#line 6
allow logd cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 6


#line 7
allow logd proc:dir { open getattr read search ioctl lock };
#line 7
allow logd proc:{ file lnk_file } { getattr open read ioctl lock };
#line 7


#line 8
allow logd proc_meminfo:dir { open getattr read search ioctl lock };
#line 8
allow logd proc_meminfo:{ file lnk_file } { getattr open read ioctl lock };
#line 8


#line 9
allow logd proc_net:dir { open getattr read search ioctl lock };
#line 9
allow logd proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 9


allow logd self:capability { setuid setgid setpcap sys_nice audit_control };
allow logd self:capability2 syslog;
allow logd self:netlink_audit_socket { { create { read getattr write setattr lock append bind connect getopt setopt shutdown } } nlmsg_write };
allow logd kernel:system syslog_read;
allow logd kmsg_device:chr_file { open append write lock };
allow logd system_data_file:{ file lnk_file } { getattr open read ioctl lock };
allow logd pstorefs:dir search;
allow logd pstorefs:file { getattr open read ioctl lock };

#line 19
  # Access to /data/misc/logd/event-log-tags
#line 19
  allow logd misc_logd_file:dir { open getattr read search ioctl lock };
#line 19
  allow logd misc_logd_file:file { { getattr open read ioctl lock } { open append write lock } };
#line 23

allow logd runtime_event_log_tags_file:file { { getattr open read ioctl lock } { open append write lock } };

# Access device logging gating property

#line 27
allow logd device_logging_prop:file { getattr open read ioctl lock };
#line 27



#line 29
allow logd domain:dir { open getattr read search ioctl lock };
#line 29
allow logd domain:{ file lnk_file } { getattr open read ioctl lock };
#line 29


allow logd kernel:system syslog_mod;


#line 33
# Group AID_LOG checked by filesystem & logd
#line 33
# to permit control commands
#line 33

#line 33

#line 33

#line 33
allow logd logd_socket:sock_file write;
#line 33
allow logd logd:unix_stream_socket connectto;
#line 33

#line 33

#line 33


#line 34
allow logd runtime_event_log_tags_file:file { getattr open read ioctl lock };
#line 34


allow runtime_event_log_tags_file tmpfs:filesystem associate;
# Typically harmlessly blindly trying to access via liblog
# event tag mapping while in the untrusted_app domain.
# Access for that domain is controlled and gated via the
# event log tag service (albeit at a performance penalty,
# expected to be locally cached).
dontaudit domain runtime_event_log_tags_file:file { open read };

###
### Neverallow rules
###
### logd should NEVER do any of this

# Block device access.
neverallow logd dev_type:blk_file { read write };

# ptrace any other app
neverallow logd domain:process ptrace;

# ... and nobody may ptrace me (except on userdebug or eng builds)
neverallow { domain -crash_dump } logd:process ptrace;

# Write to /system.
neverallow logd system_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# Write to files in /data/data or system files on /data
neverallow logd { app_data_file system_data_file }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# Only init is allowed to enter the logd domain via exec()
neverallow { domain -init } logd:process transition;
neverallow * logd:process dyntransition;

# protect the event-log-tags file
neverallow {
  domain
  -init
  -logd
} runtime_event_log_tags_file:file { append create link unlink relabelfrom rename setattr write };
#line 1 "system/sepolicy/public/logpersist.te"
# android debug logging, logpersist domains
type logpersist, domain;

###
### Neverallow rules
###
### logpersist should NEVER do any of this

# Block device access.
neverallow logpersist dev_type:blk_file { read write };

# ptrace any other app
neverallow logpersist domain:process ptrace;

# Write to files in /data/data or system files on /data except misc_logd_file
neverallow logpersist { app_data_file system_data_file }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# Only init should be allowed to enter the logpersist domain via exec()
# Following is a list of debug domains we know that transition to logpersist
# neverallow_with_undefined_domains {
#   domain
#   -init       # goldfish, logcatd, raft
#   -mmi        # bat, mtp8996, msmcobalt
#   -system_app # Smith.apk
# } logpersist:process transition;
neverallow * logpersist:process dyntransition;
#line 1 "system/sepolicy/public/mdnsd.te"
# mdns daemon
type mdnsd, domain;
#line 1 "system/sepolicy/public/mediacodec.te"
# mediacodec - audio and video codecs live here
type mediacodec, domain;
type mediacodec_exec, exec_type, file_type;

typeattribute mediacodec mlstrustedsubject;

# TODO(b/36375899) attributize this domain appropriately as hal_omx
# and use macro hal_server_domain

#line 9
allow mediacodec hwservicemanager_prop:file { getattr open read ioctl lock };
#line 9



#line 11
# Call the servicemanager and transfer references to it.
#line 11
allow mediacodec servicemanager:binder { call transfer };
#line 11
# servicemanager performs getpidcon on clients.
#line 11
allow servicemanager mediacodec:dir search;
#line 11
allow servicemanager mediacodec:file { read open };
#line 11
allow servicemanager mediacodec:process getattr;
#line 11
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 11
# all domains in domain.te.
#line 11


#line 12
# Call the server domain and optionally transfer references to it.
#line 12
allow mediacodec binderservicedomain:binder { call transfer };
#line 12
# Allow the serverdomain to transfer references to the client on the reply.
#line 12
allow binderservicedomain mediacodec:binder transfer;
#line 12
# Receive and use open files from the server.
#line 12
allow mediacodec binderservicedomain:fd use;
#line 12


#line 13
# Call the server domain and optionally transfer references to it.
#line 13
allow mediacodec appdomain:binder { call transfer };
#line 13
# Allow the serverdomain to transfer references to the client on the reply.
#line 13
allow appdomain mediacodec:binder transfer;
#line 13
# Receive and use open files from the server.
#line 13
allow mediacodec appdomain:fd use;
#line 13


#line 14
typeattribute mediacodec binderservicedomain;
#line 14



#line 16
  allow mediacodec mediacodec_service:service_manager { add find };
#line 16
  neverallow { domain -mediacodec } mediacodec_service:service_manager add;
#line 16

allow mediacodec mediametrics_service:service_manager find;
allow mediacodec surfaceflinger_service:service_manager find;
allow mediacodec gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow mediacodec video_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow mediacodec video_device:dir search;
allow mediacodec ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow mediacodec hal_graphics_allocator:fd use;
allow mediacodec hal_camera:fd use;


#line 26

#line 26
  allow mediacodec su:fifo_file append;
#line 26

#line 26
allow mediacodec anr_data_file:file append;
#line 26
allow mediacodec tombstoned:unix_stream_socket connectto;
#line 26
allow mediacodec tombstoned:fd use;
#line 26
allow mediacodec tombstoned_crash_socket:sock_file write;
#line 26
allow mediacodec tombstone_data_file:file append;
#line 26


# hidl access

#line 29
# Call the hwservicemanager and transfer references to it.
#line 29
allow mediacodec hwservicemanager:binder { call transfer };
#line 29
# Allow hwservicemanager to send out callbacks
#line 29
allow hwservicemanager mediacodec:binder { call transfer };
#line 29
# hwservicemanager performs getpidcon on clients.
#line 29
allow hwservicemanager mediacodec:dir search;
#line 29
allow hwservicemanager mediacodec:file { read open };
#line 29
allow hwservicemanager mediacodec:process getattr;
#line 29
# TODO(b/34274385): hals wait for data to be mounted so they can
#line 29
# start only if persist.hal.binderization is enabled. (for dogfood
#line 29
# stability). getService must also check for data to be mounted
#line 29
# if the vintf promises the hal will be registered over hwbinder.
#line 29

#line 29
allow mediacodec hal_binderization_prop:file { getattr open read ioctl lock };
#line 29

#line 29

#line 29
allow mediacodec persistent_properties_ready_prop:file { getattr open read ioctl lock };
#line 29

#line 29

#line 29
allow mediacodec vold_prop:file { getattr open read ioctl lock };
#line 29

#line 29
# rw access to /dev/hwbinder and /dev/ashmem is presently granted to
#line 29
# all domains in domain.te.
#line 29


#line 30
# Call into the allocator hal
#line 30

#line 30
# Call the server domain and optionally transfer references to it.
#line 30
allow mediacodec hal_allocator_server:binder { call transfer };
#line 30
# Allow the serverdomain to transfer references to the client on the reply.
#line 30
allow hal_allocator_server mediacodec:binder transfer;
#line 30
# Receive and use open files from the server.
#line 30
allow mediacodec hal_allocator_server:fd use;
#line 30
;
#line 30

allow mediacodec system_file:dir { open read };

# Recieve gralloc buffer FDs from bufferhubd. Note that mediacodec never
# directly connects to bufferhubd via PDX. Instead, a VR app acts as a bridge
# between those two: it talks to mediacodec via Binder and talks to bufferhubd
# via PDX. Thus, there is no need to use use_pdx macro.
allow mediacodec bufferhubd:fd use;

###
### neverallow rules
###

# mediacodec should never execute any executable without a
# domain transition
neverallow mediacodec { file_type fs_type }:file execute_no_trans;

# The goal of the mediaserver split is to place media processing code into
# restrictive sandboxes with limited responsibilities and thus limited
# permissions. Example: Audioserver is only responsible for controlling audio
# hardware and processing audio content. Cameraserver does the same for camera
# hardware/content. Etc.
#
# Media processing code is inherently risky and thus should have limited
# permissions and be isolated from the rest of the system and network.
# Lengthier explanation here:
# https://android-developers.googleblog.com/2016/05/hardening-media-stack.html
neverallow mediacodec domain:{ tcp_socket udp_socket rawip_socket } *;
#line 1 "system/sepolicy/public/mediadrmserver.te"
# mediadrmserver - mediadrm daemon
type mediadrmserver, domain;
type mediadrmserver_exec, exec_type, file_type;

typeattribute mediadrmserver mlstrustedsubject;


#line 7
typeattribute mediadrmserver netdomain;
#line 7


#line 8
# Call the servicemanager and transfer references to it.
#line 8
allow mediadrmserver servicemanager:binder { call transfer };
#line 8
# servicemanager performs getpidcon on clients.
#line 8
allow servicemanager mediadrmserver:dir search;
#line 8
allow servicemanager mediadrmserver:file { read open };
#line 8
allow servicemanager mediadrmserver:process getattr;
#line 8
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 8
# all domains in domain.te.
#line 8


#line 9
# Call the server domain and optionally transfer references to it.
#line 9
allow mediadrmserver binderservicedomain:binder { call transfer };
#line 9
# Allow the serverdomain to transfer references to the client on the reply.
#line 9
allow binderservicedomain mediadrmserver:binder transfer;
#line 9
# Receive and use open files from the server.
#line 9
allow mediadrmserver binderservicedomain:fd use;
#line 9


#line 10
# Call the server domain and optionally transfer references to it.
#line 10
allow mediadrmserver appdomain:binder { call transfer };
#line 10
# Allow the serverdomain to transfer references to the client on the reply.
#line 10
allow appdomain mediadrmserver:binder transfer;
#line 10
# Receive and use open files from the server.
#line 10
allow mediadrmserver appdomain:fd use;
#line 10


#line 11
typeattribute mediadrmserver binderservicedomain;
#line 11


#line 12
typeattribute mediadrmserver halclientdomain;
#line 12
typeattribute mediadrmserver hal_drm_client;
#line 12

#line 12
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 12
# once we know at build time whether a HAL is going to run in
#line 12
# passthrough or binderized mode.
#line 12
typeattribute mediadrmserver hal_drm;
#line 12
# Find passthrough HAL implementations
#line 12
allow hal_drm system_file:dir { open getattr read search ioctl lock };
#line 12



#line 14
  allow mediadrmserver mediadrmserver_service:service_manager { add find };
#line 14
  neverallow { domain -mediadrmserver } mediadrmserver_service:service_manager add;
#line 14

allow mediadrmserver mediaserver_service:service_manager find;
allow mediadrmserver mediametrics_service:service_manager find;
allow mediadrmserver processinfo_service:service_manager find;
allow mediadrmserver surfaceflinger_service:service_manager find;


#line 20
  allow mediadrmserver mediacasserver_service:service_manager { add find };
#line 20
  neverallow { domain -mediadrmserver } mediacasserver_service:service_manager add;
#line 20


###
### neverallow rules
###

# mediadrmserver should never execute any executable without a
# domain transition
neverallow mediadrmserver { file_type fs_type }:file execute_no_trans;

# do not allow privileged socket ioctl commands
neverallowxperm mediadrmserver domain:{ rawip_socket tcp_socket udp_socket } ioctl 
#line 31
{
#line 31
# qualcomm rmnet ioctls
#line 31
0x00006900 0x00006902
#line 31
# socket ioctls
#line 31
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 31
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 31
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 31
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 31
0x00008934 0x00008935 0x00008936 0x00008937 0x00008939 0x00008940 0x00008941
#line 31
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 31
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 31
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 31
0x00008991 0x00008992 0x00008993 0x00008994
#line 31
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 31
# device and protocol specific ioctls
#line 31
0x000089f0-0x000089ff
#line 31
0x000089e0-0x000089ef
#line 31
# Wireless extension ioctls
#line 31
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 31
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 31
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 31
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 31
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 31
0x00008b34 0x00008b35 0x00008b36
#line 31
# Dev private ioctl i.e. hardware specific ioctls
#line 31
0x00008be0-0x00008bff
#line 31
};
#line 1 "system/sepolicy/public/mediaextractor.te"
# mediaextractor - multimedia daemon
type mediaextractor, domain;
type mediaextractor_exec, exec_type, file_type;

typeattribute mediaextractor mlstrustedsubject;


#line 7
# Call the servicemanager and transfer references to it.
#line 7
allow mediaextractor servicemanager:binder { call transfer };
#line 7
# servicemanager performs getpidcon on clients.
#line 7
allow servicemanager mediaextractor:dir search;
#line 7
allow servicemanager mediaextractor:file { read open };
#line 7
allow servicemanager mediaextractor:process getattr;
#line 7
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 7
# all domains in domain.te.
#line 7


#line 8
# Call the server domain and optionally transfer references to it.
#line 8
allow mediaextractor binderservicedomain:binder { call transfer };
#line 8
# Allow the serverdomain to transfer references to the client on the reply.
#line 8
allow binderservicedomain mediaextractor:binder transfer;
#line 8
# Receive and use open files from the server.
#line 8
allow mediaextractor binderservicedomain:fd use;
#line 8


#line 9
# Call the server domain and optionally transfer references to it.
#line 9
allow mediaextractor appdomain:binder { call transfer };
#line 9
# Allow the serverdomain to transfer references to the client on the reply.
#line 9
allow appdomain mediaextractor:binder transfer;
#line 9
# Receive and use open files from the server.
#line 9
allow mediaextractor appdomain:fd use;
#line 9


#line 10
typeattribute mediaextractor binderservicedomain;
#line 10



#line 12
  allow mediaextractor mediaextractor_service:service_manager { add find };
#line 12
  neverallow { domain -mediaextractor } mediaextractor_service:service_manager add;
#line 12

allow mediaextractor mediametrics_service:service_manager find;
allow mediaextractor mediacasserver_service:service_manager find;

allow mediaextractor system_server:fd use;


#line 18
allow mediaextractor cgroup:dir { open getattr read search ioctl lock };
#line 18
allow mediaextractor cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 18

allow mediaextractor proc_meminfo:file { getattr open read ioctl lock };


#line 21

#line 21
  allow mediaextractor su:fifo_file append;
#line 21

#line 21
allow mediaextractor anr_data_file:file append;
#line 21
allow mediaextractor tombstoned:unix_stream_socket connectto;
#line 21
allow mediaextractor tombstoned:fd use;
#line 21
allow mediaextractor tombstoned_crash_socket:sock_file write;
#line 21
allow mediaextractor tombstone_data_file:file append;
#line 21


###
### neverallow rules
###

# mediaextractor should never execute any executable without a
# domain transition
neverallow mediaextractor { file_type fs_type }:file execute_no_trans;

# The goal of the mediaserver split is to place media processing code into
# restrictive sandboxes with limited responsibilities and thus limited
# permissions. Example: Audioserver is only responsible for controlling audio
# hardware and processing audio content. Cameraserver does the same for camera
# hardware/content. Etc.
#
# Media processing code is inherently risky and thus should have limited
# permissions and be isolated from the rest of the system and network.
# Lengthier explanation here:
# https://android-developers.googleblog.com/2016/05/hardening-media-stack.html
neverallow mediaextractor domain:{ tcp_socket udp_socket rawip_socket } *;
#line 1 "system/sepolicy/public/mediametrics.te"
# mediametrics - daemon for collecting media.metrics data
type mediametrics, domain;
type mediametrics_exec, exec_type, file_type;



#line 6
# Call the servicemanager and transfer references to it.
#line 6
allow mediametrics servicemanager:binder { call transfer };
#line 6
# servicemanager performs getpidcon on clients.
#line 6
allow servicemanager mediametrics:dir search;
#line 6
allow servicemanager mediametrics:file { read open };
#line 6
allow servicemanager mediametrics:process getattr;
#line 6
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 6
# all domains in domain.te.
#line 6


#line 7
# Call the server domain and optionally transfer references to it.
#line 7
allow mediametrics binderservicedomain:binder { call transfer };
#line 7
# Allow the serverdomain to transfer references to the client on the reply.
#line 7
allow binderservicedomain mediametrics:binder transfer;
#line 7
# Receive and use open files from the server.
#line 7
allow mediametrics binderservicedomain:fd use;
#line 7


#line 8
typeattribute mediametrics binderservicedomain;
#line 8



#line 10
  allow mediametrics mediametrics_service:service_manager { add find };
#line 10
  neverallow { domain -mediametrics } mediametrics_service:service_manager add;
#line 10


allow mediametrics system_server:fd use;


#line 14
allow mediametrics cgroup:dir { open getattr read search ioctl lock };
#line 14
allow mediametrics cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 14

allow mediametrics proc_meminfo:file { getattr open read ioctl lock };

###
### neverallow rules
###

# mediametrics should never execute any executable without a
# domain transition
neverallow mediametrics { file_type fs_type }:file execute_no_trans;

# The goal of the mediaserver split is to place media processing code into
# restrictive sandboxes with limited responsibilities and thus limited
# permissions. Example: Audioserver is only responsible for controlling audio
# hardware and processing audio content. Cameraserver does the same for camera
# hardware/content. Etc.
#
# Media processing code is inherently risky and thus should have limited
# permissions and be isolated from the rest of the system and network.
# Lengthier explanation here:
# https://android-developers.googleblog.com/2016/05/hardening-media-stack.html
neverallow mediametrics domain:{ tcp_socket udp_socket rawip_socket } *;
#line 1 "system/sepolicy/public/mediaserver.te"
# mediaserver - multimedia daemon
type mediaserver, domain;
type mediaserver_exec, exec_type, file_type;

typeattribute mediaserver mlstrustedsubject;

# TODO(b/36375899): replace with hal_client_domain macro on hal_omx
typeattribute mediaserver halclientdomain;


#line 10
typeattribute mediaserver netdomain;
#line 10



#line 12
allow mediaserver sdcard_type:dir { open getattr read search ioctl lock };
#line 12
allow mediaserver sdcard_type:{ file lnk_file } { getattr open read ioctl lock };
#line 12


#line 13
allow mediaserver cgroup:dir { open getattr read search ioctl lock };
#line 13
allow mediaserver cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 13


# stat /proc/self
allow mediaserver proc:lnk_file getattr;

# open /vendor/lib/mediadrm
allow mediaserver system_file:dir { open getattr read search ioctl lock };


#line 21
  # ptrace to processes in the same domain for memory leak detection
#line 21
  allow mediaserver self:process ptrace;
#line 24



#line 26
# Call the servicemanager and transfer references to it.
#line 26
allow mediaserver servicemanager:binder { call transfer };
#line 26
# servicemanager performs getpidcon on clients.
#line 26
allow servicemanager mediaserver:dir search;
#line 26
allow servicemanager mediaserver:file { read open };
#line 26
allow servicemanager mediaserver:process getattr;
#line 26
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 26
# all domains in domain.te.
#line 26


#line 27
# Call the server domain and optionally transfer references to it.
#line 27
allow mediaserver binderservicedomain:binder { call transfer };
#line 27
# Allow the serverdomain to transfer references to the client on the reply.
#line 27
allow binderservicedomain mediaserver:binder transfer;
#line 27
# Receive and use open files from the server.
#line 27
allow mediaserver binderservicedomain:fd use;
#line 27


#line 28
# Call the server domain and optionally transfer references to it.
#line 28
allow mediaserver appdomain:binder { call transfer };
#line 28
# Allow the serverdomain to transfer references to the client on the reply.
#line 28
allow appdomain mediaserver:binder transfer;
#line 28
# Receive and use open files from the server.
#line 28
allow mediaserver appdomain:fd use;
#line 28


#line 29
typeattribute mediaserver binderservicedomain;
#line 29


allow mediaserver media_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow mediaserver media_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow mediaserver app_data_file:dir search;
allow mediaserver app_data_file:file { { getattr open read ioctl lock } { open append write lock } };
allow mediaserver sdcard_type:file write;
allow mediaserver gpu_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow mediaserver video_device:dir { open getattr read search ioctl lock };
allow mediaserver video_device:chr_file { { getattr open read ioctl lock } { open append write lock } };


#line 40

#line 40
allow mediaserver property_socket:sock_file write;
#line 40
allow mediaserver init:unix_stream_socket connectto;
#line 40

#line 40
allow mediaserver audio_prop:property_service set;
#line 40

#line 40
allow mediaserver audio_prop:file { getattr open read ioctl lock };
#line 40

#line 40


# XXX Label with a specific type?
allow mediaserver sysfs:file { getattr open read ioctl lock };

# Read resources from open apk files passed over Binder.
allow mediaserver apk_data_file:file { read getattr };
allow mediaserver asec_apk_file:file { read getattr };
allow mediaserver ringtone_file:file { read getattr };

# Read /data/data/com.android.providers.telephony files passed over Binder.
allow mediaserver radio_data_file:file { read getattr };

# Use pipes passed over Binder from app domains.
allow mediaserver appdomain:fifo_file { getattr read write };

allow mediaserver rpmsg_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Inter System processes communicate over named pipe (FIFO)
allow mediaserver system_server:fifo_file { getattr open read ioctl lock };


#line 61
allow mediaserver media_rw_data_file:dir { open getattr read search ioctl lock };
#line 61
allow mediaserver media_rw_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 61


# Grant access to read files on appfuse.
allow mediaserver app_fuse_file:file { read getattr };

# Read/[write] to /proc/net/xt_qtaguid/ctrl and /dev/xt_qtaguid
allow mediaserver qtaguid_proc:file { { getattr open read ioctl lock } { open append write lock } };
allow mediaserver qtaguid_device:chr_file { getattr open read ioctl lock };

# Allow abstract socket connection
allow mediaserver rild:unix_stream_socket { connectto read write setopt };

# Needed on some devices for playing DRM protected content,
# but seems expected and appropriate for all devices.

#line 75

#line 75

#line 75
allow mediaserver drmserver_socket:sock_file write;
#line 75
allow mediaserver drmserver:unix_stream_socket connectto;
#line 75

#line 75


# Needed on some devices for playing audio on paired BT device,
# but seems appropriate for all devices.

#line 79

#line 79

#line 79
allow mediaserver bluetooth_socket:sock_file write;
#line 79
allow mediaserver bluetooth:unix_stream_socket connectto;
#line 79

#line 79


# Connect to tee service.
allow mediaserver tee:unix_stream_socket connectto;


#line 84
  allow mediaserver mediaserver_service:service_manager { add find };
#line 84
  neverallow { domain -mediaserver } mediaserver_service:service_manager add;
#line 84

allow mediaserver activity_service:service_manager find;
allow mediaserver appops_service:service_manager find;
allow mediaserver audioserver_service:service_manager find;
allow mediaserver cameraserver_service:service_manager find;
allow mediaserver batterystats_service:service_manager find;
allow mediaserver drmserver_service:service_manager find;
allow mediaserver mediaextractor_service:service_manager find;
allow mediaserver mediacodec_service:service_manager find;
allow mediaserver mediametrics_service:service_manager find;
allow mediaserver media_session_service:service_manager find;
allow mediaserver permission_service:service_manager find;
allow mediaserver power_service:service_manager find;
allow mediaserver processinfo_service:service_manager find;
allow mediaserver scheduling_policy_service:service_manager find;
allow mediaserver surfaceflinger_service:service_manager find;

# for ModDrm/MediaPlayer
allow mediaserver mediadrmserver_service:service_manager find;

# /oem access
allow mediaserver oemfs:dir search;
allow mediaserver oemfs:file { getattr open read ioctl lock };


#line 108
  allow drmserver mediaserver:dir search;
#line 108
  allow drmserver mediaserver:file { read open };
#line 108
  allow drmserver mediaserver:process getattr;
#line 108

allow mediaserver drmserver:drmservice {
    consumeRights
    setPlaybackStatus
    openDecryptSession
    closeDecryptSession
    initializeDecryptUnit
    decrypt
    finalizeDecryptUnit
    pread
};

# only allow unprivileged socket ioctl commands
allowxperm mediaserver self:{ rawip_socket tcp_socket udp_socket }
  ioctl { 
#line 122
{
#line 122
# Socket ioctls for gathering information about the interface
#line 122
0x00008906 0x00008907
#line 122
0x00008910 0x00008912 0x00008913 0x00008915 0x00008917 0x00008919
#line 122
0x0000891b 0x00008921 0x00008933 0x00008938 0x00008942
#line 122
# Wireless extension ioctls. Primarily get functions.
#line 122
0x00008b01 0x00008b05 0x00008b07 0x00008b09 0x00008b0b 0x00008b0d
#line 122
0x00008b0f 0x00008b11 0x00008b12 0x00008b13 0x00008b21 0x00008b23
#line 122
0x00008b25 0x00008b27 0x00008b29 0x00008b2d
#line 122
} {
#line 122
  0x00005411 0x00005451 0x00005401 0x00005402 0x00005413 0x00005414 0x0000540e 0x00005403
#line 122
  0x0000540b 0x00005410 0x0000540f
#line 122
} };

# Access to /data/media.
# This should be removed if sdcardfs is modified to alter the secontext for its
# accesses to the underlying FS.
allow mediaserver media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow mediaserver media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access to media in /data/preloads
allow mediaserver preloads_media_file:file { getattr read ioctl };

allow mediaserver ion_device:chr_file { getattr open read ioctl lock };
allow mediaserver hal_graphics_allocator:fd use;
allow mediaserver hal_camera:fd use;

allow mediaserver system_server:fd use;

# hidl access

#line 140
# Call the hwservicemanager and transfer references to it.
#line 140
allow mediaserver hwservicemanager:binder { call transfer };
#line 140
# Allow hwservicemanager to send out callbacks
#line 140
allow hwservicemanager mediaserver:binder { call transfer };
#line 140
# hwservicemanager performs getpidcon on clients.
#line 140
allow hwservicemanager mediaserver:dir search;
#line 140
allow hwservicemanager mediaserver:file { read open };
#line 140
allow hwservicemanager mediaserver:process getattr;
#line 140
# TODO(b/34274385): hals wait for data to be mounted so they can
#line 140
# start only if persist.hal.binderization is enabled. (for dogfood
#line 140
# stability). getService must also check for data to be mounted
#line 140
# if the vintf promises the hal will be registered over hwbinder.
#line 140

#line 140
allow mediaserver hal_binderization_prop:file { getattr open read ioctl lock };
#line 140

#line 140

#line 140
allow mediaserver persistent_properties_ready_prop:file { getattr open read ioctl lock };
#line 140

#line 140

#line 140
allow mediaserver vold_prop:file { getattr open read ioctl lock };
#line 140

#line 140
# rw access to /dev/hwbinder and /dev/ashmem is presently granted to
#line 140
# all domains in domain.te.
#line 140


#line 141
# Call into the allocator hal
#line 141

#line 141
# Call the server domain and optionally transfer references to it.
#line 141
allow mediaserver hal_allocator_server:binder { call transfer };
#line 141
# Allow the serverdomain to transfer references to the client on the reply.
#line 141
allow hal_allocator_server mediaserver:binder transfer;
#line 141
# Receive and use open files from the server.
#line 141
allow mediaserver hal_allocator_server:fd use;
#line 141
;
#line 141


###
### neverallow rules
###

# mediaserver should never execute any executable without a
# domain transition
neverallow mediaserver { file_type fs_type }:file execute_no_trans;

# do not allow privileged socket ioctl commands
neverallowxperm mediaserver domain:{ rawip_socket tcp_socket udp_socket } ioctl 
#line 152
{
#line 152
# qualcomm rmnet ioctls
#line 152
0x00006900 0x00006902
#line 152
# socket ioctls
#line 152
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 152
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 152
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 152
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 152
0x00008934 0x00008935 0x00008936 0x00008937 0x00008939 0x00008940 0x00008941
#line 152
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 152
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 152
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 152
0x00008991 0x00008992 0x00008993 0x00008994
#line 152
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 152
# device and protocol specific ioctls
#line 152
0x000089f0-0x000089ff
#line 152
0x000089e0-0x000089ef
#line 152
# Wireless extension ioctls
#line 152
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 152
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 152
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 152
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 152
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 152
0x00008b34 0x00008b35 0x00008b36
#line 152
# Dev private ioctl i.e. hardware specific ioctls
#line 152
0x00008be0-0x00008bff
#line 152
};
#line 1 "system/sepolicy/public/modprobe.te"
type modprobe, domain;

allow modprobe proc_modules:file { getattr open read ioctl lock };
allow modprobe self:capability sys_module;
#line 8

#line 1 "system/sepolicy/public/mtp.te"
# vpn tunneling protocol manager
type mtp, domain, domain_deprecated;
type mtp_exec, exec_type, file_type;


#line 5
typeattribute mtp netdomain;
#line 5


# pptp policy
allow mtp self:socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow mtp self:capability net_raw;
allow mtp ppp:process signal;
allow mtp vpn_data_file:dir search;
#line 1 "system/sepolicy/public/net.te"
# Network types
type node, node_type;
type netif, netif_type;
type port, port_type;
#line 1 "system/sepolicy/public/netd.te"
# network manager
type netd, domain, domain_deprecated, mlstrustedsubject;
type netd_exec, exec_type, file_type;


#line 5
typeattribute netd netdomain;
#line 5

# in addition to ioctls whitelisted for all domains, grant netd priv_sock_ioctls.
allowxperm netd self:udp_socket ioctl 
#line 7
{
#line 7
# qualcomm rmnet ioctls
#line 7
0x00006900 0x00006902
#line 7
# socket ioctls
#line 7
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 7
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 7
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 7
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 7
0x00008934 0x00008935 0x00008936 0x00008937 0x00008939 0x00008940 0x00008941
#line 7
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 7
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 7
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 7
0x00008991 0x00008992 0x00008993 0x00008994
#line 7
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 7
# device and protocol specific ioctls
#line 7
0x000089f0-0x000089ff
#line 7
0x000089e0-0x000089ef
#line 7
# Wireless extension ioctls
#line 7
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 7
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 7
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 7
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 7
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 7
0x00008b34 0x00008b35 0x00008b36
#line 7
# Dev private ioctl i.e. hardware specific ioctls
#line 7
0x00008be0-0x00008bff
#line 7
};


#line 9
allow netd cgroup:dir { open getattr read search ioctl lock };
#line 9
allow netd cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 9

allow netd system_server:fd use;

allow netd self:capability { net_admin net_raw kill };
# Note: fsetid is deliberately not included above. fsetid checks are
# triggered by chmod on a directory or file owned by a group other
# than one of the groups assigned to the current process to see if
# the setgid bit should be cleared, regardless of whether the setgid
# bit was even set.  We do not appear to truly need this capability
# for netd to operate.
dontaudit netd self:capability fsetid;

allow netd self:netlink_kobject_uevent_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netd self:netlink_route_socket nlmsg_write;
allow netd self:netlink_nflog_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netd self:netlink_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netd self:netlink_tcpdiag_socket { { create { read getattr write setattr lock append bind connect getopt setopt shutdown } } nlmsg_read nlmsg_write };
allow netd self:netlink_generic_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netd self:netlink_netfilter_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow netd shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow netd system_file:file { getattr execute execute_no_trans };
allow netd devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };


#line 32
allow netd proc_net:dir { open getattr read search ioctl lock };
#line 32
allow netd proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 32

# For /proc/sys/net/ipv[46]/route/flush.
allow netd proc_net:file { { getattr open read ioctl lock } { open append write lock } };

# Enables PppController and interface enumeration (among others)

#line 37
allow netd sysfs_type:dir { open getattr read search ioctl lock };
#line 37
allow netd sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 37

# Allows setting interface MTU
allow netd sysfs:file write;

# TODO: added to match above sysfs rule. Remove me?
allow netd sysfs_usb:file write;

# TODO: netd previously thought it needed these permissions to do WiFi related
#       work.  However, after all the WiFi stuff is gone, we still need them.
#       Why?
allow netd self:capability { dac_override chown };

# Needed to update /data/misc/net/rt_tables
allow netd net_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow netd net_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow netd self:capability fowner;

# Allow netd to spawn dnsmasq in it's own domain
allow netd dnsmasq:process signal;

# Allow netd to start clatd in its own domain
allow netd clatd:process signal;


#line 60

#line 60
allow netd property_socket:sock_file write;
#line 60
allow netd init:unix_stream_socket connectto;
#line 60

#line 60
allow netd ctl_mdnsd_prop:property_service set;
#line 60

#line 60
allow netd ctl_mdnsd_prop:file { getattr open read ioctl lock };
#line 60

#line 60


# Allow netd to publish a binder service and make binder calls.

#line 63
# Call the servicemanager and transfer references to it.
#line 63
allow netd servicemanager:binder { call transfer };
#line 63
# servicemanager performs getpidcon on clients.
#line 63
allow servicemanager netd:dir search;
#line 63
allow servicemanager netd:file { read open };
#line 63
allow servicemanager netd:process getattr;
#line 63
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 63
# all domains in domain.te.
#line 63


#line 64
  allow netd netd_service:service_manager { add find };
#line 64
  neverallow { domain -netd } netd_service:service_manager add;
#line 64

allow netd dumpstate:fifo_file  { getattr write };

# Allow netd to call into the system server so it can check permissions.
allow netd system_server:binder call;
allow netd permission_service:service_manager find;

# Allow netd to talk to the framework service which collects netd events.
allow netd netd_listener_service:service_manager find;

# Allow netd to operate on sockets that are passed to it.
allow netd netdomain:{
  tcp_socket
  udp_socket
  rawip_socket
  tun_socket
} { read write getattr setattr getopt setopt };
allow netd netdomain:fd use;

###
### Neverallow rules
###
### netd should NEVER do any of this

# Block device access.
neverallow netd dev_type:blk_file { read write };

# ptrace any other app
neverallow netd { domain }:process ptrace;

# Write to /system.
neverallow netd system_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# Write to files in /data/data or system files on /data
neverallow netd { app_data_file system_data_file }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# only system_server, dumpstate and netd  may interact with netd over binder
neverallow { domain -system_server -dumpstate -netd } netd_service:service_manager find;
neverallow { domain -system_server -dumpstate } netd:binder call;
neverallow netd { domain -system_server -servicemanager -su }:binder call;
#line 1 "system/sepolicy/public/nfc.te"
# nfc subsystem
type nfc, domain;
#line 1 "system/sepolicy/public/otapreopt_chroot.te"
# otapreopt_chroot executable
type otapreopt_chroot, domain;
type otapreopt_chroot_exec, exec_type, file_type;

# Chroot preparation and execution.
# We need to create an unshared mount namespace, and then mount /data.
allow otapreopt_chroot postinstall_file:dir { search mounton };
allow otapreopt_chroot self:capability { sys_admin sys_chroot };

# This is required to mount /vendor.
allow otapreopt_chroot block_device:dir search;
allow otapreopt_chroot labeledfs:filesystem mount;
# Mounting /vendor can have this side-effect. Ignore denial.
dontaudit otapreopt_chroot kernel:process setsched;

# Allow otapreopt to use file descriptors from update-engine. It will
# close them immediately.
allow otapreopt_chroot postinstall:fd use;
allow otapreopt_chroot update_engine:fd use;
allow otapreopt_chroot update_engine:fifo_file write;
#line 1 "system/sepolicy/public/otapreopt_slot.te"
# otapreopt_slot
#
# This command set moves the artifact corresponding to the current slot
# from /data/ota to /data/dalvik-cache.

type otapreopt_slot, domain, mlstrustedsubject;
type otapreopt_slot_exec, exec_type, file_type;


# The otapreopt_slot renames the OTA dalvik-cache to the regular dalvik-cache, and cleans up
# the directory afterwards. For logging of aggregate size, we need getattr.
allow otapreopt_slot ota_data_file:dir { { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } rename reparent rmdir };
allow otapreopt_slot ota_data_file:{ file lnk_file } getattr;

# Delete old content of the dalvik-cache.
allow otapreopt_slot dalvikcache_data_file:dir { add_name getattr open read remove_name rmdir search write };
allow otapreopt_slot dalvikcache_data_file:file { getattr unlink };
allow otapreopt_slot dalvikcache_data_file:lnk_file { getattr read unlink };

# Allow cppreopts to execute itself using #!/system/bin/sh
allow otapreopt_slot shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Allow running the mv and rm/rmdir commands using otapreopt_slot  permissions.
# Needed so we can move artifacts into /data/dalvik-cache/dalvik-cache.
allow otapreopt_slot toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 1 "system/sepolicy/public/performanced.te"
# performanced
type performanced, domain, mlstrustedsubject;
type performanced_exec, exec_type, file_type;


#line 5
allow performanced pdx_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 5
allow performanced pdx_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 5


# TODO: use file caps to obtain sys_nice instead of setuid / setgid.
allow performanced self:capability { setuid setgid sys_nice };

# Access /proc to validate we're only affecting threads in the same thread group.
# Performanced also shields unbound kernel threads.  It scans every task in the
# root cpu set, but only affects the kernel threads.

#line 13
allow performanced { appdomain bufferhubd kernel sensord surfaceflinger }:dir { open getattr read search ioctl lock };
#line 13
allow performanced { appdomain bufferhubd kernel sensord surfaceflinger }:{ file lnk_file } { getattr open read ioctl lock };
#line 13

dontaudit performanced domain:dir read;
allow performanced { appdomain bufferhubd kernel sensord surfaceflinger }:process setsched;

# Access /dev/cpuset/cpuset.cpus

#line 18
allow performanced cgroup:dir { open getattr read search ioctl lock };
#line 18
allow performanced cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 18

#line 1 "system/sepolicy/public/perfprofd.te"
# perfprofd - perf profile collection daemon
type perfprofd_exec, exec_type, file_type;


#line 4

#line 4
  type perfprofd, domain, domain_deprecated, mlstrustedsubject;
#line 4

#line 4
  # perfprofd needs to control CPU hot-plug in order to avoid kernel
#line 4
  # perfevents problems in cases where CPU goes on/off during measurement;
#line 4
  # this means read access to /sys/devices/system/cpu/possible
#line 4
  # and read/write access to /sys/devices/system/cpu/cpu*/online
#line 4
  allow perfprofd sysfs_devices_system_cpu:file { { getattr open read ioctl lock } { open append write lock } };
#line 4

#line 4
  # perfprofd checks for the existence of and then invokes simpleperf;
#line 4
  # simpleperf retains perfprofd domain after exec
#line 4
  allow perfprofd system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 4

#line 4
  # perfprofd reads a config file from /data/data/com.google.android.gms/files
#line 4
  allow perfprofd app_data_file:file { getattr open read ioctl lock };
#line 4
  allow perfprofd app_data_file:dir search;
#line 4
  allow perfprofd self:capability { dac_override };
#line 4

#line 4
  # perfprofd opens a file for writing in /data/misc/perfprofd
#line 4
  allow perfprofd perfprofd_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 4
  allow perfprofd perfprofd_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
#line 4

#line 4
  # perfprofd uses the system log
#line 4
  
#line 4
allow perfprofd logcat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 4

#line 4

#line 4

#line 4
allow perfprofd logdr_socket:sock_file write;
#line 4
allow perfprofd logd:unix_stream_socket connectto;
#line 4

#line 4

#line 4
;
#line 4
  
#line 4

#line 4
allow perfprofd logdw_socket:sock_file write;
#line 4
allow perfprofd logd:unix_dgram_socket sendto;
#line 4

#line 4
allow perfprofd pmsg_device:chr_file { open append write lock };
#line 4
;
#line 4

#line 4
  # perfprofd inspects /sys/power/wake_unlock
#line 4
  
#line 4
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 4
allow perfprofd sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 4
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 4
allow perfprofd self:capability2 block_suspend;
#line 4
;
#line 4

#line 4
  # simpleperf uses ioctl() to turn on kernel perf events measurements
#line 4
  allow perfprofd self:capability sys_admin;
#line 4

#line 4
  # simpleperf needs to examine /proc to collect task/thread info
#line 4
  
#line 4
allow perfprofd domain:dir { open getattr read search ioctl lock };
#line 4
allow perfprofd domain:{ file lnk_file } { getattr open read ioctl lock };
#line 4

#line 4

#line 4
  # simpleperf needs to access /proc/<pid>/exec
#line 4
  allow perfprofd self:capability { sys_resource sys_ptrace };
#line 4
  neverallow perfprofd domain:process ptrace;
#line 4

#line 4
  # simpleperf needs open/read any file that turns up in a profile
#line 4
  # to see whether it has a build ID
#line 4
  allow perfprofd exec_type:file { getattr open read ioctl lock };
#line 4

#line 4
  # simpleperf examines debugfs on startup to collect tracepoint event types
#line 4
  allow perfprofd debugfs_tracing:file { getattr open read ioctl lock };
#line 4

#line 4
  # simpleperf is going to execute "sleep"
#line 4
  allow perfprofd toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 4

#line 4
  # needed for simpleperf on some kernels
#line 4
  allow perfprofd self:capability ipc_lock;
#line 4

#line 57

#line 1 "system/sepolicy/public/platform_app.te"
###
### Apps signed with the platform key.
###

type platform_app, domain;
#line 1 "system/sepolicy/public/postinstall.te"
# Domain where the postinstall program runs during the update.
# Extend the permissions in this domain to allow this program to access other
# files needed by the specific device on your device's sepolicy directory.
type postinstall, domain;

# Allow postinstall to write to its stdout/stderr when redirected via pipes to
# update_engine.
allow postinstall update_engine_common:fd use;
allow postinstall update_engine_common:fifo_file { { getattr open read ioctl lock } { open append write lock } };

# Allow postinstall to read and execute directories and files in the same
# mounted location.
allow postinstall postinstall_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow postinstall postinstall_file:lnk_file { getattr open read ioctl lock };
allow postinstall postinstall_file:dir { open getattr read search ioctl lock };

# Allow postinstall to execute the shell or other system executables.
allow postinstall shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow postinstall system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow postinstall toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

#
# For OTA dexopt.
#

# Allow postinstall scripts to talk to the system server.

#line 27
# Call the servicemanager and transfer references to it.
#line 27
allow postinstall servicemanager:binder { call transfer };
#line 27
# servicemanager performs getpidcon on clients.
#line 27
allow servicemanager postinstall:dir search;
#line 27
allow servicemanager postinstall:file { read open };
#line 27
allow servicemanager postinstall:process getattr;
#line 27
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 27
# all domains in domain.te.
#line 27


#line 28
# Call the server domain and optionally transfer references to it.
#line 28
allow postinstall system_server:binder { call transfer };
#line 28
# Allow the serverdomain to transfer references to the client on the reply.
#line 28
allow system_server postinstall:binder transfer;
#line 28
# Receive and use open files from the server.
#line 28
allow postinstall system_server:fd use;
#line 28


# Need to talk to the otadexopt service.
allow postinstall otadexopt_service:service_manager find;

# No domain other than update_engine and recovery (via update_engine_sideload)
# should transition to postinstall, as it is only meant to run during the
# update.
neverallow { domain -update_engine -recovery } postinstall:process { transition dyntransition };
#line 1 "system/sepolicy/public/postinstall_dexopt.te"
# Domain for the otapreopt executable, running under postinstall_dexopt
#
# Note: otapreopt is a driver for dex2oat, and reuses parts of installd. As such,
# this is derived and adapted from installd.te.

type postinstall_dexopt, domain;

allow postinstall_dexopt self:capability { chown dac_override fowner setgid setuid };

allow postinstall_dexopt postinstall_file:dir { getattr search };
allow postinstall_dexopt postinstall_file:lnk_file read;
allow postinstall_dexopt proc:file { getattr open read };
allow postinstall_dexopt tmpfs:file read;

# Note: /data/ota is created by init (see system/core/rootdir/init.rc) to avoid giving access
# here and having to relabel the directory.

# Read app data (APKs) as input to dex2oat.

#line 19
allow postinstall_dexopt apk_data_file:dir { open getattr read search ioctl lock };
#line 19
allow postinstall_dexopt apk_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 19

# Access to app oat directory.

#line 21
allow postinstall_dexopt dalvikcache_data_file:dir { open getattr read search ioctl lock };
#line 21
allow postinstall_dexopt dalvikcache_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 21


# Read profile data.
allow postinstall_dexopt user_profile_data_file:dir { getattr search };
allow postinstall_dexopt user_profile_data_file:file { getattr open read ioctl lock };

# Write to /data/ota(/*). Create symlinks in /data/ota(/*)
allow postinstall_dexopt ota_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow postinstall_dexopt ota_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow postinstall_dexopt ota_data_file:lnk_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Need to write .b files, which are dalvikcache_data_file, not ota_data_file.
# TODO: See whether we can apply ota_data_file?
allow postinstall_dexopt dalvikcache_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow postinstall_dexopt dalvikcache_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Allow labeling of files under /data/app/com.example/oat/
# TODO: Restrict to .b suffix?
allow postinstall_dexopt dalvikcache_data_file:dir relabelto;
allow postinstall_dexopt dalvikcache_data_file:file { relabelto link };

# Check validity of SELinux context before use.

#line 43

#line 43
allow postinstall_dexopt selinuxfs:dir { open getattr read search ioctl lock };
#line 43
allow postinstall_dexopt selinuxfs:{ file lnk_file } { getattr open read ioctl lock };
#line 43

#line 43
allow postinstall_dexopt selinuxfs:file { open append write lock };
#line 43
allow postinstall_dexopt kernel:security check_context;
#line 43


#line 44

#line 44
allow postinstall_dexopt selinuxfs:dir { open getattr read search ioctl lock };
#line 44
allow postinstall_dexopt selinuxfs:{ file lnk_file } { getattr open read ioctl lock };
#line 44

#line 44
allow postinstall_dexopt selinuxfs:file { open append write lock };
#line 44
allow postinstall_dexopt kernel:security compute_av;
#line 44
allow postinstall_dexopt self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto name_bind };
#line 44



# Postinstall wants to know about our child.
allow postinstall_dexopt postinstall:process sigchld;

# Allow otapreopt to use file descriptors from otapreopt_chroot.
# TODO: Probably we can actually close file descriptors...
allow postinstall_dexopt otapreopt_chroot:fd use;

allow postinstall_dexopt cpuctl_device:dir search;
#line 1 "system/sepolicy/public/ppp.te"
# Point to Point Protocol daemon
type ppp, domain, domain_deprecated;
type ppp_device, dev_type;
type ppp_exec, exec_type, file_type;


#line 6
typeattribute ppp netdomain;
#line 6



#line 8
allow ppp proc_net:dir { open getattr read search ioctl lock };
#line 8
allow ppp proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 8


allow ppp mtp:socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };

# ioctls needed for VPN.
allowxperm ppp self:udp_socket ioctl 
#line 13
{
#line 13
# qualcomm rmnet ioctls
#line 13
0x00006900 0x00006902
#line 13
# socket ioctls
#line 13
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 13
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 13
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 13
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 13
0x00008934 0x00008935 0x00008936 0x00008937 0x00008939 0x00008940 0x00008941
#line 13
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 13
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 13
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 13
0x00008991 0x00008992 0x00008993 0x00008994
#line 13
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 13
# device and protocol specific ioctls
#line 13
0x000089f0-0x000089ff
#line 13
0x000089e0-0x000089ef
#line 13
# Wireless extension ioctls
#line 13
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 13
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 13
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 13
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 13
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 13
0x00008b34 0x00008b35 0x00008b36
#line 13
# Dev private ioctl i.e. hardware specific ioctls
#line 13
0x00008be0-0x00008bff
#line 13
};
allowxperm ppp mtp:socket ioctl {
#line 14
0x7436 0x7437 0x7438 0x7439
#line 14
0x743a 0x743b 0x743c 0x743d
#line 14
0x743e 0x743f 0x7440 0x7441
#line 14
0x7446 0x7447 0x744b 0x744c
#line 14
0x744d 0x744e 0x744f
#line 14
0x7450 0x7451 0x7452 0x7453
#line 14
0x7454 0x7455 0x7456 0x7457
#line 14
0x7458 0x7459 0x745a 0x7480
#line 14
0x7481 0x7482 0x7483 0x7484
#line 14
0x7485 0x7486 0x7487 0x7488
#line 14
};

allow ppp mtp:unix_dgram_socket { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown };
allow ppp ppp_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow ppp self:capability net_admin;
allow ppp system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow ppp vpn_data_file:dir { open search write add_name remove_name lock };
allow ppp vpn_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow ppp mtp:fd use;
#line 1 "system/sepolicy/public/preopt2cachename.te"
# preopt2cachename executable
#
# This executable translates names from the preopted versions the build system
# creates to the names the runtime expects in the data directory.
type preopt2cachename, domain;
type preopt2cachename_exec, exec_type, file_type;

# Allow write to stdout.
allow preopt2cachename cppreopts:fd use;
allow preopt2cachename cppreopts:fifo_file { getattr read write };

# Allow write to logcat.
allow preopt2cachename proc_net:file { getattr open read ioctl lock };
#line 1 "system/sepolicy/public/priv_app.te"
###
### A domain for further sandboxing privileged apps.
###

type priv_app, domain;
#line 1 "system/sepolicy/public/profman.te"
# profman
type profman, domain;
type profman_exec, exec_type, file_type;

allow profman user_profile_data_file:file { getattr read write lock };

# Dumping profile info opens the application APK file for pretty printing.
allow profman asec_apk_file:file { read };
allow profman apk_data_file:file { read };
allow profman oemfs:file { read };
# Reading an APK opens a ZipArchive, which unpack to tmpfs.
allow profman tmpfs:file { read };
allow profman profman_dump_data_file:file { write };

allow profman installd:fd use;

# Allow profman to analyze profiles for the secondary dex files. These
# are application dex files reported back to the framework when using
# BaseDexClassLoader.
allow profman app_data_file:file { getattr read write lock };

###
### neverallow rules
###

neverallow profman app_data_file:{ file lnk_file sock_file fifo_file } open;
#line 1 "system/sepolicy/public/property.te"
type audio_prop, property_type, core_property_type;
type boottime_prop, property_type;
type bluetooth_prop, property_type;
type config_prop, property_type, core_property_type;
type cppreopt_prop, property_type, core_property_type;
type ctl_bootanim_prop, property_type;
type ctl_bugreport_prop, property_type;
type ctl_console_prop, property_type;
type ctl_default_prop, property_type;
type ctl_dumpstate_prop, property_type;
type ctl_fuse_prop, property_type;
type ctl_mdnsd_prop, property_type;
type ctl_rildaemon_prop, property_type;
type dalvik_prop, property_type, core_property_type;
type debuggerd_prop, property_type, core_property_type;
type debug_prop, property_type, core_property_type;
type default_prop, property_type, core_property_type;
type device_logging_prop, property_type;
type dhcp_prop, property_type, core_property_type;
type dumpstate_options_prop, property_type;
type dumpstate_prop, property_type, core_property_type;
type ffs_prop, property_type, core_property_type;
type fingerprint_prop, property_type, core_property_type;
type firstboot_prop, property_type;
type hwservicemanager_prop, property_type;
type logd_prop, property_type, core_property_type;
type logpersistd_logging_prop, property_type;
type log_prop, property_type, log_property_type;
type log_tag_prop, property_type, log_property_type;
type mmc_prop, property_type;
type net_dns_prop, property_type;
type net_radio_prop, property_type, core_property_type;
type nfc_prop, property_type, core_property_type;
type overlay_prop, property_type;
type pan_result_prop, property_type, core_property_type;
type persist_debug_prop, property_type, core_property_type;
type persistent_properties_ready_prop, property_type;
type powerctl_prop, property_type, core_property_type;
type radio_prop, property_type, core_property_type;
type restorecon_prop, property_type, core_property_type;
type safemode_prop, property_type;
type serialno_prop, property_type;
type shell_prop, property_type, core_property_type;
type system_prop, property_type, core_property_type;
type system_radio_prop, property_type, core_property_type;
type hal_binderization_prop, property_type;
type vold_prop, property_type, core_property_type;
type wifi_log_prop, property_type, log_property_type;
type wifi_prop, property_type;

allow property_type tmpfs:filesystem associate;

###
### Neverallow rules
###

# core_property_type should not be used for new properties or
# device specific properties. Properties with this attribute
# are readable to everyone, which is overly broad and should
# be avoided.
# New properties should have appropriate read / write access
# control rules written.

neverallow * {
  core_property_type
  -audio_prop
  -config_prop
  -cppreopt_prop
  -dalvik_prop
  -debuggerd_prop
  -debug_prop
  -default_prop
  -dhcp_prop
  -dumpstate_prop
  -ffs_prop
  -fingerprint_prop
  -logd_prop
  -net_radio_prop
  -nfc_prop
  -pan_result_prop
  -persist_debug_prop
  -powerctl_prop
  -radio_prop
  -restorecon_prop
  -shell_prop
  -system_prop
  -system_radio_prop
  -vold_prop
}:file { { append create link unlink relabelfrom rename setattr write } open read ioctl lock };
#line 1 "system/sepolicy/public/racoon.te"
# IKE key management daemon
type racoon, domain;
type racoon_exec, exec_type, file_type;

typeattribute racoon mlstrustedsubject;


#line 7
typeattribute racoon netdomain;
#line 7

allowxperm racoon self:udp_socket ioctl { 0x00008914 0x00008916 0x0000891c };


#line 10
# Call the servicemanager and transfer references to it.
#line 10
allow racoon servicemanager:binder { call transfer };
#line 10
# servicemanager performs getpidcon on clients.
#line 10
allow servicemanager racoon:dir search;
#line 10
allow servicemanager racoon:file { read open };
#line 10
allow servicemanager racoon:process getattr;
#line 10
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 10
# all domains in domain.te.
#line 10


allow racoon tun_device:chr_file { getattr open read ioctl lock };
allow racoon cgroup:dir { add_name create };
allow racoon kernel:system module_request;

allow racoon self:key_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow racoon self:tun_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow racoon self:capability { net_admin net_bind_service net_raw };

# XXX: should we give ip-up-vpn its own label (currently racoon domain)
allow racoon system_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow racoon vpn_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow racoon vpn_data_file:dir { open search write add_name remove_name lock };


#line 25
  allow keystore racoon:dir search;
#line 25
  allow keystore racoon:file { read open };
#line 25
  allow keystore racoon:process getattr;
#line 25
  allow racoon keystore_service:service_manager find;
#line 25
  
#line 25
# Call the server domain and optionally transfer references to it.
#line 25
allow racoon keystore:binder { call transfer };
#line 25
# Allow the serverdomain to transfer references to the client on the reply.
#line 25
allow keystore racoon:binder transfer;
#line 25
# Receive and use open files from the server.
#line 25
allow racoon keystore:fd use;
#line 25

#line 25


# Racoon (VPN) has a restricted set of permissions from the default.
allow racoon keystore:keystore_key {
	get
	sign
	verify
};
#line 1 "system/sepolicy/public/radio.te"
# phone subsystem
type radio, domain, domain_deprecated, mlstrustedsubject;


#line 4
typeattribute radio netdomain;
#line 4


#line 5
typeattribute radio bluetoothdomain;
#line 5


#line 6
typeattribute radio binderservicedomain;
#line 6


# Talks to rild via the rild socket.

#line 9

#line 9

#line 9
allow radio rild_socket:sock_file write;
#line 9
allow radio rild:unix_stream_socket connectto;
#line 9

#line 9


# Data file accesses.
allow radio radio_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow radio radio_data_file:{ file lnk_file sock_file fifo_file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

allow radio alarm_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow radio net_data_file:dir search;
allow radio net_data_file:file { getattr open read ioctl lock };

# Property service

#line 21

#line 21
allow radio property_socket:sock_file write;
#line 21
allow radio init:unix_stream_socket connectto;
#line 21

#line 21
allow radio radio_prop:property_service set;
#line 21

#line 21
allow radio radio_prop:file { getattr open read ioctl lock };
#line 21

#line 21


#line 22

#line 22
allow radio property_socket:sock_file write;
#line 22
allow radio init:unix_stream_socket connectto;
#line 22

#line 22
allow radio net_radio_prop:property_service set;
#line 22

#line 22
allow radio net_radio_prop:file { getattr open read ioctl lock };
#line 22

#line 22


# ctl interface

#line 25

#line 25
allow radio property_socket:sock_file write;
#line 25
allow radio init:unix_stream_socket connectto;
#line 25

#line 25
allow radio ctl_rildaemon_prop:property_service set;
#line 25

#line 25
allow radio ctl_rildaemon_prop:file { getattr open read ioctl lock };
#line 25

#line 25



#line 27
  allow radio radio_service:service_manager { add find };
#line 27
  neverallow { domain -radio } radio_service:service_manager add;
#line 27

allow radio audioserver_service:service_manager find;
allow radio cameraserver_service:service_manager find;
allow radio drmserver_service:service_manager find;
allow radio mediaserver_service:service_manager find;
allow radio nfc_service:service_manager find;
allow radio surfaceflinger_service:service_manager find;
allow radio app_api_service:service_manager find;
allow radio system_api_service:service_manager find;

# Perform HwBinder IPC.

#line 38
# Call the hwservicemanager and transfer references to it.
#line 38
allow radio hwservicemanager:binder { call transfer };
#line 38
# Allow hwservicemanager to send out callbacks
#line 38
allow hwservicemanager radio:binder { call transfer };
#line 38
# hwservicemanager performs getpidcon on clients.
#line 38
allow hwservicemanager radio:dir search;
#line 38
allow hwservicemanager radio:file { read open };
#line 38
allow hwservicemanager radio:process getattr;
#line 38
# TODO(b/34274385): hals wait for data to be mounted so they can
#line 38
# start only if persist.hal.binderization is enabled. (for dogfood
#line 38
# stability). getService must also check for data to be mounted
#line 38
# if the vintf promises the hal will be registered over hwbinder.
#line 38

#line 38
allow radio hal_binderization_prop:file { getattr open read ioctl lock };
#line 38

#line 38

#line 38
allow radio persistent_properties_ready_prop:file { getattr open read ioctl lock };
#line 38

#line 38

#line 38
allow radio vold_prop:file { getattr open read ioctl lock };
#line 38

#line 38
# rw access to /dev/hwbinder and /dev/ashmem is presently granted to
#line 38
# all domains in domain.te.
#line 38


#line 39
# Call the server domain and optionally transfer references to it.
#line 39
allow radio hal_telephony:binder { call transfer };
#line 39
# Allow the serverdomain to transfer references to the client on the reply.
#line 39
allow hal_telephony radio:binder transfer;
#line 39
# Receive and use open files from the server.
#line 39
allow radio hal_telephony:fd use;
#line 39


#line 40
typeattribute radio halclientdomain;
#line 40
typeattribute radio hal_telephony_client;
#line 40

#line 40
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 40
# once we know at build time whether a HAL is going to run in
#line 40
# passthrough or binderized mode.
#line 40
typeattribute radio hal_telephony;
#line 40
# Find passthrough HAL implementations
#line 40
allow hal_telephony system_file:dir { open getattr read search ioctl lock };
#line 40

#line 1 "system/sepolicy/public/recovery.te"
# recovery console (used in recovery init.rc for /sbin/recovery)

# Declare the domain unconditionally so we can always reference it
# in neverallow rules.
type recovery, domain, domain_deprecated;

# But the allow rules are only included in the recovery policy.
# Otherwise recovery is only allowed the domain rules.
#line 118


###
### neverallow rules
###

# Recovery should never touch /data.
#
# In particular, if /data is encrypted, it is not accessible
# to recovery anyway.
#
# For now, we only enforce write/execute restrictions, as domain.te
# contains a number of read-only rules that apply to all
# domains, including recovery.
#
# TODO: tighten this up further.
neverallow recovery data_file_type:file { { append create link unlink relabelfrom rename setattr write } { execute execute_no_trans } };
neverallow recovery data_file_type:dir { add_name create link relabelfrom remove_name rename reparent rmdir setattr write };
#line 1 "system/sepolicy/public/recovery_persist.te"
# android recovery persistent log manager
type recovery_persist, domain;
type recovery_persist_exec, exec_type, file_type;

allow recovery_persist pstorefs:dir search;
allow recovery_persist pstorefs:file { getattr open read ioctl lock };

allow recovery_persist recovery_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow recovery_persist recovery_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };

###
### Neverallow rules
###
### recovery_persist should NEVER do any of this

# Block device access.
neverallow recovery_persist dev_type:blk_file { read write };

# ptrace any other app
neverallow recovery_persist domain:process ptrace;

# Write to /system.
neverallow recovery_persist system_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# Write to files in /data/data
neverallow recovery_persist { app_data_file system_data_file }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

#line 1 "system/sepolicy/public/recovery_refresh.te"
# android recovery refresh log manager
type recovery_refresh, domain;
type recovery_refresh_exec, exec_type, file_type;

allow recovery_refresh pstorefs:dir search;
allow recovery_refresh pstorefs:file { getattr open read ioctl lock };
# NB: domain inherits write_logd which hands us write to pmsg_device

###
### Neverallow rules
###
### recovery_refresh should NEVER do any of this

# Block device access.
neverallow recovery_refresh dev_type:blk_file { read write };

# ptrace any other app
neverallow recovery_refresh domain:process ptrace;

# Write to /system.
neverallow recovery_refresh system_file:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;

# Write to files in /data/data or system files on /data
neverallow recovery_refresh { app_data_file system_data_file }:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } write;
#line 1 "system/sepolicy/public/rild.te"
# rild - radio interface layer daemon
type rild, domain, domain_deprecated;

#line 3
typeattribute rild halserverdomain;
#line 3
typeattribute rild hal_telephony_server;
#line 3
typeattribute rild hal_telephony;
#line 3



#line 5
typeattribute rild netdomain;
#line 5

allowxperm rild self:udp_socket ioctl 
#line 6
{
#line 6
# qualcomm rmnet ioctls
#line 6
0x00006900 0x00006902
#line 6
# socket ioctls
#line 6
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 6
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 6
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 6
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 6
0x00008934 0x00008935 0x00008936 0x00008937 0x00008939 0x00008940 0x00008941
#line 6
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 6
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 6
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 6
0x00008991 0x00008992 0x00008993 0x00008994
#line 6
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 6
# device and protocol specific ioctls
#line 6
0x000089f0-0x000089ff
#line 6
0x000089e0-0x000089ef
#line 6
# Wireless extension ioctls
#line 6
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 6
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 6
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 6
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 6
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 6
0x00008b34 0x00008b35 0x00008b36
#line 6
# Dev private ioctl i.e. hardware specific ioctls
#line 6
0x00008be0-0x00008bff
#line 6
};

allow rild self:netlink_route_socket nlmsg_write;
allow rild kernel:system module_request;
allow rild self:capability { setpcap setgid setuid net_admin net_raw };
allow rild alarm_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow rild cgroup:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow rild cgroup:{ file lnk_file } { getattr open read ioctl lock };
allow rild radio_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow rild radio_device:blk_file { getattr open read ioctl lock };
allow rild mtd_device:dir search;
allow rild efs_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow rild efs_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow rild shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow rild bluetooth_efs_file:file { getattr open read ioctl lock };
allow rild bluetooth_efs_file:dir { open getattr read search ioctl lock };
allow rild radio_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow rild radio_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow rild sdcard_type:dir { open getattr read search ioctl lock };
allow rild system_data_file:dir { open getattr read search ioctl lock };
allow rild system_data_file:file { getattr open read ioctl lock };
allow rild system_file:file { getattr execute execute_no_trans };

# property service

#line 30

#line 30
allow rild property_socket:sock_file write;
#line 30
allow rild init:unix_stream_socket connectto;
#line 30

#line 30
allow rild radio_prop:property_service set;
#line 30

#line 30
allow rild radio_prop:file { getattr open read ioctl lock };
#line 30

#line 30


allow rild tty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Allow rild to create and use netlink sockets.
allow rild self:netlink_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow rild self:netlink_generic_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow rild self:netlink_kobject_uevent_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };

# Access to wake locks

#line 40
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 40
allow rild sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 40
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 40
allow rild self:capability2 block_suspend;
#line 40



#line 42
allow rild proc:dir { open getattr read search ioctl lock };
#line 42
allow rild proc:{ file lnk_file } { getattr open read ioctl lock };
#line 42


#line 43
allow rild proc_net:dir { open getattr read search ioctl lock };
#line 43
allow rild proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 43


#line 44
allow rild sysfs_type:dir { open getattr read search ioctl lock };
#line 44
allow rild sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 44


#line 45
allow rild system_file:dir { open getattr read search ioctl lock };
#line 45
allow rild system_file:{ file lnk_file } { getattr open read ioctl lock };
#line 45


# granting the ioctl permission for rild should be device specific
allow rild self:socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };

#line 1 "system/sepolicy/public/runas.te"
type runas, domain, domain_deprecated, mlstrustedsubject;
type runas_exec, exec_type, file_type;

allow runas adbd:process sigchld;
allow runas shell:fd use;
allow runas shell:fifo_file { read write };
allow runas shell:unix_stream_socket { read write };
allow runas devpts:chr_file { read write ioctl };
allow runas shell_data_file:file { read write };

# run-as reads package information.
allow runas system_data_file:file { getattr open read ioctl lock };

# run-as checks and changes to the app data dir.
dontaudit runas self:capability dac_override;
allow runas app_data_file:dir { getattr search };

# run-as switches to the app UID/GID.
allow runas self:capability { setuid setgid };

# run-as switches to the app security context.

#line 22

#line 22
allow runas selinuxfs:dir { open getattr read search ioctl lock };
#line 22
allow runas selinuxfs:{ file lnk_file } { getattr open read ioctl lock };
#line 22

#line 22
allow runas selinuxfs:file { open append write lock };
#line 22
allow runas kernel:security check_context;
#line 22
 # validate context
allow runas self:process setcurrent;
allow runas { appdomain -system_app }:process dyntransition; # setcon

###
### neverallow rules
###

# run-as cannot have capabilities other than CAP_SETUID and CAP_SETGID
neverallow runas self:capability ~{ setuid setgid };
neverallow runas self:capability2 *;
#line 1 "system/sepolicy/public/sdcardd.te"
type sdcardd, domain, domain_deprecated;
type sdcardd_exec, exec_type, file_type;

allow sdcardd cgroup:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow sdcardd fuse_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow sdcardd rootfs:dir mounton;  # TODO: deprecated in M
allow sdcardd sdcardfs:filesystem remount;
allow sdcardd tmpfs:dir { open getattr read search ioctl lock };
allow sdcardd mnt_media_rw_file:dir { open getattr read search ioctl lock };
allow sdcardd storage_file:dir search;
allow sdcardd storage_stub_file:dir { search mounton };
allow sdcardd sdcard_type:filesystem { mount unmount };
allow sdcardd self:capability { setuid setgid dac_override sys_admin sys_resource };

allow sdcardd sdcard_type:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow sdcardd sdcard_type:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

allow sdcardd media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow sdcardd media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Read /data/system/packages.list.
allow sdcardd system_data_file:file { getattr open read ioctl lock };

# Read /data/.layout_version
allow sdcardd install_data_file:file { getattr open read ioctl lock };

# Allow stdin/out back to vold
allow sdcardd vold:fd use;
allow sdcardd vold:fifo_file { read write getattr };

# Allow running on top of expanded storage
allow sdcardd mnt_expand_file:dir search;

# access /proc/filesystems
allow sdcardd proc:file { getattr open read ioctl lock };

###
### neverallow rules
###

# The sdcard daemon should no longer be started from init
neverallow init sdcardd_exec:file execute;
neverallow init sdcardd:process { transition dyntransition };
#line 1 "system/sepolicy/public/sensord.te"
# sensord
type sensord, domain, mlstrustedsubject;
type sensord_exec, exec_type, file_type;


#line 5
typeattribute sensord halclientdomain;
#line 5
typeattribute sensord hal_graphics_allocator_client;
#line 5

#line 5
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 5
# once we know at build time whether a HAL is going to run in
#line 5
# passthrough or binderized mode.
#line 5
typeattribute sensord hal_graphics_allocator;
#line 5
# Find passthrough HAL implementations
#line 5
allow hal_graphics_allocator system_file:dir { open getattr read search ioctl lock };
#line 5

allow sensord hal_graphics_allocator:fd use;


#line 8
allow sensord pdx_socket:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
#line 8
allow sensord pdx_socket:sock_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 8


#line 9
# Open the socket.
#line 9
allow sensord pdx_socket:dir { open getattr read search ioctl lock };
#line 9
allow sensord pdx_socket:sock_file { { getattr open read ioctl lock } { open append write lock } };
#line 9
# Use the socket.
#line 9
allow sensord bufferhubd:unix_stream_socket { connectto read write shutdown };
#line 9
# Clients recieve an event fd from the server.
#line 9
allow sensord bufferhubd:fd use;
#line 9
# Servers may receive sync fences, gralloc buffers, etc, from clients.
#line 9
# This could be tightened on a per-server basis, but keeping track of service
#line 9
# clients is error prone.
#line 9
allow bufferhubd sensord:fd use;
#line 9


#line 10
# Open the socket.
#line 10
allow sensord pdx_socket:dir { open getattr read search ioctl lock };
#line 10
allow sensord pdx_socket:sock_file { { getattr open read ioctl lock } { open append write lock } };
#line 10
# Use the socket.
#line 10
allow sensord performanced:unix_stream_socket { connectto read write shutdown };
#line 10
# Clients recieve an event fd from the server.
#line 10
allow sensord performanced:fd use;
#line 10
# Servers may receive sync fences, gralloc buffers, etc, from clients.
#line 10
# This could be tightened on a per-server basis, but keeping track of service
#line 10
# clients is error prone.
#line 10
allow performanced sensord:fd use;
#line 10


# Access /dev/ion
allow sensord ion_device:chr_file { getattr open read ioctl lock };

allow sensord sensors_device:chr_file { { getattr open read ioctl lock } { open append write lock } };


#line 17
# Call the servicemanager and transfer references to it.
#line 17
allow sensord servicemanager:binder { call transfer };
#line 17
# servicemanager performs getpidcon on clients.
#line 17
allow servicemanager sensord:dir search;
#line 17
allow servicemanager sensord:file { read open };
#line 17
allow servicemanager sensord:process getattr;
#line 17
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 17
# all domains in domain.te.
#line 17


#line 18
# Call the server domain and optionally transfer references to it.
#line 18
allow sensord system_server:binder { call transfer };
#line 18
# Allow the serverdomain to transfer references to the client on the reply.
#line 18
allow system_server sensord:binder transfer;
#line 18
# Receive and use open files from the server.
#line 18
allow sensord system_server:fd use;
#line 18

allow sensord system_server:unix_stream_socket { read write };

allow sensord sensorservice_service:service_manager find;
# permission_service is used by the NDK sensor APIs.
allow sensord permission_service:service_manager find;
#line 1 "system/sepolicy/public/service.te"
type audioserver_service,       service_manager_type;
type batteryproperties_service, app_api_service, ephemeral_app_api_service, service_manager_type;
type bluetooth_service,         service_manager_type;
type cameraserver_service,      service_manager_type;
type default_android_service,   service_manager_type;
type drmserver_service,         service_manager_type;
type dumpstate_service,         service_manager_type;
type fingerprintd_service,      service_manager_type;
type hal_fingerprint_service,   service_manager_type;
type gatekeeper_service,        app_api_service, service_manager_type;
type gpu_service,               service_manager_type;
type inputflinger_service,      service_manager_type;
type incident_service,          service_manager_type;
type installd_service,          service_manager_type;
type keystore_service,          service_manager_type;
type mediaserver_service,       service_manager_type;
type mediametrics_service,      service_manager_type;
type mediaextractor_service,    service_manager_type;
type mediacodec_service,        service_manager_type;
type mediadrmserver_service,    service_manager_type;
type mediacasserver_service,    service_manager_type;
type netd_service,              service_manager_type;
type nfc_service,               service_manager_type;
type radio_service,             service_manager_type;
type storaged_service,          service_manager_type;
type surfaceflinger_service,    service_manager_type;
type system_app_service,        service_manager_type;
type update_engine_service,     service_manager_type;
type virtual_touchpad_service,  service_manager_type;

# system_server_services broken down
type accessibility_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type account_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type activity_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type alarm_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type appops_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type appwidget_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type assetatlas_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type audio_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type autofill_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type backup_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type batterystats_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type battery_service, system_server_service, service_manager_type;
type bluetooth_manager_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type cameraproxy_service, system_server_service, service_manager_type;
type clipboard_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type contexthub_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type IProxyService_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type commontime_management_service, system_server_service, service_manager_type;
type companion_device_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type connectivity_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type connmetrics_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type consumer_ir_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type content_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type country_detector_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
# Note: The coverage_service should only be enabled for userdebug / eng builds that were compiled
# with EMMA_INSTRUMENT=true. We should consider locking this down in the future.
type coverage_service, system_server_service, service_manager_type;
type cpuinfo_service, system_api_service, system_server_service, service_manager_type;
type dbinfo_service, system_api_service, system_server_service, service_manager_type;
type device_policy_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type deviceidle_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type device_identifiers_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type devicestoragemonitor_service, system_server_service, service_manager_type;
type diskstats_service, system_api_service, system_server_service, service_manager_type;
type display_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type font_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type netd_listener_service, system_server_service, service_manager_type;
type DockObserver_service, system_server_service, service_manager_type;
type dreams_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type dropbox_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type ethernet_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type fingerprint_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type gfxinfo_service, system_api_service, system_server_service, service_manager_type;
type graphicsstats_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type hardware_service, system_server_service, service_manager_type;
type hardware_properties_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type hdmi_control_service, system_api_service, system_server_service, service_manager_type;
type input_method_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type input_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type imms_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type jobscheduler_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type launcherapps_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type location_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type lock_settings_service, system_api_service, system_server_service, service_manager_type;
type media_projection_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type media_router_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type media_session_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type meminfo_service, system_api_service, system_server_service, service_manager_type;
type midi_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type mount_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type netpolicy_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type netstats_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type network_management_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type network_score_service, system_api_service, system_server_service, service_manager_type;
type network_time_update_service, system_server_service, service_manager_type;
type notification_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type otadexopt_service, system_server_service, service_manager_type;
type overlay_service, system_server_service, service_manager_type;
type package_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type permission_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type persistent_data_block_service, system_api_service, system_server_service, service_manager_type;
type pinner_service, system_server_service, service_manager_type;
type power_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type print_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type processinfo_service, system_server_service, service_manager_type;
type procstats_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type recovery_service, system_server_service, service_manager_type;
type registry_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type restrictions_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type rttmanager_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type samplingprofiler_service, system_server_service, service_manager_type;
type scheduling_policy_service, system_server_service, service_manager_type;
type search_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type sec_key_att_app_id_provider_service, app_api_service, system_server_service, service_manager_type;
type sensorservice_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type serial_service, system_api_service, system_server_service, service_manager_type;
type servicediscovery_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type settings_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type shortcut_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type statusbar_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type storagestats_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type task_service, system_server_service, service_manager_type;
type textclassification_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type textservices_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type telecom_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type trust_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type tv_input_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type uimode_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type updatelock_service, system_api_service, system_server_service, service_manager_type;
type usagestats_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type usb_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type user_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type vibrator_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type voiceinteraction_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type vr_manager_service, system_server_service, service_manager_type;
type wallpaper_service, app_api_service, system_server_service, service_manager_type;
type webviewupdate_service, app_api_service, ephemeral_app_api_service, system_server_service, service_manager_type;
type wifip2p_service, app_api_service, system_server_service, service_manager_type;
type wifiscanner_service, system_api_service, system_server_service, service_manager_type;
type wifi_service, app_api_service, system_server_service, service_manager_type;
type wificond_service, service_manager_type;
type wifiaware_service, app_api_service, system_server_service, service_manager_type;
type window_service, system_api_service, system_server_service, service_manager_type;
#line 1 "system/sepolicy/public/servicemanager.te"
# servicemanager - the Binder context manager
type servicemanager, domain, mlstrustedsubject;
type servicemanager_exec, exec_type, file_type;

# Note that we do not use the binder_* macros here.
# servicemanager is unique in that it only provides
# name service (aka context manager) for Binder.
# As such, it only ever receives and transfers other references
# created by other domains.  It never passes its own references
# or initiates a Binder IPC.
allow servicemanager self:binder set_context_mgr;
allow servicemanager { domain -init }:binder transfer;


#line 14
allow servicemanager rootfs:dir { open getattr read search ioctl lock };
#line 14
allow servicemanager rootfs:{ file lnk_file } { getattr open read ioctl lock };
#line 14


# Check SELinux permissions.

#line 17

#line 17
allow servicemanager selinuxfs:dir { open getattr read search ioctl lock };
#line 17
allow servicemanager selinuxfs:{ file lnk_file } { getattr open read ioctl lock };
#line 17

#line 17
allow servicemanager selinuxfs:file { open append write lock };
#line 17
allow servicemanager kernel:security compute_av;
#line 17
allow servicemanager self:netlink_selinux_socket { read write create getattr setattr lock relabelfrom relabelto append bind connect listen accept getopt setopt shutdown recvfrom sendto name_bind };
#line 17

#line 1 "system/sepolicy/public/sgdisk.te"
# sgdisk called from vold
type sgdisk, domain;
type sgdisk_exec, exec_type, file_type;

# Allowed to read/write low-level partition tables
allow sgdisk block_device:dir search;
allow sgdisk vold_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Inherit and use pty created by android_fork_execvp()
allow sgdisk devpts:chr_file { read write ioctl getattr };

# Allow stdin/out back to vold
allow sgdisk vold:fd use;
allow sgdisk vold:fifo_file { read write getattr };

# Used to probe kernel to reload partition tables
allow sgdisk self:capability sys_admin;

# Only allow entry from vold
neverallow { domain -vold } sgdisk:process transition;
neverallow * sgdisk:process dyntransition;
neverallow sgdisk { file_type fs_type -sgdisk_exec }:file entrypoint;
#line 1 "system/sepolicy/public/shared_relro.te"
# Process which creates/updates shared RELRO files to be used by other apps.
type shared_relro, domain, domain_deprecated;

# Grant write access to the shared relro files/directory.
allow shared_relro shared_relro_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow shared_relro shared_relro_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Needs to contact the "webviewupdate" and "activity" services
allow shared_relro webviewupdate_service:service_manager find;
#line 1 "system/sepolicy/public/shell.te"
# Domain for shell processes spawned by ADB or console service.
type shell, domain, mlstrustedsubject;
type shell_exec, exec_type, file_type;

# Create and use network sockets.

#line 6
typeattribute shell netdomain;
#line 6


# logcat

#line 9
allow shell logcat_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 9

#line 9

#line 9

#line 9
allow shell logdr_socket:sock_file write;
#line 9
allow shell logd:unix_stream_socket connectto;
#line 9

#line 9

#line 9


#line 10
# Group AID_LOG checked by filesystem & logd
#line 10
# to permit control commands
#line 10

#line 10

#line 10

#line 10
allow shell logd_socket:sock_file write;
#line 10
allow shell logd:unix_stream_socket connectto;
#line 10

#line 10

#line 10

# logcat -L (directly, or via dumpstate)
allow shell pstorefs:dir search;
allow shell pstorefs:file { getattr open read ioctl lock };

# Root fs.
allow shell rootfs:dir { open getattr read search ioctl lock };

# read files in /data/anr
allow shell anr_data_file:dir { open getattr read search ioctl lock };
allow shell anr_data_file:file { getattr open read ioctl lock };

# Access /data/local/tmp.
allow shell shell_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow shell shell_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow shell shell_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow shell shell_data_file:lnk_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access /data/misc/profman.
allow shell profman_dump_data_file:dir { search getattr write remove_name };
allow shell profman_dump_data_file:file { getattr unlink };

# Read/execute files in /data/nativetest

#line 33
  allow shell nativetest_data_file:dir { open getattr read search ioctl lock };
#line 33
  allow shell nativetest_data_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
#line 36


# adb bugreport

#line 39

#line 39

#line 39
allow shell dumpstate_socket:sock_file write;
#line 39
allow shell dumpstate:unix_stream_socket connectto;
#line 39

#line 39


allow shell devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow shell tty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow shell console_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow shell input_device:dir { open getattr read search ioctl lock };
allow shell input_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

#line 46
allow shell system_file:dir { open getattr read search ioctl lock };
#line 46
allow shell system_file:{ file lnk_file } { getattr open read ioctl lock };
#line 46

allow shell system_file:file { getattr execute execute_no_trans };
allow shell toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow shell shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow shell zygote_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };


#line 52
allow shell apk_data_file:dir { open getattr read search ioctl lock };
#line 52
allow shell apk_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 52


# Set properties.

#line 55

#line 55
allow shell property_socket:sock_file write;
#line 55
allow shell init:unix_stream_socket connectto;
#line 55

#line 55
allow shell shell_prop:property_service set;
#line 55

#line 55
allow shell shell_prop:file { getattr open read ioctl lock };
#line 55

#line 55


#line 56

#line 56
allow shell property_socket:sock_file write;
#line 56
allow shell init:unix_stream_socket connectto;
#line 56

#line 56
allow shell ctl_bugreport_prop:property_service set;
#line 56

#line 56
allow shell ctl_bugreport_prop:file { getattr open read ioctl lock };
#line 56

#line 56


#line 57

#line 57
allow shell property_socket:sock_file write;
#line 57
allow shell init:unix_stream_socket connectto;
#line 57

#line 57
allow shell ctl_dumpstate_prop:property_service set;
#line 57

#line 57
allow shell ctl_dumpstate_prop:file { getattr open read ioctl lock };
#line 57

#line 57


#line 58

#line 58
allow shell property_socket:sock_file write;
#line 58
allow shell init:unix_stream_socket connectto;
#line 58

#line 58
allow shell dumpstate_prop:property_service set;
#line 58

#line 58
allow shell dumpstate_prop:file { getattr open read ioctl lock };
#line 58

#line 58


#line 59

#line 59
allow shell property_socket:sock_file write;
#line 59
allow shell init:unix_stream_socket connectto;
#line 59

#line 59
allow shell debug_prop:property_service set;
#line 59

#line 59
allow shell debug_prop:file { getattr open read ioctl lock };
#line 59

#line 59


#line 60

#line 60
allow shell property_socket:sock_file write;
#line 60
allow shell init:unix_stream_socket connectto;
#line 60

#line 60
allow shell powerctl_prop:property_service set;
#line 60

#line 60
allow shell powerctl_prop:file { getattr open read ioctl lock };
#line 60

#line 60


#line 61

#line 61
allow shell property_socket:sock_file write;
#line 61
allow shell init:unix_stream_socket connectto;
#line 61

#line 61
allow shell log_tag_prop:property_service set;
#line 61

#line 61
allow shell log_tag_prop:file { getattr open read ioctl lock };
#line 61

#line 61


#line 62

#line 62
allow shell property_socket:sock_file write;
#line 62
allow shell init:unix_stream_socket connectto;
#line 62

#line 62
allow shell wifi_log_prop:property_service set;
#line 62

#line 62
allow shell wifi_log_prop:file { getattr open read ioctl lock };
#line 62

#line 62

# adjust is_loggable properties

#line 64

#line 64
allow shell property_socket:sock_file write;
#line 64
allow shell init:unix_stream_socket connectto;
#line 64

#line 64
allow shell log_prop:property_service set;
#line 64

#line 64
allow shell log_prop:file { getattr open read ioctl lock };
#line 64

#line 64

# logpersist script

#line 66

#line 66
allow shell property_socket:sock_file write;
#line 66
allow shell init:unix_stream_socket connectto;
#line 66

#line 66
allow shell logpersistd_logging_prop:property_service set;
#line 66

#line 66
allow shell logpersistd_logging_prop:file { getattr open read ioctl lock };
#line 66

#line 66

# hal binderization

#line 68

#line 68
allow shell property_socket:sock_file write;
#line 68
allow shell init:unix_stream_socket connectto;
#line 68

#line 68
allow shell hal_binderization_prop:property_service set;
#line 68

#line 68
allow shell hal_binderization_prop:file { getattr open read ioctl lock };
#line 68

#line 68



#line 70
  # "systrace --boot" support - allow boottrace service to run
#line 70
  allow shell boottrace_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
#line 70
  allow shell boottrace_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
#line 70
  
#line 70

#line 70
allow shell property_socket:sock_file write;
#line 70
allow shell init:unix_stream_socket connectto;
#line 70

#line 70
allow shell persist_debug_prop:property_service set;
#line 70

#line 70
allow shell persist_debug_prop:file { getattr open read ioctl lock };
#line 70

#line 70

#line 75


# Read device's serial number from system properties

#line 78
allow shell serialno_prop:file { getattr open read ioctl lock };
#line 78


# allow shell access to services
allow shell servicemanager:service_manager list;
# don't allow shell to access GateKeeper service
# TODO: why is this so broad? Tightening candidate? It needs at list:
# - dumpstate_service (so it can receive dumpstate progress updates)
allow shell { service_manager_type -gatekeeper_service -incident_service -installd_service -netd_service -virtual_touchpad_service }:service_manager find;
allow shell dumpstate:binder call;

# allow shell to get information from hwservicemanager
# for instance, listing hardware services with lshal

#line 90
# Call the hwservicemanager and transfer references to it.
#line 90
allow shell hwservicemanager:binder { call transfer };
#line 90
# Allow hwservicemanager to send out callbacks
#line 90
allow hwservicemanager shell:binder { call transfer };
#line 90
# hwservicemanager performs getpidcon on clients.
#line 90
allow hwservicemanager shell:dir search;
#line 90
allow hwservicemanager shell:file { read open };
#line 90
allow hwservicemanager shell:process getattr;
#line 90
# TODO(b/34274385): hals wait for data to be mounted so they can
#line 90
# start only if persist.hal.binderization is enabled. (for dogfood
#line 90
# stability). getService must also check for data to be mounted
#line 90
# if the vintf promises the hal will be registered over hwbinder.
#line 90

#line 90
allow shell hal_binderization_prop:file { getattr open read ioctl lock };
#line 90

#line 90

#line 90
allow shell persistent_properties_ready_prop:file { getattr open read ioctl lock };
#line 90

#line 90

#line 90
allow shell vold_prop:file { getattr open read ioctl lock };
#line 90

#line 90
# rw access to /dev/hwbinder and /dev/ashmem is presently granted to
#line 90
# all domains in domain.te.
#line 90


# allow shell to look through /proc/ for ps, top, netstat

#line 93
allow shell proc:dir { open getattr read search ioctl lock };
#line 93
allow shell proc:{ file lnk_file } { getattr open read ioctl lock };
#line 93


#line 94
allow shell proc_net:dir { open getattr read search ioctl lock };
#line 94
allow shell proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 94

allow shell proc_interrupts:file { getattr open read ioctl lock };
allow shell proc_meminfo:file { getattr open read ioctl lock };
allow shell proc_stat:file { getattr open read ioctl lock };
allow shell proc_timer:file { getattr open read ioctl lock };
allow shell proc_zoneinfo:file { getattr open read ioctl lock };

#line 100
allow shell cgroup:dir { open getattr read search ioctl lock };
#line 100
allow shell cgroup:{ file lnk_file } { getattr open read ioctl lock };
#line 100

allow shell domain:dir { search open read getattr };
allow shell domain:{ file lnk_file } { open read getattr };

# statvfs() of /proc and other labeled filesystems
# (yaffs2, jffs2, ext2, ext3, ext4, xfs, btrfs, f2fs, squashfs)
allow shell { proc labeledfs }:filesystem getattr;

# stat() of /dev
allow shell device:dir getattr;

# allow shell to read /proc/pid/attr/current for ps -Z
allow shell domain:process getattr;

# Allow pulling the SELinux policy for CTS purposes
allow shell selinuxfs:dir { open getattr read search ioctl lock };
allow shell selinuxfs:file { getattr open read ioctl lock };

# enable shell domain to read/write files/dirs for bootchart data
# User will creates the start and stop file via adb shell
# and read other files created by init process under /data/bootchart
allow shell bootchart_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow shell bootchart_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Make sure strace works for the non-privileged shell user
allow shell self:process ptrace;

# allow shell to get battery info
allow shell sysfs_batteryinfo:file { getattr open read ioctl lock };
allow shell sysfs:dir { open getattr read search ioctl lock };

# Allow access to ion memory allocation device.
allow shell ion_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

#
# filesystem test for insecure chr_file's is done
# via a host side test
#
allow shell dev_type:dir { open getattr read search ioctl lock };
allow shell dev_type:chr_file getattr;

# /dev/fd is a symlink
allow shell proc:lnk_file getattr;

#
# filesystem test for insucre blk_file's is done
# via hostside test
#
allow shell dev_type:blk_file getattr;

###
### Neverallow rules
###

# Do not allow shell to hard link to any files.
# In particular, if shell hard links to app data
# files, installd will not be able to guarantee the deletion
# of the linked to file. Hard links also contribute to security
# bugs, so we want to ensure the shell user never has this
# capability.
neverallow shell file_type:file link;

# Do not allow privileged socket ioctl commands
neverallowxperm shell domain:{ rawip_socket tcp_socket udp_socket } ioctl 
#line 163
{
#line 163
# qualcomm rmnet ioctls
#line 163
0x00006900 0x00006902
#line 163
# socket ioctls
#line 163
0x0000890b 0x0000890c 0x0000890d 0x00008911 0x00008914 0x00008916
#line 163
0x00008918 0x0000891a 0x0000891c 0x0000891d 0x0000891e 0x0000891f
#line 163
0x00008920 0x00008922 0x00008923 0x00008924 0x00008925 0x00008926
#line 163
0x00008927 0x00008929 0x00008930 0x00008931 0x00008932
#line 163
0x00008934 0x00008935 0x00008936 0x00008937 0x00008939 0x00008940 0x00008941
#line 163
0x00008943 0x00008946 0x00008947 0x00008948 0x00008949 0x0000894a
#line 163
0x0000894b 0x00008953 0x00008954 0x00008955 0x00008960 0x00008961 0x00008962 0x00008970
#line 163
0x00008971 0x00008980 0x00008981 0x00008982 0x00008983 0x00008990
#line 163
0x00008991 0x00008992 0x00008993 0x00008994
#line 163
0x00008995 0x000089a0 0x000089a1 0x000089a2 0x000089a3 0x000089b0
#line 163
# device and protocol specific ioctls
#line 163
0x000089f0-0x000089ff
#line 163
0x000089e0-0x000089ef
#line 163
# Wireless extension ioctls
#line 163
0x00008b00 0x00008b02 0x00008b04 0x00008b06 0x00008b08 0x00008b0a
#line 163
0x00008b0c 0x00008b0e 0x00008b10 0x00008b14 0x00008b15 0x00008b16 0x00008b17
#line 163
0x00008b18 0x00008b19 0x00008b1a 0x00008b1b 0x00008b1c 0x00008b1d
#line 163
0x00008b20 0x00008b22 0x00008b24 0x00008b26 0x00008b28 0x00008b2a
#line 163
0x00008b2b 0x00008b2c 0x00008b30 0x00008b31 0x00008b32 0x00008b33
#line 163
0x00008b34 0x00008b35 0x00008b36
#line 163
# Dev private ioctl i.e. hardware specific ioctls
#line 163
0x00008be0-0x00008bff
#line 163
};

# limit shell access to sensitive char drivers to
# only getattr required for host side test.
neverallow shell {
  fuse_device
  hw_random_device
  kmem_device
  port_device
}:chr_file ~getattr;

# Limit shell to only getattr on blk devices for host side tests.
neverallow shell dev_type:blk_file ~getattr;
#line 1 "system/sepolicy/public/slideshow.te"
# slideshow seclabel is specified in init.rc since
# it lives in the rootfs and has no unique file type.
type slideshow, domain;

allow slideshow kmsg_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

#line 6
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 6
allow slideshow sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 6
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 6
allow slideshow self:capability2 block_suspend;
#line 6

allow slideshow device:dir { open getattr read search ioctl lock };
allow slideshow self:capability sys_tty_config;
allow slideshow graphics_device:dir { open getattr read search ioctl lock };
allow slideshow graphics_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow slideshow input_device:dir { open getattr read search ioctl lock };
allow slideshow input_device:chr_file { getattr open read ioctl lock };
allow slideshow tty_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

#line 1 "system/sepolicy/public/su.te"
# File types must be defined for file_contexts.
type su_exec, exec_type, file_type;


#line 4
  # Domain used for su processes, as well as for adbd and adb shell
#line 4
  # after performing an adb root command.  The domain definition is
#line 4
  # wrapped to ensure that it does not exist at all on -user builds.
#line 4
  type su, domain, mlstrustedsubject;
#line 4

#line 4
  # Add su to various domains
#line 4
  
#line 4
typeattribute su netdomain;
#line 4

#line 4

#line 4
  dontaudit su self:{ capability capability2 } *;
#line 4
  dontaudit su kernel:security *;
#line 4
  dontaudit su kernel:system *;
#line 4
  dontaudit su self:memprotect *;
#line 4
  dontaudit su domain:process *;
#line 4
  dontaudit su domain:fd *;
#line 4
  dontaudit su domain:dir *;
#line 4
  dontaudit su domain:lnk_file *;
#line 4
  dontaudit su domain:{ fifo_file file } *;
#line 4
  dontaudit su domain:{ socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket netlink_iscsi_socket netlink_fib_lookup_socket netlink_connector_socket netlink_netfilter_socket netlink_generic_socket netlink_scsitransport_socket netlink_rdma_socket netlink_crypto_socket sctp_socket icmp_socket ax25_socket ipx_socket netrom_socket atmpvc_socket x25_socket rose_socket decnet_socket atmsvc_socket rds_socket irda_socket pppox_socket llc_socket can_socket tipc_socket bluetooth_socket iucv_socket rxrpc_socket isdn_socket phonet_socket ieee802154_socket caif_socket alg_socket nfc_socket vsock_socket kcm_socket qipcrtr_socket } *;
#line 4
  dontaudit su domain:{ sem msgq shm ipc } *;
#line 4
  dontaudit su domain:key *;
#line 4
  dontaudit su fs_type:filesystem *;
#line 4
  dontaudit su {fs_type dev_type file_type}:{ dir { { chr_file blk_file } { file lnk_file sock_file fifo_file } } } *;
#line 4
  dontaudit su node_type:node *;
#line 4
  dontaudit su node_type:{ tcp_socket udp_socket rawip_socket } *;
#line 4
  dontaudit su netif_type:netif *;
#line 4
  dontaudit su port_type:{ socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket appletalk_socket netlink_route_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_dnrt_socket netlink_kobject_uevent_socket tun_socket netlink_iscsi_socket netlink_fib_lookup_socket netlink_connector_socket netlink_netfilter_socket netlink_generic_socket netlink_scsitransport_socket netlink_rdma_socket netlink_crypto_socket sctp_socket icmp_socket ax25_socket ipx_socket netrom_socket atmpvc_socket x25_socket rose_socket decnet_socket atmsvc_socket rds_socket irda_socket pppox_socket llc_socket can_socket tipc_socket bluetooth_socket iucv_socket rxrpc_socket isdn_socket phonet_socket ieee802154_socket caif_socket alg_socket nfc_socket vsock_socket kcm_socket qipcrtr_socket } *;
#line 4
  dontaudit su port_type:{ tcp_socket dccp_socket } *;
#line 4
  dontaudit su domain:peer *;
#line 4
  dontaudit su domain:binder *;
#line 4
  dontaudit su property_type:property_service *;
#line 4
  dontaudit su property_type:file *;
#line 4
  dontaudit su service_manager_type:service_manager *;
#line 4
  dontaudit su servicemanager:service_manager list;
#line 4
  dontaudit su keystore:keystore_key *;
#line 4
  dontaudit su domain:drmservice *;
#line 4
  dontaudit su unlabeled:filesystem *;
#line 4
  dontaudit su postinstall_file:filesystem *;
#line 42

#line 1 "system/sepolicy/public/surfaceflinger.te"
# surfaceflinger - display compositor service
type surfaceflinger, domain;
#line 1 "system/sepolicy/public/system_app.te"
###
### Apps that run with the system UID, e.g. com.android.system.ui,
### com.android.settings.  These are not as privileged as the system
### server.
###

type system_app, domain;
#line 1 "system/sepolicy/public/system_server.te"
#
# System Server aka system_server spawned by zygote.
# Most of the framework services run in this process.
#
type system_server, domain;
#line 1 "system/sepolicy/public/tee.te"
##
# trusted execution environment (tee) daemon
#
type tee, domain, domain_deprecated;
type tee_exec, exec_type, file_type;
type tee_device, dev_type;
type tee_data_file, file_type, data_file_type;

allow tee self:capability { dac_override };
allow tee tee_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow tee tee_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow tee tee_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow tee self:netlink_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow tee self:netlink_generic_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow tee ion_device:chr_file { getattr open read ioctl lock };

#line 16
allow tee sysfs_type:dir { open getattr read search ioctl lock };
#line 16
allow tee sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 16

allow tee system_data_file:file { getattr read };
allow tee system_data_file:lnk_file { getattr open read ioctl lock };
#line 1 "system/sepolicy/public/tombstoned.te"
# debugger interface
type tombstoned, domain, mlstrustedsubject;
type tombstoned_exec, exec_type, file_type;

# Write to arbitrary pipes given to us.
allow tombstoned domain:fd use;
allow tombstoned domain:fifo_file write;

allow tombstoned domain:dir { open getattr read search ioctl lock };
allow tombstoned domain:file { getattr open read ioctl lock };
allow tombstoned tombstone_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow tombstoned tombstone_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow tombstoned anr_data_file:file { getattr append };

# TODO: Find out why this is happening.
allow tombstoned anr_data_file:file write;
auditallow tombstoned anr_data_file:file write;
#line 1 "system/sepolicy/public/toolbox.te"
# Any toolbox command run by init.
# At present, the only known usage is for running mkswap via fs_mgr.
# Do NOT use this domain for toolbox when run by any other domain.
type toolbox, domain;
type toolbox_exec, exec_type, file_type;

# /dev/__null__ created by init prior to policy load,
# open fd inherited by fsck.
allow toolbox tmpfs:chr_file { read write ioctl };

# Inherit and use pty created by android_fork_execvp_ext().
allow toolbox devpts:chr_file { read write getattr ioctl };

# mkswap-specific.
# Read/write block devices used for swap partitions.
# Assign swap_block_device type any such partition in your
# device/<vendor>/<product>/sepolicy/file_contexts file.
allow toolbox block_device:dir search;
allow toolbox swap_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Only allow entry from init via the toolbox binary.
neverallow { domain -init } toolbox:process transition;
neverallow * toolbox:process dyntransition;
neverallow toolbox { file_type fs_type -toolbox_exec}:file entrypoint;
#line 1 "system/sepolicy/public/tzdatacheck.te"
# The tzdatacheck command run by init.
type tzdatacheck, domain;
type tzdatacheck_exec, exec_type, file_type;

allow tzdatacheck zoneinfo_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow tzdatacheck zoneinfo_data_file:file unlink;
#line 1 "system/sepolicy/public/ueventd.te"
# ueventd seclabel is specified in init.rc since
# it lives in the rootfs and has no unique file type.
type ueventd, domain, domain_deprecated;

# Write to /dev/kmsg.
allow ueventd kmsg_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

allow ueventd self:capability { chown mknod net_admin setgid fsetid sys_rawio dac_override fowner };
allow ueventd device:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };


#line 11
allow ueventd sysfs_type:dir { open getattr read search ioctl lock };
#line 11
allow ueventd sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 11


#line 12
allow ueventd rootfs:dir { open getattr read search ioctl lock };
#line 12
allow ueventd rootfs:{ file lnk_file } { getattr open read ioctl lock };
#line 12

allow ueventd sysfs:file { open append write lock };
allow ueventd sysfs_usb:file { open append write lock };
allow ueventd sysfs_hwrandom:file { open append write lock };
allow ueventd sysfs_zram_uevent:file { open append write lock };
allow ueventd sysfs_type:{ file lnk_file } { relabelfrom relabelto setattr getattr };
allow ueventd sysfs_type:dir { relabelfrom relabelto setattr { open getattr read search ioctl lock } };
allow ueventd sysfs_devices_system_cpu:file { { getattr open read ioctl lock } { open append write lock } };
allow ueventd tmpfs:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow ueventd dev_type:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow ueventd dev_type:lnk_file { create unlink };
allow ueventd dev_type:chr_file { getattr create setattr unlink };
allow ueventd dev_type:blk_file { getattr relabelfrom relabelto create setattr unlink };
allow ueventd self:netlink_kobject_uevent_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow ueventd efs_file:dir search;
allow ueventd efs_file:file { getattr open read ioctl lock };

# Get SELinux enforcing status.

#line 30
allow ueventd selinuxfs:dir { open getattr read search ioctl lock };
#line 30
allow ueventd selinuxfs:{ file lnk_file } { getattr open read ioctl lock };
#line 30


# Use setfscreatecon() to label /dev directories and files.
allow ueventd self:process setfscreate;

#####
##### neverallow rules
#####

# ueventd must never set properties, otherwise deadlocks may occur.
# https://android-review.googlesource.com/#/c/133120/6/init/devices.cpp@941
# No writing to the property socket, connecting to init, or setting properties.
neverallow ueventd property_socket:sock_file write;
neverallow ueventd init:unix_stream_socket connectto;
neverallow ueventd property_type:property_service set;

# Restrict ueventd access on block devices to maintenence operations.
neverallow ueventd dev_type:blk_file ~{ getattr relabelfrom relabelto create setattr unlink };

# Only relabelto as we would never want to relabelfrom kmem_device or port_device
neverallow ueventd { kmem_device port_device }:chr_file ~{ getattr create setattr unlink relabelto };
#line 1 "system/sepolicy/public/uncrypt.te"
# uncrypt
type uncrypt, domain, domain_deprecated, mlstrustedsubject;
type uncrypt_exec, exec_type, file_type;

allow uncrypt self:capability dac_override;

# Read OTA zip file from /data/data/com.google.android.gsf/app_download

#line 8
allow uncrypt app_data_file:dir { open getattr read search ioctl lock };
#line 8
allow uncrypt app_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 8



#line 10
  # For debugging, allow /data/local/tmp access
#line 10
  
#line 10
allow uncrypt shell_data_file:dir { open getattr read search ioctl lock };
#line 10
allow uncrypt shell_data_file:{ file lnk_file } { getattr open read ioctl lock };
#line 10

#line 13


# Read /cache/recovery/command
# Read /cache/recovery/uncrypt_file
allow uncrypt cache_recovery_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow uncrypt cache_recovery_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Read OTA zip file at /data/ota_package/.
allow uncrypt ota_package_file:dir { open getattr read search ioctl lock };
allow uncrypt ota_package_file:file { getattr open read ioctl lock };

# Write to /dev/socket/uncrypt

#line 25

#line 25

#line 25
allow uncrypt uncrypt_socket:sock_file write;
#line 25
allow uncrypt uncrypt:unix_stream_socket connectto;
#line 25

#line 25


# Set a property to reboot the device.

#line 28

#line 28
allow uncrypt property_socket:sock_file write;
#line 28
allow uncrypt init:unix_stream_socket connectto;
#line 28

#line 28
allow uncrypt powerctl_prop:property_service set;
#line 28

#line 28
allow uncrypt powerctl_prop:file { getattr open read ioctl lock };
#line 28

#line 28


# Raw writes to block device
allow uncrypt self:capability sys_rawio;
allow uncrypt misc_block_device:blk_file { open append write lock };
allow uncrypt block_device:dir { open getattr read search ioctl lock };

# Access userdata block device.
allow uncrypt userdata_block_device:blk_file { open append write lock };


#line 38
allow uncrypt rootfs:dir { open getattr read search ioctl lock };
#line 38
allow uncrypt rootfs:{ file lnk_file } { getattr open read ioctl lock };
#line 38

#line 1 "system/sepolicy/public/untrusted_app.te"
###
### Untrusted apps.
###
### Apps are labeled based on mac_permissions.xml (maps signer and
### optionally package name to seinfo value) and seapp_contexts (maps UID
### and optionally seinfo value to domain for process and type for data
### directory).  The untrusted_app domain is the default assignment in
### seapp_contexts for any app with UID between APP_AID (10000)
### and AID_ISOLATED_START (99000) if the app has no specific seinfo
### value as determined from mac_permissions.xml.  In current AOSP, this
### domain is assigned to all non-system apps as well as to any system apps
### that are not signed by the platform key.  To move
### a system app into a specific domain, add a signer entry for it to
### mac_permissions.xml and assign it one of the pre-existing seinfo values
### or define and use a new seinfo value in both mac_permissions.xml and
### seapp_contexts.
###

type untrusted_app, domain;
#line 1 "system/sepolicy/public/untrusted_app_25.te"
###
### Untrusted apps.
###
### Apps are labeled based on mac_permissions.xml (maps signer and
### optionally package name to seinfo value) and seapp_contexts (maps UID
### and optionally seinfo value to domain for process and type for data
### directory).  The untrusted_app domain is the default assignment in
### seapp_contexts for any app with UID between APP_AID (10000)
### and AID_ISOLATED_START (99000) if the app has no specific seinfo
### value as determined from mac_permissions.xml.  In current AOSP, this
### domain is assigned to all non-system apps as well as to any system apps
### that are not signed by the platform key.  To move
### a system app into a specific domain, add a signer entry for it to
### mac_permissions.xml and assign it one of the pre-existing seinfo values
### or define and use a new seinfo value in both mac_permissions.xml and
### seapp_contexts.
###

type untrusted_app_25, domain;

#line 1 "system/sepolicy/public/untrusted_v2_app.te"
###
### Untrusted v2 sandbox apps.
###

type untrusted_v2_app, domain;
#line 1 "system/sepolicy/public/update_engine.te"
# Domain for update_engine daemon.
type update_engine, domain, domain_deprecated, update_engine_common;
type update_engine_exec, exec_type, file_type;
type update_engine_data_file, file_type, data_file_type;


#line 6
typeattribute update_engine netdomain;
#line 6
;

# Read/[write] to /proc/net/xt_qtaguid/ctrl and /dev/xt_qtaguid to tag network
# sockets.
allow update_engine qtaguid_proc:file { { getattr open read ioctl lock } { open append write lock } };
allow update_engine qtaguid_device:chr_file { getattr open read ioctl lock };

# Following permissions are needed for update_engine.
allow update_engine self:process { setsched };
allow update_engine self:capability { fowner sys_admin };
allow update_engine kmsg_device:chr_file { open append write lock };
allow update_engine update_engine_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

#line 18
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 18
allow update_engine sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 18
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 18
allow update_engine self:capability2 block_suspend;
#line 18
;

# Ignore these denials.
dontaudit update_engine kernel:process setsched;

# Allow using persistent storage in /data/misc/update_engine.
allow update_engine update_engine_data_file:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } };
allow update_engine update_engine_data_file:file { { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } } };

# Don't allow kernel module loading, just silence the logs.
dontaudit update_engine kernel:system module_request;

# Register the service to perform Binder IPC.

#line 31
# Call the servicemanager and transfer references to it.
#line 31
allow update_engine servicemanager:binder { call transfer };
#line 31
# servicemanager performs getpidcon on clients.
#line 31
allow servicemanager update_engine:dir search;
#line 31
allow servicemanager update_engine:file { read open };
#line 31
allow servicemanager update_engine:process getattr;
#line 31
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 31
# all domains in domain.te.
#line 31


#line 32
  allow update_engine update_engine_service:service_manager { add find };
#line 32
  neverallow { domain -update_engine } update_engine_service:service_manager add;
#line 32


# Allow update_engine to call the callback function provided by priv_app.

#line 35
# Call the server domain and optionally transfer references to it.
#line 35
allow update_engine priv_app:binder { call transfer };
#line 35
# Allow the serverdomain to transfer references to the client on the reply.
#line 35
allow priv_app update_engine:binder transfer;
#line 35
# Receive and use open files from the server.
#line 35
allow update_engine priv_app:fd use;
#line 35


# Read OTA zip file at /data/ota_package/.
allow update_engine ota_package_file:file { getattr open read ioctl lock };
allow update_engine ota_package_file:dir { open getattr read search ioctl lock };

# Use Boot Control HAL

#line 42
typeattribute update_engine halclientdomain;
#line 42
typeattribute update_engine hal_bootctl_client;
#line 42

#line 42
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 42
# once we know at build time whether a HAL is going to run in
#line 42
# passthrough or binderized mode.
#line 42
typeattribute update_engine hal_bootctl;
#line 42
# Find passthrough HAL implementations
#line 42
allow hal_bootctl system_file:dir { open getattr read search ioctl lock };
#line 42

#line 1 "system/sepolicy/public/update_engine_common.te"
# update_engine payload application permissions. These are shared between the
# background daemon and the recovery tool to sideload an update.

# Allow update_engine to reach block devices in /dev/block.
allow update_engine_common block_device:dir search;

# Allow read/write on system and boot partitions.
allow update_engine_common boot_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };
allow update_engine_common system_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Allow to set recovery options in the BCB. Used to trigger factory reset when
# the update to an older version (channel change) or incompatible version
# requires it.
allow update_engine_common misc_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Allow update_engine_common to mount on the /postinstall directory and reset the
# labels on the mounted filesystem to postinstall_file.
allow update_engine_common postinstall_mnt_dir:dir mounton;
allow update_engine_common postinstall_file:filesystem { mount unmount relabelfrom relabelto };
allow update_engine_common labeledfs:filesystem relabelfrom;

# Allow update_engine_common to read and execute postinstall_file.
allow update_engine_common postinstall_file:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };
allow update_engine_common postinstall_file:lnk_file { getattr open read ioctl lock };
allow update_engine_common postinstall_file:dir { open getattr read search ioctl lock };


# A postinstall program is typically a shell script (with a #!), so we allow
# to execute those.
allow update_engine_common shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Allow update_engine_common to suspend, resume and kill the postinstall program.
allow update_engine_common postinstall:process { signal sigstop };

# access /proc/misc
# Access is also granted to proc:file, but it is likely unneeded
# due to the more specific grant to proc_misc immediately below.
allow update_engine proc:file { getattr open read ioctl lock }; # delete candidate
allow update_engine proc_misc:file { getattr open read ioctl lock };

# read directories on /system and /vendor
allow update_engine system_file:dir { open getattr read search ioctl lock };
#line 1 "system/sepolicy/public/update_verifier.te"
# update_verifier
type update_verifier, domain;
type update_verifier_exec, exec_type, file_type;

# Allow update_verifier to reach block devices in /dev/block.
allow update_verifier block_device:dir search;

# Read care map in /data/ota_package/.
allow update_verifier ota_package_file:dir { open getattr read search ioctl lock };
allow update_verifier ota_package_file:file { getattr open read ioctl lock };

# Read all blocks in dm wrapped system partition.
allow update_verifier dm_device:blk_file { getattr open read ioctl lock };

# Use Boot Control HAL

#line 16
typeattribute update_verifier halclientdomain;
#line 16
typeattribute update_verifier hal_bootctl_client;
#line 16

#line 16
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 16
# once we know at build time whether a HAL is going to run in
#line 16
# passthrough or binderized mode.
#line 16
typeattribute update_verifier hal_bootctl;
#line 16
# Find passthrough HAL implementations
#line 16
allow hal_bootctl system_file:dir { open getattr read search ioctl lock };
#line 16

#line 1 "system/sepolicy/public/vdc.te"
# vdc spawned from init for the following services:
#  defaultcrypto
#  encrypt
#
# We also transition into this domain from dumpstate, when
# collecting bug reports.

type vdc, domain;
type vdc_exec, exec_type, file_type;


#line 11

#line 11

#line 11
allow vdc vold_socket:sock_file write;
#line 11
allow vdc vold:unix_stream_socket connectto;
#line 11

#line 11


# vdc sends information back to dumpstate when "adb bugreport" is used
allow vdc dumpstate:fd use;
allow vdc dumpstate:unix_stream_socket { read write getattr };

# vdc information is written to shell owned bugreport files
allow vdc shell_data_file:file { write getattr };

# Why?
allow vdc dumpstate:unix_dgram_socket { read write };

# vdc can be invoked with logwrapper, so let it write to pty
allow vdc devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "system/sepolicy/public/virtual_touchpad.te"
type virtual_touchpad, domain;
type virtual_touchpad_exec, exec_type, file_type;


#line 4
# Call the servicemanager and transfer references to it.
#line 4
allow virtual_touchpad servicemanager:binder { call transfer };
#line 4
# servicemanager performs getpidcon on clients.
#line 4
allow servicemanager virtual_touchpad:dir search;
#line 4
allow servicemanager virtual_touchpad:file { read open };
#line 4
allow servicemanager virtual_touchpad:process getattr;
#line 4
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 4
# all domains in domain.te.
#line 4


#line 5
typeattribute virtual_touchpad binderservicedomain;
#line 5


#line 6
  allow virtual_touchpad virtual_touchpad_service:service_manager { add find };
#line 6
  neverallow { domain -virtual_touchpad } virtual_touchpad_service:service_manager add;
#line 6


# Requires access to /dev/uinput to create and feed the virtual device.
allow virtual_touchpad uhid_device:chr_file { { open append write lock } ioctl };

# Limit access so that nothing else can inject input.
neverallow { domain -system_app -virtual_touchpad } virtual_touchpad_service:service_manager find;
#line 1 "system/sepolicy/public/vndservicemanager.te"
# vndservicemanager - the Binder context manager for vendor processes
type vndservicemanager, domain;
#line 1 "system/sepolicy/public/vold.te"
# volume manager
type vold, domain, domain_deprecated;
type vold_exec, exec_type, file_type;

# Read already opened /cache files.
allow vold cache_file:dir { open getattr read search ioctl lock };
allow vold cache_file:file { getattr read };
allow vold cache_file:lnk_file { getattr open read ioctl lock };

# Read access to pseudo filesystems.

#line 11
allow vold proc:dir { open getattr read search ioctl lock };
#line 11
allow vold proc:{ file lnk_file } { getattr open read ioctl lock };
#line 11


#line 12
allow vold proc_net:dir { open getattr read search ioctl lock };
#line 12
allow vold proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 12


#line 13
allow vold sysfs_type:dir { open getattr read search ioctl lock };
#line 13
allow vold sysfs_type:{ file lnk_file } { getattr open read ioctl lock };
#line 13

# XXX Label sysfs files with a specific type?
allow vold sysfs:file { open append write lock };
allow vold sysfs_usb:file { open append write lock };
allow vold sysfs_zram_uevent:file { open append write lock };


#line 19
allow vold rootfs:dir { open getattr read search ioctl lock };
#line 19
allow vold rootfs:{ file lnk_file } { getattr open read ioctl lock };
#line 19

allow vold proc_meminfo:file { getattr open read ioctl lock };

# Allow us to jump into execution domains of above tools
allow vold self:process setexec;

# For sgdisk launched through popen()
allow vold shell_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

typeattribute vold mlstrustedsubject;
allow vold self:process setfscreate;
allow vold system_file:file { getattr execute execute_no_trans };
allow vold block_device:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow vold device:dir write;
allow vold devpts:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow vold rootfs:dir mounton;
allow vold sdcard_type:dir mounton; # TODO: deprecated in M
allow vold sdcard_type:filesystem { mount remount unmount }; # TODO: deprecated in M
allow vold sdcard_type:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } }; # TODO: deprecated in M
allow vold sdcard_type:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } }; # TODO: deprecated in M

# Manage locations where storage is mounted
allow vold { mnt_media_rw_file storage_file sdcard_type }:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow vold { mnt_media_rw_file storage_file sdcard_type }:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Access to storage that backs emulated FUSE daemons for migration optimization
allow vold media_rw_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow vold media_rw_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Allow mounting of storage devices
allow vold { mnt_media_rw_stub_file storage_stub_file }:dir { mounton create rmdir getattr setattr };

# Manage per-user primary symlinks
allow vold mnt_user_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow vold mnt_user_file:lnk_file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# Allow to create and mount expanded storage
allow vold mnt_expand_file:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } mounton };
allow vold apk_data_file:dir { create getattr setattr };
allow vold shell_data_file:dir { create getattr setattr };

allow vold tmpfs:filesystem { mount unmount };
allow vold tmpfs:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow vold tmpfs:dir mounton;
allow vold self:capability { net_admin dac_override mknod sys_admin chown fowner fsetid };
allow vold self:netlink_kobject_uevent_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
allow vold app_data_file:dir search;
allow vold app_data_file:file { { getattr open read ioctl lock } { open append write lock } };
allow vold loop_device:blk_file { create setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow vold vold_device:blk_file { create setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow vold dm_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow vold dm_device:blk_file { { getattr open read ioctl lock } { open append write lock } };
# For vold Process::killProcessesWithOpenFiles function.
allow vold domain:dir { open getattr read search ioctl lock };
allow vold domain:{ file lnk_file } { getattr open read ioctl lock };
allow vold domain:process { signal sigkill };
allow vold self:capability { sys_ptrace kill };

# XXX Label sysfs files with a specific type?
allow vold sysfs:file { { getattr open read ioctl lock } { open append write lock } };

allow vold kmsg_device:chr_file { { getattr open read ioctl lock } { open append write lock } };

# Run fsck in the fsck domain.
allow vold fsck_exec:file { { getattr open read ioctl lock } execute };

# Log fsck results
allow vold fscklogs:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow vold fscklogs:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

#
# Rules to support encrypted fs support.
#

# Unmount and mount the fs.
allow vold labeledfs:filesystem { mount unmount };

# Access /efs/userdata_footer.
# XXX Split into a separate type?
allow vold efs_file:file { { getattr open read ioctl lock } { open append write lock } };

# Create and mount on /data/tmp_mnt and management of expansion mounts
allow vold system_data_file:dir { create { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } mounton setattr rmdir };

# Set scheduling policy of kernel processes
allow vold kernel:process setsched;

# Property Service

#line 107

#line 107
allow vold property_socket:sock_file write;
#line 107
allow vold init:unix_stream_socket connectto;
#line 107

#line 107
allow vold vold_prop:property_service set;
#line 107

#line 107
allow vold vold_prop:file { getattr open read ioctl lock };
#line 107

#line 107


#line 108

#line 108
allow vold property_socket:sock_file write;
#line 108
allow vold init:unix_stream_socket connectto;
#line 108

#line 108
allow vold powerctl_prop:property_service set;
#line 108

#line 108
allow vold powerctl_prop:file { getattr open read ioctl lock };
#line 108

#line 108


#line 109

#line 109
allow vold property_socket:sock_file write;
#line 109
allow vold init:unix_stream_socket connectto;
#line 109

#line 109
allow vold ctl_fuse_prop:property_service set;
#line 109

#line 109
allow vold ctl_fuse_prop:file { getattr open read ioctl lock };
#line 109

#line 109


#line 110

#line 110
allow vold property_socket:sock_file write;
#line 110
allow vold init:unix_stream_socket connectto;
#line 110

#line 110
allow vold restorecon_prop:property_service set;
#line 110

#line 110
allow vold restorecon_prop:file { getattr open read ioctl lock };
#line 110

#line 110


# ASEC
allow vold asec_image_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow vold asec_image_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow vold asec_apk_file:dir { { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } } mounton relabelfrom relabelto };
allow vold asec_public_file:dir { relabelto setattr };
allow vold asec_apk_file:file { { getattr open read ioctl lock } setattr relabelfrom relabelto };
allow vold asec_public_file:file { relabelto setattr };
# restorecon files in asec containers created on 4.2 or earlier.
allow vold unlabeled:dir { { open getattr read search ioctl lock } setattr relabelfrom };
allow vold unlabeled:file { { getattr open read ioctl lock } setattr relabelfrom };

# Handle wake locks (used for device encryption)

#line 124
# Access /sys/power/wake_lock and /sys/power/wake_unlock
#line 124
allow vold sysfs_wake_lock:file { { getattr open read ioctl lock } { open append write lock } };
#line 124
# Accessing these files requires CAP_BLOCK_SUSPEND
#line 124
allow vold self:capability2 block_suspend;
#line 124


# talk to batteryservice

#line 127
# Call the servicemanager and transfer references to it.
#line 127
allow vold servicemanager:binder { call transfer };
#line 127
# servicemanager performs getpidcon on clients.
#line 127
allow servicemanager vold:dir search;
#line 127
allow servicemanager vold:file { read open };
#line 127
allow servicemanager vold:process getattr;
#line 127
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 127
# all domains in domain.te.
#line 127


#line 128
# Call the server domain and optionally transfer references to it.
#line 128
allow vold healthd:binder { call transfer };
#line 128
# Allow the serverdomain to transfer references to the client on the reply.
#line 128
allow healthd vold:binder transfer;
#line 128
# Receive and use open files from the server.
#line 128
allow vold healthd:fd use;
#line 128


# talk to keymaster

#line 131
typeattribute vold halclientdomain;
#line 131
typeattribute vold hal_keymaster_client;
#line 131

#line 131
# TODO(b/34170079): Make the inclusion of the rules below conditional,
#line 131
# once we know at build time whether a HAL is going to run in
#line 131
# passthrough or binderized mode.
#line 131
typeattribute vold hal_keymaster;
#line 131
# Find passthrough HAL implementations
#line 131
allow hal_keymaster system_file:dir { open getattr read search ioctl lock };
#line 131


# Access userdata block device.
allow vold userdata_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Access metadata block device used for encryption meta-data.
allow vold metadata_block_device:blk_file { { getattr open read ioctl lock } { open append write lock } };

# Allow vold to manipulate /data/unencrypted
allow vold unencrypted_data_file:{ file } { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };
allow vold unencrypted_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };

# Write to /proc/sys/vm/drop_caches
allow vold proc_drop_caches:file { open append write lock };

# Give vold a place where only vold can store files; everyone else is off limits
allow vold vold_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };
allow vold vold_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# linux keyring configuration
allow vold init:key { write search setattr };
allow vold vold:key { write search setattr };

# vold temporarily changes its priority when running benchmarks
allow vold self:capability sys_nice;

# vold needs to chroot into app namespaces to remount when runtime permissions change
allow vold self:capability sys_chroot;
allow vold storage_file:dir mounton;

# For AppFuse.
allow vold fuse_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow vold fuse:filesystem { relabelfrom };
allow vold app_fusefs:filesystem { relabelfrom relabelto };
allow vold app_fusefs:filesystem { mount unmount };

# MoveTask.cpp executes cp and rm
allow vold toolbox_exec:file { { getattr open read ioctl lock } { getattr execute execute_no_trans } };

# Prepare profile dir for users.
allow vold user_profile_data_file:dir { create reparent rename rmdir setattr { { open getattr read search ioctl lock } { open search write add_name remove_name lock } } };

# Raw writes to misc block device
allow vold misc_block_device:blk_file { open append write lock };

neverallow { domain -vold } vold_data_file:dir ~{ open create read getattr setattr search relabelto ioctl };
neverallow { domain -vold } vold_data_file:{ file lnk_file sock_file fifo_file } ~{ relabelto getattr };
neverallow { domain -vold -init } vold_data_file:dir *;
neverallow { domain -vold -init } vold_data_file:{ file lnk_file sock_file fifo_file } *;
neverallow { domain -vold -init } restorecon_prop:property_service set;

neverallow vold fsck_exec:file execute_no_trans;
#line 1 "system/sepolicy/public/watchdogd.te"
# watchdogd seclabel is specified in init.<board>.rc
type watchdogd, domain;
allow watchdogd watchdog_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
allow watchdogd kmsg_device:chr_file { { getattr open read ioctl lock } { open append write lock } };
#line 1 "system/sepolicy/public/webview_zygote.te"
# webview_zygote is an auxiliary zygote process that is used to spawn
# isolated_app processes for rendering untrusted web content.

type webview_zygote, domain;
type webview_zygote_exec, exec_type, file_type;
#line 1 "system/sepolicy/public/wificond.te"
# wificond
type wificond, domain;
type wificond_exec, exec_type, file_type;


#line 5
# Call the servicemanager and transfer references to it.
#line 5
allow wificond servicemanager:binder { call transfer };
#line 5
# servicemanager performs getpidcon on clients.
#line 5
allow servicemanager wificond:dir search;
#line 5
allow servicemanager wificond:file { read open };
#line 5
allow servicemanager wificond:process getattr;
#line 5
# rw access to /dev/binder and /dev/ashmem is presently granted to
#line 5
# all domains in domain.te.
#line 5


#line 6
# Call the server domain and optionally transfer references to it.
#line 6
allow wificond system_server:binder { call transfer };
#line 6
# Allow the serverdomain to transfer references to the client on the reply.
#line 6
allow system_server wificond:binder transfer;
#line 6
# Receive and use open files from the server.
#line 6
allow wificond system_server:fd use;
#line 6



#line 8
  allow wificond wificond_service:service_manager { add find };
#line 8
  neverallow { domain -wificond } wificond_service:service_manager add;
#line 8


# wificond writes firmware paths to this file.
# wificond also changes the owership of this file on startup.
allow wificond sysfs_wlan_fwpath:file { { open append write lock } setattr };


#line 14

#line 14
allow wificond property_socket:sock_file write;
#line 14
allow wificond init:unix_stream_socket connectto;
#line 14

#line 14
allow wificond wifi_prop:property_service set;
#line 14

#line 14
allow wificond wifi_prop:file { getattr open read ioctl lock };
#line 14

#line 14


#line 15

#line 15
allow wificond property_socket:sock_file write;
#line 15
allow wificond init:unix_stream_socket connectto;
#line 15

#line 15
allow wificond ctl_default_prop:property_service set;
#line 15

#line 15
allow wificond ctl_default_prop:file { getattr open read ioctl lock };
#line 15

#line 15


# create sockets to set interfaces up and down
allow wificond self:udp_socket { create { ioctl read getattr write setattr lock append bind connect getopt setopt shutdown } };
# setting interface state up/down is a privileged ioctl
allowxperm wificond self:udp_socket ioctl { 0x00008914 };
allow wificond self:capability { net_admin net_raw };
# allow wificond to speak to nl80211 in the kernel
allow wificond self:netlink_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };
# newer kernels (e.g. 4.4 but not 4.1) have a new class for sockets
allow wificond self:netlink_generic_socket { create { read getattr write setattr lock append bind connect getopt setopt shutdown } };


#line 27
allow wificond proc_net:dir { open getattr read search ioctl lock };
#line 27
allow wificond proc_net:{ file lnk_file } { getattr open read ioctl lock };
#line 27


# wificond writes out configuration files for wpa_supplicant/hostapd.
# wificond also reads pid files out of this directory
allow wificond wifi_data_file:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow wificond wifi_data_file:file { create rename setattr unlink { { getattr open read ioctl lock } { open append write lock } } };

# wificond drops root shortly after starting
# wificond changes the ownership of some files before dropping root
allow wificond self:capability { setuid setgid setpcap chown };

# wificond cleans up sockets created by wpa_supplicant and framework
allow wificond wpa_socket:dir { { open getattr read search ioctl lock } { open search write add_name remove_name lock } };
allow wificond system_wpa_socket:sock_file unlink;
allow wificond wpa_socket:sock_file unlink;

# dumpstate support
allow wificond dumpstate:fd use;
allow wificond dumpstate:fifo_file write;
#line 1 "system/sepolicy/public/zygote.te"
# zygote
type zygote, domain;
type zygote_exec, exec_type, file_type;
#line 1 "system/sepolicy/reqd_mask/reqd_mask.te"
type reqd_mask_type;
#line 1 "system/sepolicy/reqd_mask/roles_decl"
role r;
#line 1 "system/sepolicy/public/roles"
role r types domain;
#line 1 "system/sepolicy/reqd_mask/roles"
role r types reqd_mask_type;
#line 1 "system/sepolicy/reqd_mask/users"
user u roles { r } level s0 range s0 - s0:c0.c1023;
#line 1 "system/sepolicy/reqd_mask/initial_sid_contexts"
sid reqd_mask u:r:reqd_mask_type:s0
