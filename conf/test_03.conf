# Ordering
# Required: classes initial_sids access_vectors
# Optional: default_rules mls
# Required: te_rbac users
# Optional: Constraints
# Required: initial_sid_contexts
# Optional: fs_contexts fs_uses genfs_contexts
# Required: net_contexts
# Optional: dev_contexts ibpkey_contexts ibendport_contexts

# classes
class CLASS1
class cl01
class cl02
class cl03
class cl04
class cl05
class cl06
class cl07
class cl08
class cl09
class clx
class process
class blk_file
class chr_file
class dir
class fifo_file
class lnk_file
class sock_file
class file

# initial_sids
sid kernel
sid security
sid unlabeled

# access_vectors
# Commons must use "{" and "}" even if they only have one perm
common cm01 { p11a p11b }
common cm02 { p22a p22b }
common file { read write }
class CLASS1 { PERM1 }
class cl01 inherits cm01 { p01a p01b }
class cl02 inherits cm02
class cl03 { p03a p03b }
class cl04 { p04a p04b }
class cl05 { p05a p05b }
class cl06 { p06a p06b }
class cl07 inherits cm01 { p07a p07b }
class cl08 { p08a p89a p89b }
class cl09 { p89a p89b }
class clx { ioctl }
class process { fork transition }
class blk_file inherits file
class chr_file inherits file
class dir inherits file
class fifo_file inherits file
class lnk_file inherits file
class sock_file inherits file
class file inherits file

# optional default_rules
default_user { cl01 } source;
default_user { cl02 } target;
default_user { cl03 cl04 } source;
default_role { cl01 } source;
default_role { cl02 } target;
default_role { cl03 cl04 } source;
default_type { cl01 } source;
default_type { cl02 } target;
default_type { cl03 cl04 } source;
default_range { cl01 } source low;
default_range { cl02 } source high;
default_range { cl03 } source low-high;
default_range { cl04 } target low;
default_range { cl05 } target high;
default_range { cl06 } target low-high;
default_range { cl07 } glblub;
default_range { cl08 cl09 } glblub;

# te_rbac
policycap network_peer_controls;
policycap open_perms;
policycap extended_socket_class;
policycap always_check_network;
policycap cgroup_seclabel;
policycap nnp_nosuid_transition;
policycap genfs_seclabel_symlinks;
policycap ioctl_skip_cloexec;
policycap userspace_initial_context;
attribute at01;
attribute at01b;
attribute at02;
attribute at04;
attribute at07;
attribute at08;
attribute at09;
expandattribute at01 false;
expandattribute { at04 at09 } true;
attribute_role ar01;
attribute_role ar02;
attribute_role ar04;
attribute_role ar05;
bool b01 false;
bool b02 true;
tunable b03 false;
tunable b04 true;
type TYPE1;
type tpo;
type tpx;
type tp01;
type tp02;
type tp03p alias tparent03;
type tp03c alias tchild03;
type tp04;
type tp05 alias ta05;
type tp06 alias { ta06a ta06b };
type tp07 alias ta07, at07;
type tp08, at08;
type tp09 alias { ta09a ta09b }, at09;
type tp10p;
type tp10c1;
type tp10c2;
type tp10c3;
type tp11;
# Deprecated -- Automatically make tp11.c a child of tp11
type tp11.c;
typealias tp01 alias { ta01a ta01b };
typealias tp01 alias { ta01c };  # More than one rule allowed for a type, but no dups
typealias tp02 alias ta02;
typebounds tparent03 tchild03;
typebounds tp10p tp10c1, tp10c2;
typebounds tp10p tp10c2, tp10c3; # More than one rule allowed for a type
typeattribute tp01 at01, at02;
typeattribute tp01 at01b, at02;  # More than one rule allowed for a type
typeattribute tp02 at02;
typeattribute tp04 at04;
permissive tp01;
permissive tp01; # More than one rule allowed for a type
permissive tp09;
allow TYPE1 self : CLASS1 PERM1;
allow tp01 self:cl01 { p01a p11a };
allow tp01 ta01a:cl01 p01b;
allow tp01 at01:cl01 p11b;
allow tp01 tpo:cl02 p22a;
allow at02 tpo:cl02 p22b;
allow tp03p tpo:cl03 { p03a p03b };
allow tp03c tpo:cl03 p03a;
allow {tp01 tp02 tp03p tp04 tp05 tp06 tp07 tp08 tp09} {tpo tpx} : clx ioctl;
# Below works because cl01 and cl07 inherit from cm01
allow {tp05 tp06} {tp07 tp08} : {cl01 cl07} {p11a p11b};
# Below works because cl08 and cl09 use the same name for these perms
allow {tp08 tp09} self : {cl08 cl09} {p89a p89b};
auditallow tp01 tpo:cl01 p01a;
auditallow {tp01 tp02} {tp03p tp04} : {cl08 cl09} {p89a p89b};
dontaudit tp01 tpo:cl01 p01b;
dontaudit {tp03p tp04} {tp05 tp06} : {cl08 cl09} {p89a p89b};
auditdeny tp01 tpo:cl01 p11a;
dontaudit {tp05 tp06} {tp07 tp08} : {cl08 cl09} {p89a p89b};
neverallow tp01 tpo:cl01 p11a;
neverallow {tp07 tp08} {tp09 tp10p} : {cl08 cl09} {p89a p89b};
neverallow tp01 * : dir read;
neverallow * tp01 : dir write;
neverallow * {at01 at04 at09 -self} : file read;
neverallow * ~self : file write;
neverallow ~tp01 ~{tp01 tp02 -tp04} : process fork;
allowxperm tp01 tpx:clx ioctl 0x1101;
allowxperm {tp02 tp03p} {tpo tpx} : clx ioctl {0x1201 {0x1203 0x1204} 0x1206-0x1208};
auditallowxperm tp04 tpx:clx ioctl 0x2101;
auditallowxperm {tp05 tp06} {tpo tpx} : clx ioctl {{{0x2201} 0x2202} {0x2204-0x2209}};
dontauditxperm tp07 tpx:clx ioctl ~0x3101;
dontauditxperm {tp08 tp09} {tpo tpx} : clx ioctl ~{{{0x3201-0x3203} 0x3205} 0x3207};
neverallowxperm tp10p tpx:clx ioctl 0x4101;
neverallowxperm {tp10c1 tp10c2} {tpo tpx} : clx ioctl {{{{0x5101} 0x5103} 0x5105}};  
type_transition tp01 tpo:cl01 tp02;
type_transition {tp02 tp03p} {tpo tpx} : {cl02 cl03} tp04;
type_member tp01 tpo:cl02 tp02;
type_member {tp04 tp05} {tpo tpx} : {cl04 cl05} tp06;
type_change tp01 tpo:cl03 tp02;
type_change {tp06 tp07} {tpo tpx} : {cl06 cl07} tp08;
type_transition tp01 tpo:cl04 tp02 "file01";
type_transition {at08 ta09b} {tpo tpx} : {cl08 cl09} tp07 "file02";

role ROLE1;
role rl01;
role rl02;
role rl03p;
role rl03c;
role ROLE1 types TYPE1;
# More than one rule allowed for a role
role rl01 types { tp01 };
role rl01 types { tp02 tp04 };
role rl02 types { at02 -tp01 };
role rl03p types tp03p;
role rl03c types tp03c;
role rl04, ar04;
role rl05, ar04, ar05;
roleattribute rl01 ar01, ar02;
roleattribute rl02 ar02;
allow rl01 rl02;
allow {rl01 rl02} {rl04 rl05};
role_transition rl01 tpo:cl01 rl02;
# If no class is given, then "process" is assumed as the class -- LEGACY
role_transition rl02 tpo rl04;

# users
user USER1 roles ROLE1;
user us01 roles rl01;

# optional constraints
constrain cl01 { p01b } not ((t1 == tpo) and (u1 != u2));
constrain {cl08 cl09} { p89a p89b } ((t1 != t2) or (r1 == r2));
validatetrans cl02 ((u1 == u2) or (r1 != r2) or (t1 == t2));
validatetrans cl03 ((u1 == us01) and not (u2 != us01));
validatetrans cl04 not ((r1 == {rl01 rl02}) or (r2 != ar01));
validatetrans cl05 ((t1 != {at01 at02}) and (t2 == {ta01a ta02})); 
# This should be a mlsvalidatetrans, but it needs to come after the decls
validatetrans cl06 ((u3 == {USER1 us01}) or (r3 != ar01) and (t3 != {at08 at09}));

# initial_sid_contexts
sid kernel USER1:ROLE1:TYPE1
sid security us01:rl01:tp01
sid unlabeled us01:rl01:tp01

#
# Ordering:
# fscon, fs_use_*, genfscon, portcon, netifcon, nodecon
# XEN ONLY (in any order): pirqcon, iomemcon, ioportcon, pcidevicecon, devicetreecon
# ibpkey, ibendport
#
# fscon rules are deprecated and not used (as far as I know)
fscon 1 2 us01:rl01:tp01 us01:rl01:tp02
fscon 3 4 us01:rl01:tp02 us01:rl01:tp01
fs_use_xattr fs01 us01:rl01:tp01;
fs_use_task fs02 us01:rl01:tp01;
fs_use_trans fs03 us01:rl01:tp01;
genfscon fs04 "/" us01:rl01:tp01
genfscon fs05 "/foo05" us01:rl01:tp02
genfscon fs06 "/foo06" -b us01:rl01:tp02
genfscon fs07 "/foo07" -c us01:rl01:tp02
genfscon fs08 "/foo08" -d us01:rl01:tp02
genfscon fs09 "/foo09" -p us01:rl01:tp02
genfscon fs10 "/foo10" -l us01:rl01:tp02
genfscon fs11 "/foo11" -s us01:rl01:tp02
genfscon fs12 "/foo12" -- us01:rl01:tp02
portcon udp 1000 us01:rl01:tp01
portcon udp 1007 us01:rl01:tp01
portcon udp 1005 us01:rl01:tp01
portcon udp 1016-1019 us01:rl01:tp01
portcon udp 1011-1014 us01:rl01:tp01
portcon tcp 2000 us01:rl01:tp01
portcon tcp 2001-2009 us01:rl01:tp01
portcon dccp 3000 us01:rl01:tp01
portcon dccp 3001-3009 us01:rl01:tp01
netifcon if01 us01:rl01:tp01 us01:rl01:tp02
netifcon if02 us01:rl01:tp02 us01:rl01:tp01
nodecon 10.1.1.0 255.255.255.0 us01:rl01:tp01
nodecon 10.2.1.0/24 us01:rl01:tp01
nodecon fd00:1:1:: ffff:ffff:ffff:: us01:rl01:tp01
nodecon fd00:2:1::/48 us01:rl01:tp01
ibpkeycon fd00:1:2:4:: 0xFFFF us01:rl01:tp01
ibpkeycon fd80:2:4:8:: 0-0x10 us01:rl01:tp01
ibendportcon foo1 1 us01:rl01:tp01
ibendportcon foo2 255 us01:rl01:tp01
