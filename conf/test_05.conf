
# classes
class CLASS1
class clb01
class clbx
# initial sids
sid kernel

# access vectors
class CLASS1 { PERM1 }
class clb01 { pb01a pb01b }
class clbx { ioctl }

# optional default rules
# te & rbac
# optionals and boolean ifs can be anywhere in the te_rbac section

optional {
  require {
    type tb01;
  }
  allow tb01 self : clb01 pb01a;
}

bool bb01 true;
bool bb02 false;
bool bb03 true;
bool bb04 false;
bool bb05 true;
bool bb06 false;
bool bb07 true;
bool bb08 false;
bool bb09 true;
tunable tub01 false;
tunable tub02 true;
tunable tub03 false;

attribute atb01;
attribute atb02;
attribute atb03;
type TYPE1;
type tb01, atb01;
type tb02, atb02;
type tb03, atb03;
type tb04;
type tb05;
type tb06;
type tb07;
type tb08;
type tb09;
type tbo;
type tbx;

allow TYPE1 self : CLASS1 PERM1;

attribute_role arb01;
attribute_role arb02;
attribute_role arb03;
role ROLE1;
role rb01, arb01;
role rb02, arb02;
role rb03, arb03;
role ROLE1 types TYPE1;
role rb01 types tb01;
role rb02 types tb02;
role rb03 types tb03;

optional {
  require {
    class clb01 { pb01a pb01b };
    role rb01;
    role rb02, rb03;
    type tb01;
    type tb02, tb03;
    attribute atb01;
    attribute atb02, atb03;
    attribute_role arb01;
    attribute_role arb02, arb03;
    user ub01; 
    user ub02, ub03;
    bool bb01;
    bool bb02, bb03;
    tunable tub01;
    tunable tub02, tub03;
  }
  # te_decl
  attribute ato1;
  expandattribute ato1 false;
  type to1;
  typealias to1 alias tao1;
  typeattribute to1 ato1;
  type to2p;
  type to2c;
  typebounds to2p to2c;
  bool bo1 true;
  tunable tuo1 false;
  type_transition to1 tb01 : clb01 tb02;
  type_transition to1 tb02 : clb01 tb03 "file1";
  type_member to1 tb03 : clb01 tb01;
  type_change tb01 to1 : clb01 tb02;
  allow to1 self : clb01 pb01a;
  auditallow to1 tb01 : clb01 pb01a;
  auditdeny to1 tb02 : clb01 pb01a;
  dontaudit to1 tb03 : clb01 pb01a;
  neverallow to1 self : clb01 pb01b;
  allowxperm to1 tbx : clbx ioctl 0x1101;
  auditallowxperm tb01 tbx : clbx ioctl 0x1102;
  dontauditxperm tb02 tbx : clbx ioctl 0x1103;
  neverallowxperm tb03 tbx : clbx ioctl 0x1104;
  permissive tb01;
  # rbac_decl
  attribute_role aro1;
  attribute_role aro2;
  role ro1, aro1;
  role ro2;
  role ro1 types to1;
  role ro2 types tb02;
  roleattribute ro2 aro2;
  role_transition ro1 tb01 : clb01 rb01;
  allow ro1 rb01;

  if bo1 {
    allow to1 tb01 : clb01 pb01a;
  } else {
    allow to1 tb01 : clb01 pb01b;
  }

  optional {
    require {
      type to1, tb02;
    }
    allow to1 tb02 : clb01 pb01b;
  }

  user uo1 roles ro1;
} else {
  allow tb03 self : clb01 pb01b;
}

if bb01 {
  require {
    type tb01, tb02, tb03, tb04, tb05, tb06;
  }
  allow tb01 tb04 : clb01 pb01a;
  auditallow tb01 tb05 : clb01 pb01a;
  auditdeny tb01 tb06 : clb01 pb01a;
  dontaudit tb02 tb04 : clb01 pb01a;
  type_transition tb01 tb04 : clb01 tb05;
  type_member tb02 tb04 : clb01 tb05;
  type_change tb03 tb05 : clb01 tb06;
} else {
  allow tb04 self : clb01 pb01b;
}

if not bb02 {
   allow tb02 self : clb01 pb01a;
}

if bb03 and bb04 {
   allow tb03 self : clb01 pb01a;
}

if bb04 or bb05 {
   allow tb04 self : clb01 pb01a;
}

if bb05 xor bb06 {
   allow tb05 self : clb01 pb01a;
}

if bb06 eq bb07 {
   allow tb06 self : clb01 pb01a;
}

if bb07 == bb08 {
   allow tb07 self : clb01 pb01a;
}

if bb08 != bb09 {
   allow tb08 self : clb01 pb01a;
}

if ((bb01 and not ((bb02 or bb03) xor (bb04 == bb05)) != (bb06))) or (bb07 and ((bb08 or not bb09))) {
   allow tb09 self : clb01 pb01a;
}

# users
user USER1 roles ROLE1;
user ub01 roles rb01;
user ub02 roles rb02;
user ub03 roles rb03;

# optional constraints

# initial sid contexts
sid kernel USER1:ROLE1:TYPE1

# ocontext rules